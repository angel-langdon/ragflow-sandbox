# generated by fastapi-codegen:
#   filename:  openai.yaml
#   timestamp: 2025-03-10T19:25:43+00:00

from __future__ import annotations

from typing import Optional, Union

from fastapi import FastAPI, Query, UploadFile

from .models import (
    ActorEmails,
    ActorIds,
    AdminApiKey,
    ApiKeyIds,
    ApiKeyList,
    AssistantObject,
    AudioTranscriptionsPostResponse,
    AudioTranslationsPostResponse,
    Batch,
    BatchesPostRequest,
    BucketWidth,
    BucketWidth2,
    CompleteUploadRequest,
    CreateAssistantRequest,
    CreateChatCompletionRequest,
    CreateChatCompletionResponse,
    CreateCompletionRequest,
    CreateCompletionResponse,
    CreateEmbeddingRequest,
    CreateEmbeddingResponse,
    CreateFineTuningJobRequest,
    CreateImageRequest,
    CreateMessageRequest,
    CreateModerationRequest,
    CreateModerationResponse,
    CreateRunRequest,
    CreateSpeechRequest,
    CreateThreadAndRunRequest,
    CreateThreadRequest,
    CreateUploadRequest,
    CreateVectorStoreFileBatchRequest,
    CreateVectorStoreFileRequest,
    CreateVectorStoreRequest,
    DeleteAssistantResponse,
    DeleteFileResponse,
    DeleteMessageResponse,
    DeleteModelResponse,
    DeleteThreadResponse,
    DeleteVectorStoreFileResponse,
    DeleteVectorStoreResponse,
    EffectiveAt,
    Emails,
    ErrorResponse,
    EventTypes,
    Filter,
    FineTuningJob,
    GroupBy,
    GroupBy1,
    GroupBy2,
    GroupBy3,
    GroupBy4,
    GroupBy5,
    GroupBy6,
    GroupBy7,
    GroupBy8,
    ImagesResponse,
    Include,
    Include1,
    Include2,
    Invite,
    InviteDeleteResponse,
    InviteListResponse,
    InviteRequest,
    ListAssistantsResponse,
    ListAuditLogsResponse,
    ListBatchesResponse,
    ListFilesResponse,
    ListFineTuningJobCheckpointsResponse,
    ListFineTuningJobEventsResponse,
    ListMessagesResponse,
    ListModelsResponse,
    ListPaginatedFineTuningJobsResponse,
    ListRunsResponse,
    ListRunStepsResponse,
    ListVectorStoreFilesResponse,
    ListVectorStoresResponse,
    MessageObject,
    ModelModel,
    Models,
    ModifyAssistantRequest,
    ModifyMessageRequest,
    ModifyRunRequest,
    ModifyThreadRequest,
    OpenAIFile,
    Order,
    OrganizationAdminApiKeysKeyIdDeleteResponse,
    OrganizationAdminApiKeysPostRequest,
    Project3,
    ProjectApiKey,
    ProjectApiKeyDeleteResponse,
    ProjectApiKeyListResponse,
    ProjectCreateRequest,
    ProjectIds,
    ProjectListResponse,
    ProjectRateLimit,
    ProjectRateLimitListResponse,
    ProjectRateLimitUpdateRequest,
    ProjectServiceAccount,
    ProjectServiceAccountCreateRequest,
    ProjectServiceAccountCreateResponse,
    ProjectServiceAccountDeleteResponse,
    ProjectServiceAccountListResponse,
    ProjectUpdateRequest,
    ProjectUser,
    ProjectUserCreateRequest,
    ProjectUserDeleteResponse,
    ProjectUserListResponse,
    ProjectUserUpdateRequest,
    RealtimeSessionCreateRequest,
    RealtimeSessionCreateResponse,
    ResourceIds,
    RunObject,
    RunStepObject,
    Sizes,
    Sources,
    SubmitToolOutputsRunRequest,
    ThreadObject,
    UpdateVectorStoreRequest,
    Upload,
    UploadPart,
    UsageResponse,
    User,
    UserDeleteResponse,
    UserIds,
    UserListResponse,
    UserRoleUpdateRequest,
    VectorStoreFileBatchObject,
    VectorStoreFileObject,
    VectorStoreObject,
)

app = FastAPI(
    title='OpenAI API',
    description='The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.',
    version='2.3.0',
    termsOfService='https://openai.com/policies/terms-of-use',
    contact={'name': 'OpenAI Support', 'url': 'https://help.openai.com/'},
    license={
        'name': 'MIT',
        'url': 'https://github.com/openai/openai-openapi/blob/master/LICENSE',
    },
    servers=[{'url': 'https://api.openai.com/v1'}],
)


@app.get('/assistants', response_model=ListAssistantsResponse, tags=['Assistants'])
def list_assistants(
    limit: Optional[int] = 20,
    order: Optional[Order1] = 'desc',
    after: Optional[str] = None,
    before: Optional[str] = None,
) -> ListAssistantsResponse:
    """
    Returns a list of assistants.
    """
    pass


@app.post('/assistants', response_model=AssistantObject, tags=['Assistants'])
def create_assistant(body: CreateAssistantRequest) -> AssistantObject:
    """
    Create an assistant with a model and instructions.
    """
    pass


@app.get(
    '/assistants/{assistant_id}', response_model=AssistantObject, tags=['Assistants']
)
def get_assistant(assistant_id: str) -> AssistantObject:
    """
    Retrieves an assistant.
    """
    pass


@app.post(
    '/assistants/{assistant_id}', response_model=AssistantObject, tags=['Assistants']
)
def modify_assistant(
    assistant_id: str, body: ModifyAssistantRequest = ...
) -> AssistantObject:
    """
    Modifies an assistant.
    """
    pass


@app.delete(
    '/assistants/{assistant_id}',
    response_model=DeleteAssistantResponse,
    tags=['Assistants'],
)
def delete_assistant(assistant_id: str) -> DeleteAssistantResponse:
    """
    Delete an assistant.
    """
    pass


@app.post('/audio/speech', response_model=bytes, tags=['Audio'])
def create_speech(body: CreateSpeechRequest) -> bytes:
    """
    Generates audio from the input text.
    """
    pass


@app.post(
    '/audio/transcriptions',
    response_model=AudioTranscriptionsPostResponse,
    tags=['Audio'],
)
def create_transcription(file: UploadFile) -> AudioTranscriptionsPostResponse:
    """
    Transcribes audio into the input language.
    """
    pass


@app.post(
    '/audio/translations', response_model=AudioTranslationsPostResponse, tags=['Audio']
)
def create_translation(file: UploadFile) -> AudioTranslationsPostResponse:
    """
    Translates audio into English.
    """
    pass


@app.post('/batches', response_model=Batch, tags=['Batch'])
def create_batch(body: BatchesPostRequest) -> Batch:
    """
    Creates and executes a batch from an uploaded file of requests
    """
    pass


@app.get('/batches', response_model=ListBatchesResponse, tags=['Batch'])
def list_batches(
    after: Optional[str] = None, limit: Optional[int] = 20
) -> ListBatchesResponse:
    """
    List your organization's batches.
    """
    pass


@app.get('/batches/{batch_id}', response_model=Batch, tags=['Batch'])
def retrieve_batch(batch_id: str) -> Batch:
    """
    Retrieves a batch.
    """
    pass


@app.post('/batches/{batch_id}/cancel', response_model=Batch, tags=['Batch'])
def cancel_batch(batch_id: str) -> Batch:
    """
    Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.
    """
    pass


@app.post(
    '/chat/completions', response_model=CreateChatCompletionResponse, tags=['Chat']
)
def create_chat_completion(
    body: CreateChatCompletionRequest,
) -> CreateChatCompletionResponse:
    """
        Creates a model response for the given chat conversation. Learn more in the
    [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),
    and [audio](/docs/guides/audio) guides.

    Parameter support can differ depending on the model used to generate the
    response, particularly for newer reasoning models. Parameters that are only
    supported for reasoning models are noted below. For the current state of
    unsupported parameters in reasoning models,
    [refer to the reasoning guide](/docs/guides/reasoning).

    """
    pass


@app.post('/completions', response_model=CreateCompletionResponse, tags=['Completions'])
def create_completion(body: CreateCompletionRequest) -> CreateCompletionResponse:
    """
    Creates a completion for the provided prompt and parameters.
    """
    pass


@app.post('/embeddings', response_model=CreateEmbeddingResponse, tags=['Embeddings'])
def create_embedding(body: CreateEmbeddingRequest) -> CreateEmbeddingResponse:
    """
    Creates an embedding vector representing the input text.
    """
    pass


@app.get('/files', response_model=ListFilesResponse, tags=['Files'])
def list_files(
    purpose: Optional[str] = None,
    limit: Optional[int] = 10000,
    order: Optional[Order3] = 'desc',
    after: Optional[str] = None,
) -> ListFilesResponse:
    """
    Returns a list of files.
    """
    pass


@app.post('/files', response_model=OpenAIFile, tags=['Files'])
def create_file(file: UploadFile) -> OpenAIFile:
    """
        Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.

    The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.

    The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.

    The Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).

    Please [contact us](https://help.openai.com/) if you need to increase these storage limits.

    """
    pass


@app.delete('/files/{file_id}', response_model=DeleteFileResponse, tags=['Files'])
def delete_file(file_id: str) -> DeleteFileResponse:
    """
    Delete a file.
    """
    pass


@app.get('/files/{file_id}', response_model=OpenAIFile, tags=['Files'])
def retrieve_file(file_id: str) -> OpenAIFile:
    """
    Returns information about a specific file.
    """
    pass


@app.get('/files/{file_id}/content', response_model=str, tags=['Files'])
def download_file(file_id: str) -> str:
    """
    Returns the contents of the specified file.
    """
    pass


@app.post('/fine_tuning/jobs', response_model=FineTuningJob, tags=['Fine-tuning'])
def create_fine_tuning_job(body: CreateFineTuningJobRequest) -> FineTuningJob:
    """
        Creates a fine-tuning job which begins the process of creating a new model from a given dataset.

    Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.

    [Learn more about fine-tuning](/docs/guides/fine-tuning)

    """
    pass


@app.get(
    '/fine_tuning/jobs',
    response_model=ListPaginatedFineTuningJobsResponse,
    tags=['Fine-tuning'],
)
def list_paginated_fine_tuning_jobs(
    after: Optional[str] = None, limit: Optional[int] = 20
) -> ListPaginatedFineTuningJobsResponse:
    """
    List your organization's fine-tuning jobs

    """
    pass


@app.get(
    '/fine_tuning/jobs/{fine_tuning_job_id}',
    response_model=FineTuningJob,
    tags=['Fine-tuning'],
)
def retrieve_fine_tuning_job(fine_tuning_job_id: str) -> FineTuningJob:
    """
        Get info about a fine-tuning job.

    [Learn more about fine-tuning](/docs/guides/fine-tuning)

    """
    pass


@app.post(
    '/fine_tuning/jobs/{fine_tuning_job_id}/cancel',
    response_model=FineTuningJob,
    tags=['Fine-tuning'],
)
def cancel_fine_tuning_job(fine_tuning_job_id: str) -> FineTuningJob:
    """
    Immediately cancel a fine-tune job.

    """
    pass


@app.get(
    '/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints',
    response_model=ListFineTuningJobCheckpointsResponse,
    tags=['Fine-tuning'],
)
def list_fine_tuning_job_checkpoints(
    fine_tuning_job_id: str, after: Optional[str] = None, limit: Optional[int] = 10
) -> ListFineTuningJobCheckpointsResponse:
    """
    List checkpoints for a fine-tuning job.

    """
    pass


@app.get(
    '/fine_tuning/jobs/{fine_tuning_job_id}/events',
    response_model=ListFineTuningJobEventsResponse,
    tags=['Fine-tuning'],
)
def list_fine_tuning_events(
    fine_tuning_job_id: str, after: Optional[str] = None, limit: Optional[int] = 20
) -> ListFineTuningJobEventsResponse:
    """
    Get status updates for a fine-tuning job.

    """
    pass


@app.post('/images/edits', response_model=ImagesResponse, tags=['Images'])
def create_image_edit(file: UploadFile) -> ImagesResponse:
    """
    Creates an edited or extended image given an original image and a prompt.
    """
    pass


@app.post('/images/generations', response_model=ImagesResponse, tags=['Images'])
def create_image(body: CreateImageRequest) -> ImagesResponse:
    """
    Creates an image given a prompt.
    """
    pass


@app.post('/images/variations', response_model=ImagesResponse, tags=['Images'])
def create_image_variation(file: UploadFile) -> ImagesResponse:
    """
    Creates a variation of a given image.
    """
    pass


@app.get('/models', response_model=ListModelsResponse, tags=['Models'])
def list_models() -> ListModelsResponse:
    """
    Lists the currently available models, and provides basic information about each one such as the owner and availability.
    """
    pass


@app.get('/models/{model}', response_model=Model, tags=['Models'])
def retrieve_model(model: str) -> Model:
    """
    Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
    """
    pass


@app.delete('/models/{model}', response_model=DeleteModelResponse, tags=['Models'])
def delete_model(model: str) -> DeleteModelResponse:
    """
    Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
    """
    pass


@app.post('/moderations', response_model=CreateModerationResponse, tags=['Moderations'])
def create_moderation(body: CreateModerationRequest) -> CreateModerationResponse:
    """
        Classifies if text and/or image inputs are potentially harmful. Learn
    more in the [moderation guide](/docs/guides/moderation).

    """
    pass


@app.get('/organization/admin_api_keys', response_model=ApiKeyList)
def admin_api_keys_list(
    after: Optional[str] = None,
    order: Optional[Order5] = 'asc',
    limit: Optional[int] = 20,
) -> ApiKeyList:
    """
    List organization API keys
    """
    pass


@app.post('/organization/admin_api_keys', response_model=AdminApiKey)
def admin_api_keys_create(body: OrganizationAdminApiKeysPostRequest) -> AdminApiKey:
    """
    Create an organization admin API key
    """
    pass


@app.get('/organization/admin_api_keys/{key_id}', response_model=AdminApiKey)
def admin_api_keys_get(key_id: str) -> AdminApiKey:
    """
    Retrieve a single organization API key
    """
    pass


@app.delete(
    '/organization/admin_api_keys/{key_id}',
    response_model=OrganizationAdminApiKeysKeyIdDeleteResponse,
)
def admin_api_keys_delete(key_id: str) -> OrganizationAdminApiKeysKeyIdDeleteResponse:
    """
    Delete an organization admin API key
    """
    pass


@app.get(
    '/organization/audit_logs',
    response_model=ListAuditLogsResponse,
    tags=['Audit Logs'],
)
def list_audit_logs(
    effective_at: Optional[EffectiveAt1] = None,
    project_ids__: Optional[ProjectIds] = Query(None, alias='project_ids[]'),
    event_types__: Optional[EventTypes] = Query(None, alias='event_types[]'),
    actor_ids__: Optional[ActorIds] = Query(None, alias='actor_ids[]'),
    actor_emails__: Optional[ActorEmails] = Query(None, alias='actor_emails[]'),
    resource_ids__: Optional[ResourceIds] = Query(None, alias='resource_ids[]'),
    limit: Optional[int] = 20,
    after: Optional[str] = None,
    before: Optional[str] = None,
) -> ListAuditLogsResponse:
    """
    List user actions and configuration changes within this organization.
    """
    pass


@app.get('/organization/costs', response_model=UsageResponse, tags=['Usage'])
def usage_costs(
    start_time: int,
    end_time: Optional[int] = None,
    bucket_width: Optional[BucketWidth1] = '1d',
    project_ids: Optional[ProjectIds1] = None,
    group_by: Optional[GroupBy] = None,
    limit: Optional[int] = 7,
    page: Optional[str] = None,
) -> UsageResponse:
    """
    Get costs details for the organization.
    """
    pass


@app.get('/organization/invites', response_model=InviteListResponse, tags=['Invites'])
def list_invites(
    limit: Optional[int] = 20, after: Optional[str] = None
) -> InviteListResponse:
    """
    Returns a list of invites in the organization.
    """
    pass


@app.post('/organization/invites', response_model=Invite, tags=['Invites'])
def invite_user(body: InviteRequest) -> Invite:
    """
    Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.
    """
    pass


@app.get('/organization/invites/{invite_id}', response_model=Invite, tags=['Invites'])
def retrieve_invite(invite_id: str) -> Invite:
    """
    Retrieves an invite.
    """
    pass


@app.delete(
    '/organization/invites/{invite_id}',
    response_model=InviteDeleteResponse,
    tags=['Invites'],
)
def delete_invite(invite_id: str) -> InviteDeleteResponse:
    """
    Delete an invite. If the invite has already been accepted, it cannot be deleted.
    """
    pass


@app.get(
    '/organization/projects', response_model=ProjectListResponse, tags=['Projects']
)
def list_projects(
    limit: Optional[int] = 20,
    after: Optional[str] = None,
    include_archived: Optional[bool] = False,
) -> ProjectListResponse:
    """
    Returns a list of projects.
    """
    pass


@app.post('/organization/projects', response_model=Project3, tags=['Projects'])
def create_project(body: ProjectCreateRequest) -> Project3:
    """
    Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
    """
    pass


@app.get(
    '/organization/projects/{project_id}', response_model=Project3, tags=['Projects']
)
def retrieve_project(project_id: str) -> Project3:
    """
    Retrieves a project.
    """
    pass


@app.post(
    '/organization/projects/{project_id}',
    response_model=Project3,
    responses={'400': {'model': ErrorResponse}},
    tags=['Projects'],
)
def modify_project(
    project_id: str, body: ProjectUpdateRequest = ...
) -> Union[Project3, ErrorResponse]:
    """
    Modifies a project in the organization.
    """
    pass


@app.get(
    '/organization/projects/{project_id}/api_keys',
    response_model=ProjectApiKeyListResponse,
    tags=['Projects'],
)
def list_project_api_keys(
    project_id: str, limit: Optional[int] = 20, after: Optional[str] = None
) -> ProjectApiKeyListResponse:
    """
    Returns a list of API keys in the project.
    """
    pass


@app.get(
    '/organization/projects/{project_id}/api_keys/{key_id}',
    response_model=ProjectApiKey,
    tags=['Projects'],
)
def retrieve_project_api_key(project_id: str, key_id: str = ...) -> ProjectApiKey:
    """
    Retrieves an API key in the project.
    """
    pass


@app.delete(
    '/organization/projects/{project_id}/api_keys/{key_id}',
    response_model=ProjectApiKeyDeleteResponse,
    responses={'400': {'model': ErrorResponse}},
    tags=['Projects'],
)
def delete_project_api_key(
    project_id: str, key_id: str = ...
) -> Union[ProjectApiKeyDeleteResponse, ErrorResponse]:
    """
    Deletes an API key from the project.
    """
    pass


@app.post(
    '/organization/projects/{project_id}/archive',
    response_model=Project3,
    tags=['Projects'],
)
def archive_project(project_id: str) -> Project3:
    """
    Archives a project in the organization. Archived projects cannot be used or updated.
    """
    pass


@app.get(
    '/organization/projects/{project_id}/rate_limits',
    response_model=ProjectRateLimitListResponse,
    tags=['Projects'],
)
def list_project_rate_limits(
    project_id: str,
    limit: Optional[int] = 100,
    after: Optional[str] = None,
    before: Optional[str] = None,
) -> ProjectRateLimitListResponse:
    """
    Returns the rate limits per model for a project.
    """
    pass


@app.post(
    '/organization/projects/{project_id}/rate_limits/{rate_limit_id}',
    response_model=ProjectRateLimit,
    responses={'400': {'model': ErrorResponse}},
    tags=['Projects'],
)
def update_project_rate_limits(
    project_id: str, rate_limit_id: str = ..., body: ProjectRateLimitUpdateRequest = ...
) -> Union[ProjectRateLimit, ErrorResponse]:
    """
    Updates a project rate limit.
    """
    pass


@app.get(
    '/organization/projects/{project_id}/service_accounts',
    response_model=ProjectServiceAccountListResponse,
    responses={'400': {'model': ErrorResponse}},
    tags=['Projects'],
)
def list_project_service_accounts(
    project_id: str, limit: Optional[int] = 20, after: Optional[str] = None
) -> Union[ProjectServiceAccountListResponse, ErrorResponse]:
    """
    Returns a list of service accounts in the project.
    """
    pass


@app.post(
    '/organization/projects/{project_id}/service_accounts',
    response_model=ProjectServiceAccountCreateResponse,
    responses={'400': {'model': ErrorResponse}},
    tags=['Projects'],
)
def create_project_service_account(
    project_id: str, body: ProjectServiceAccountCreateRequest = ...
) -> Union[ProjectServiceAccountCreateResponse, ErrorResponse]:
    """
    Creates a new service account in the project. This also returns an unredacted API key for the service account.
    """
    pass


@app.get(
    '/organization/projects/{project_id}/service_accounts/{service_account_id}',
    response_model=ProjectServiceAccount,
    tags=['Projects'],
)
def retrieve_project_service_account(
    project_id: str, service_account_id: str = ...
) -> ProjectServiceAccount:
    """
    Retrieves a service account in the project.
    """
    pass


@app.delete(
    '/organization/projects/{project_id}/service_accounts/{service_account_id}',
    response_model=ProjectServiceAccountDeleteResponse,
    tags=['Projects'],
)
def delete_project_service_account(
    project_id: str, service_account_id: str = ...
) -> ProjectServiceAccountDeleteResponse:
    """
    Deletes a service account from the project.
    """
    pass


@app.get(
    '/organization/projects/{project_id}/users',
    response_model=ProjectUserListResponse,
    responses={'400': {'model': ErrorResponse}},
    tags=['Projects'],
)
def list_project_users(
    project_id: str, limit: Optional[int] = 20, after: Optional[str] = None
) -> Union[ProjectUserListResponse, ErrorResponse]:
    """
    Returns a list of users in the project.
    """
    pass


@app.post(
    '/organization/projects/{project_id}/users',
    response_model=ProjectUser,
    responses={'400': {'model': ErrorResponse}},
    tags=['Projects'],
)
def create_project_user(
    project_id: str, body: ProjectUserCreateRequest = ...
) -> Union[ProjectUser, ErrorResponse]:
    """
    Adds a user to the project. Users must already be members of the organization to be added to a project.
    """
    pass


@app.get(
    '/organization/projects/{project_id}/users/{user_id}',
    response_model=ProjectUser,
    tags=['Projects'],
)
def retrieve_project_user(project_id: str, user_id: str = ...) -> ProjectUser:
    """
    Retrieves a user in the project.
    """
    pass


@app.post(
    '/organization/projects/{project_id}/users/{user_id}',
    response_model=ProjectUser,
    responses={'400': {'model': ErrorResponse}},
    tags=['Projects'],
)
def modify_project_user(
    project_id: str, user_id: str = ..., body: ProjectUserUpdateRequest = ...
) -> Union[ProjectUser, ErrorResponse]:
    """
    Modifies a user's role in the project.
    """
    pass


@app.delete(
    '/organization/projects/{project_id}/users/{user_id}',
    response_model=ProjectUserDeleteResponse,
    responses={'400': {'model': ErrorResponse}},
    tags=['Projects'],
)
def delete_project_user(
    project_id: str, user_id: str = ...
) -> Union[ProjectUserDeleteResponse, ErrorResponse]:
    """
    Deletes a user from the project.
    """
    pass


@app.get(
    '/organization/usage/audio_speeches', response_model=UsageResponse, tags=['Usage']
)
def usage_audio_speeches(
    start_time: int,
    end_time: Optional[int] = None,
    bucket_width: Optional[BucketWidth3] = '1d',
    project_ids: Optional[ProjectIds2] = None,
    user_ids: Optional[UserIds] = None,
    api_key_ids: Optional[ApiKeyIds] = None,
    models: Optional[Models] = None,
    group_by: Optional[GroupBy1] = None,
    limit: Optional[int] = None,
    page: Optional[str] = None,
) -> UsageResponse:
    """
    Get audio speeches usage details for the organization.
    """
    pass


@app.get(
    '/organization/usage/audio_transcriptions',
    response_model=UsageResponse,
    tags=['Usage'],
)
def usage_audio_transcriptions(
    start_time: int,
    end_time: Optional[int] = None,
    bucket_width: Optional[BucketWidth5] = '1d',
    project_ids: Optional[ProjectIds3] = None,
    user_ids: Optional[UserIds1] = None,
    api_key_ids: Optional[ApiKeyIds1] = None,
    models: Optional[Models1] = None,
    group_by: Optional[GroupBy2] = None,
    limit: Optional[int] = None,
    page: Optional[str] = None,
) -> UsageResponse:
    """
    Get audio transcriptions usage details for the organization.
    """
    pass


@app.get(
    '/organization/usage/code_interpreter_sessions',
    response_model=UsageResponse,
    tags=['Usage'],
)
def usage_code_interpreter_sessions(
    start_time: int,
    end_time: Optional[int] = None,
    bucket_width: Optional[BucketWidth7] = '1d',
    project_ids: Optional[ProjectIds4] = None,
    group_by: Optional[GroupBy3] = None,
    limit: Optional[int] = None,
    page: Optional[str] = None,
) -> UsageResponse:
    """
    Get code interpreter sessions usage details for the organization.
    """
    pass


@app.get(
    '/organization/usage/completions', response_model=UsageResponse, tags=['Usage']
)
def usage_completions(
    start_time: int,
    end_time: Optional[int] = None,
    bucket_width: Optional[BucketWidth9] = '1d',
    project_ids: Optional[ProjectIds5] = None,
    user_ids: Optional[UserIds2] = None,
    api_key_ids: Optional[ApiKeyIds2] = None,
    models: Optional[Models2] = None,
    batch: Optional[bool] = None,
    group_by: Optional[GroupBy4] = None,
    limit: Optional[int] = None,
    page: Optional[str] = None,
) -> UsageResponse:
    """
    Get completions usage details for the organization.
    """
    pass


@app.get('/organization/usage/embeddings', response_model=UsageResponse, tags=['Usage'])
def usage_embeddings(
    start_time: int,
    end_time: Optional[int] = None,
    bucket_width: Optional[BucketWidth11] = '1d',
    project_ids: Optional[ProjectIds6] = None,
    user_ids: Optional[UserIds3] = None,
    api_key_ids: Optional[ApiKeyIds3] = None,
    models: Optional[Models3] = None,
    group_by: Optional[GroupBy5] = None,
    limit: Optional[int] = None,
    page: Optional[str] = None,
) -> UsageResponse:
    """
    Get embeddings usage details for the organization.
    """
    pass


@app.get('/organization/usage/images', response_model=UsageResponse, tags=['Usage'])
def usage_images(
    start_time: int,
    end_time: Optional[int] = None,
    bucket_width: Optional[BucketWidth13] = '1d',
    sources: Optional[Sources] = None,
    sizes: Optional[Sizes] = None,
    project_ids: Optional[ProjectIds7] = None,
    user_ids: Optional[UserIds4] = None,
    api_key_ids: Optional[ApiKeyIds4] = None,
    models: Optional[Models4] = None,
    group_by: Optional[GroupBy6] = None,
    limit: Optional[int] = None,
    page: Optional[str] = None,
) -> UsageResponse:
    """
    Get images usage details for the organization.
    """
    pass


@app.get(
    '/organization/usage/moderations', response_model=UsageResponse, tags=['Usage']
)
def usage_moderations(
    start_time: int,
    end_time: Optional[int] = None,
    bucket_width: Optional[BucketWidth15] = '1d',
    project_ids: Optional[ProjectIds8] = None,
    user_ids: Optional[UserIds5] = None,
    api_key_ids: Optional[ApiKeyIds5] = None,
    models: Optional[Models5] = None,
    group_by: Optional[GroupBy7] = None,
    limit: Optional[int] = None,
    page: Optional[str] = None,
) -> UsageResponse:
    """
    Get moderations usage details for the organization.
    """
    pass


@app.get(
    '/organization/usage/vector_stores', response_model=UsageResponse, tags=['Usage']
)
def usage_vector_stores(
    start_time: int,
    end_time: Optional[int] = None,
    bucket_width: Optional[BucketWidth17] = '1d',
    project_ids: Optional[ProjectIds9] = None,
    group_by: Optional[GroupBy8] = None,
    limit: Optional[int] = None,
    page: Optional[str] = None,
) -> UsageResponse:
    """
    Get vector stores usage details for the organization.
    """
    pass


@app.get('/organization/users', response_model=UserListResponse, tags=['Users'])
def list_users(
    limit: Optional[int] = 20,
    after: Optional[str] = None,
    emails: Optional[Emails] = None,
) -> UserListResponse:
    """
    Lists all of the users in the organization.
    """
    pass


@app.get('/organization/users/{user_id}', response_model=User, tags=['Users'])
def retrieve_user(user_id: str) -> User:
    """
    Retrieves a user by their identifier.
    """
    pass


@app.post('/organization/users/{user_id}', response_model=User, tags=['Users'])
def modify_user(user_id: str, body: UserRoleUpdateRequest = ...) -> User:
    """
    Modifies a user's role in the organization.
    """
    pass


@app.delete(
    '/organization/users/{user_id}', response_model=UserDeleteResponse, tags=['Users']
)
def delete_user(user_id: str) -> UserDeleteResponse:
    """
    Deletes a user from the organization.
    """
    pass


@app.post(
    '/realtime/sessions',
    response_model=RealtimeSessionCreateResponse,
    tags=['Realtime'],
)
def create_realtime_session(
    body: RealtimeSessionCreateRequest,
) -> RealtimeSessionCreateResponse:
    """
        Create an ephemeral API token for use in client-side applications with the
    Realtime API. Can be configured with the same session parameters as the
    `session.update` client event.

    It responds with a session object, plus a `client_secret` key which contains
    a usable ephemeral API token that can be used to authenticate browser clients
    for the Realtime API.

    """
    pass


@app.post('/threads', response_model=ThreadObject, tags=['Assistants'])
def create_thread(body: CreateThreadRequest = None) -> ThreadObject:
    """
    Create a thread.
    """
    pass


@app.post('/threads/runs', response_model=RunObject, tags=['Assistants'])
def create_thread_and_run(body: CreateThreadAndRunRequest) -> RunObject:
    """
    Create a thread and run it in one request.
    """
    pass


@app.get('/threads/{thread_id}', response_model=ThreadObject, tags=['Assistants'])
def get_thread(thread_id: str) -> ThreadObject:
    """
    Retrieves a thread.
    """
    pass


@app.post('/threads/{thread_id}', response_model=ThreadObject, tags=['Assistants'])
def modify_thread(thread_id: str, body: ModifyThreadRequest = ...) -> ThreadObject:
    """
    Modifies a thread.
    """
    pass


@app.delete(
    '/threads/{thread_id}', response_model=DeleteThreadResponse, tags=['Assistants']
)
def delete_thread(thread_id: str) -> DeleteThreadResponse:
    """
    Delete a thread.
    """
    pass


@app.get(
    '/threads/{thread_id}/messages',
    response_model=ListMessagesResponse,
    tags=['Assistants'],
)
def list_messages(
    thread_id: str,
    limit: Optional[int] = 20,
    order: Optional[Order7] = 'desc',
    after: Optional[str] = None,
    before: Optional[str] = None,
    run_id: Optional[str] = None,
) -> ListMessagesResponse:
    """
    Returns a list of messages for a given thread.
    """
    pass


@app.post(
    '/threads/{thread_id}/messages', response_model=MessageObject, tags=['Assistants']
)
def create_message(thread_id: str, body: CreateMessageRequest = ...) -> MessageObject:
    """
    Create a message.
    """
    pass


@app.get(
    '/threads/{thread_id}/messages/{message_id}',
    response_model=MessageObject,
    tags=['Assistants'],
)
def get_message(thread_id: str, message_id: str = ...) -> MessageObject:
    """
    Retrieve a message.
    """
    pass


@app.post(
    '/threads/{thread_id}/messages/{message_id}',
    response_model=MessageObject,
    tags=['Assistants'],
)
def modify_message(
    thread_id: str, message_id: str = ..., body: ModifyMessageRequest = ...
) -> MessageObject:
    """
    Modifies a message.
    """
    pass


@app.delete(
    '/threads/{thread_id}/messages/{message_id}',
    response_model=DeleteMessageResponse,
    tags=['Assistants'],
)
def delete_message(thread_id: str, message_id: str = ...) -> DeleteMessageResponse:
    """
    Deletes a message.
    """
    pass


@app.get(
    '/threads/{thread_id}/runs', response_model=ListRunsResponse, tags=['Assistants']
)
def list_runs(
    thread_id: str,
    limit: Optional[int] = 20,
    order: Optional[Order9] = 'desc',
    after: Optional[str] = None,
    before: Optional[str] = None,
) -> ListRunsResponse:
    """
    Returns a list of runs belonging to a thread.
    """
    pass


@app.post('/threads/{thread_id}/runs', response_model=RunObject, tags=['Assistants'])
def create_run(
    thread_id: str,
    include__: Optional[Include] = Query(None, alias='include[]'),
    body: CreateRunRequest = ...,
) -> RunObject:
    """
    Create a run.
    """
    pass


@app.get(
    '/threads/{thread_id}/runs/{run_id}', response_model=RunObject, tags=['Assistants']
)
def get_run(thread_id: str, run_id: str = ...) -> RunObject:
    """
    Retrieves a run.
    """
    pass


@app.post(
    '/threads/{thread_id}/runs/{run_id}', response_model=RunObject, tags=['Assistants']
)
def modify_run(
    thread_id: str, run_id: str = ..., body: ModifyRunRequest = ...
) -> RunObject:
    """
    Modifies a run.
    """
    pass


@app.post(
    '/threads/{thread_id}/runs/{run_id}/cancel',
    response_model=RunObject,
    tags=['Assistants'],
)
def cancel_run(thread_id: str, run_id: str = ...) -> RunObject:
    """
    Cancels a run that is `in_progress`.
    """
    pass


@app.get(
    '/threads/{thread_id}/runs/{run_id}/steps',
    response_model=ListRunStepsResponse,
    tags=['Assistants'],
)
def list_run_steps(
    thread_id: str,
    run_id: str = ...,
    limit: Optional[int] = 20,
    order: Optional[Order11] = 'desc',
    after: Optional[str] = None,
    before: Optional[str] = None,
    include__: Optional[Include1] = Query(None, alias='include[]'),
) -> ListRunStepsResponse:
    """
    Returns a list of run steps belonging to a run.
    """
    pass


@app.get(
    '/threads/{thread_id}/runs/{run_id}/steps/{step_id}',
    response_model=RunStepObject,
    tags=['Assistants'],
)
def get_run_step(
    thread_id: str,
    run_id: str = ...,
    step_id: str = ...,
    include__: Optional[Include2] = Query(None, alias='include[]'),
) -> RunStepObject:
    """
    Retrieves a run step.
    """
    pass


@app.post(
    '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs',
    response_model=RunObject,
    tags=['Assistants'],
)
def submit_tool_ouputs_to_run(
    thread_id: str, run_id: str = ..., body: SubmitToolOutputsRunRequest = ...
) -> RunObject:
    """
    When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.

    """
    pass


@app.post('/uploads', response_model=Upload, tags=['Uploads'])
def create_upload(body: CreateUploadRequest) -> Upload:
    """
        Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and expires after an hour after you create it.

    Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all the parts you uploaded. This File is usable in the rest of our platform as a regular File object.

    For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the supported MIME types for your use case:
    - [Assistants](/docs/assistants/tools/file-search#supported-files)

    For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a File](/docs/api-reference/files/create).

    """
    pass


@app.post('/uploads/{upload_id}/cancel', response_model=Upload, tags=['Uploads'])
def cancel_upload(upload_id: str) -> Upload:
    """
    Cancels the Upload. No Parts may be added after an Upload is cancelled.

    """
    pass


@app.post('/uploads/{upload_id}/complete', response_model=Upload, tags=['Uploads'])
def complete_upload(upload_id: str, body: CompleteUploadRequest = ...) -> Upload:
    """
        Completes the [Upload](/docs/api-reference/uploads/object).

    Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.

    You can specify the order of the Parts by passing in an ordered list of the Part IDs.

    The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.

    """
    pass


@app.post('/uploads/{upload_id}/parts', response_model=UploadPart, tags=['Uploads'])
def add_upload_part(upload_id: str, file: UploadFile = ...) -> UploadPart:
    """
        Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload.

    Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.

    It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).

    """
    pass


@app.get(
    '/vector_stores', response_model=ListVectorStoresResponse, tags=['Vector stores']
)
def list_vector_stores(
    limit: Optional[int] = 20,
    order: Optional[Order13] = 'desc',
    after: Optional[str] = None,
    before: Optional[str] = None,
) -> ListVectorStoresResponse:
    """
    Returns a list of vector stores.
    """
    pass


@app.post('/vector_stores', response_model=VectorStoreObject, tags=['Vector stores'])
def create_vector_store(body: CreateVectorStoreRequest) -> VectorStoreObject:
    """
    Create a vector store.
    """
    pass


@app.get(
    '/vector_stores/{vector_store_id}',
    response_model=VectorStoreObject,
    tags=['Vector stores'],
)
def get_vector_store(vector_store_id: str) -> VectorStoreObject:
    """
    Retrieves a vector store.
    """
    pass


@app.post(
    '/vector_stores/{vector_store_id}',
    response_model=VectorStoreObject,
    tags=['Vector stores'],
)
def modify_vector_store(
    vector_store_id: str, body: UpdateVectorStoreRequest = ...
) -> VectorStoreObject:
    """
    Modifies a vector store.
    """
    pass


@app.delete(
    '/vector_stores/{vector_store_id}',
    response_model=DeleteVectorStoreResponse,
    tags=['Vector stores'],
)
def delete_vector_store(vector_store_id: str) -> DeleteVectorStoreResponse:
    """
    Delete a vector store.
    """
    pass


@app.post(
    '/vector_stores/{vector_store_id}/file_batches',
    response_model=VectorStoreFileBatchObject,
    tags=['Vector stores'],
)
def create_vector_store_file_batch(
    vector_store_id: str, body: CreateVectorStoreFileBatchRequest = ...
) -> VectorStoreFileBatchObject:
    """
    Create a vector store file batch.
    """
    pass


@app.get(
    '/vector_stores/{vector_store_id}/file_batches/{batch_id}',
    response_model=VectorStoreFileBatchObject,
    tags=['Vector stores'],
)
def get_vector_store_file_batch(
    vector_store_id: str, batch_id: str = ...
) -> VectorStoreFileBatchObject:
    """
    Retrieves a vector store file batch.
    """
    pass


@app.post(
    '/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel',
    response_model=VectorStoreFileBatchObject,
    tags=['Vector stores'],
)
def cancel_vector_store_file_batch(
    vector_store_id: str, batch_id: str = ...
) -> VectorStoreFileBatchObject:
    """
    Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
    """
    pass


@app.get(
    '/vector_stores/{vector_store_id}/file_batches/{batch_id}/files',
    response_model=ListVectorStoreFilesResponse,
    tags=['Vector stores'],
)
def list_files_in_vector_store_batch(
    vector_store_id: str,
    batch_id: str = ...,
    limit: Optional[int] = 20,
    order: Optional[Order15] = 'desc',
    after: Optional[str] = None,
    before: Optional[str] = None,
    filter: Optional[Filter1] = None,
) -> ListVectorStoreFilesResponse:
    """
    Returns a list of vector store files in a batch.
    """
    pass


@app.get(
    '/vector_stores/{vector_store_id}/files',
    response_model=ListVectorStoreFilesResponse,
    tags=['Vector stores'],
)
def list_vector_store_files(
    vector_store_id: str,
    limit: Optional[int] = 20,
    order: Optional[Order17] = 'desc',
    after: Optional[str] = None,
    before: Optional[str] = None,
    filter: Optional[Filter3] = None,
) -> ListVectorStoreFilesResponse:
    """
    Returns a list of vector store files.
    """
    pass


@app.post(
    '/vector_stores/{vector_store_id}/files',
    response_model=VectorStoreFileObject,
    tags=['Vector stores'],
)
def create_vector_store_file(
    vector_store_id: str, body: CreateVectorStoreFileRequest = ...
) -> VectorStoreFileObject:
    """
    Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
    """
    pass


@app.get(
    '/vector_stores/{vector_store_id}/files/{file_id}',
    response_model=VectorStoreFileObject,
    tags=['Vector stores'],
)
def get_vector_store_file(
    vector_store_id: str, file_id: str = ...
) -> VectorStoreFileObject:
    """
    Retrieves a vector store file.
    """
    pass


@app.delete(
    '/vector_stores/{vector_store_id}/files/{file_id}',
    response_model=DeleteVectorStoreFileResponse,
    tags=['Vector stores'],
)
def delete_vector_store_file(
    vector_store_id: str, file_id: str = ...
) -> DeleteVectorStoreFileResponse:
    """
    Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
    """
    pass
