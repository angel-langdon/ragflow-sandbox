# generated by fastapi-codegen:
#   filename:  openai.yaml
#   timestamp: 2025-03-10T19:25:43+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    Field,
    PositiveFloat,
    RootModel,
    confloat,
    conint,
    constr,
)


class AddUploadPartRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: bytes = Field(..., description='The chunk of bytes for this Part.\n')


class Owner(BaseModel):
    type: Optional[str] = Field(None, examples=['service_account'])
    id: Optional[str] = Field(None, examples=['sa_456'])
    name: Optional[str] = Field(None, examples=['My Service Account'])
    created_at: Optional[int] = Field(None, examples=[1711471533])
    role: Optional[str] = Field(None, examples=['member'])


class AdminApiKey(BaseModel):
    object: Optional[str] = Field(None, examples=['organization.admin_api_key'])
    id: Optional[str] = Field(None, examples=['key_abc'])
    name: Optional[str] = Field(None, examples=['Administration Key'])
    redacted_value: Optional[str] = Field(None, examples=['sk-admin...def'])
    value: Optional[str] = Field(None, examples=['sk-admin-1234abcd'])
    created_at: Optional[int] = Field(None, examples=[1711471533])
    owner: Optional[Owner] = None


class ApiKeyList(BaseModel):
    object: Optional[str] = Field(None, examples=['list'])
    data: Optional[List[AdminApiKey]] = None
    has_more: Optional[bool] = Field(None, examples=[False])
    first_id: Optional[str] = Field(None, examples=['key_abc'])
    last_id: Optional[str] = Field(None, examples=['key_xyz'])


class Object(Enum):
    assistant = 'assistant'


class CodeInterpreter(BaseModel):
    file_ids: Optional[List[str]] = Field(
        [],
        description='A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n',
        max_length=20,
    )


class FileSearch(BaseModel):
    vector_store_ids: Optional[List[str]] = Field(
        None,
        description='The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )


class ToolResources(BaseModel):
    code_interpreter: Optional[CodeInterpreter] = None
    file_search: Optional[FileSearch] = None


class AssistantSupportedModels(Enum):
    o3_mini = 'o3-mini'
    o3_mini_2025_01_31 = 'o3-mini-2025-01-31'
    o1 = 'o1'
    o1_2024_12_17 = 'o1-2024-12-17'
    gpt_4o = 'gpt-4o'
    gpt_4o_2024_11_20 = 'gpt-4o-2024-11-20'
    gpt_4o_2024_08_06 = 'gpt-4o-2024-08-06'
    gpt_4o_2024_05_13 = 'gpt-4o-2024-05-13'
    gpt_4o_mini = 'gpt-4o-mini'
    gpt_4o_mini_2024_07_18 = 'gpt-4o-mini-2024-07-18'
    gpt_4_turbo = 'gpt-4-turbo'
    gpt_4_turbo_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    gpt_4_0125_preview = 'gpt-4-0125-preview'
    gpt_4_turbo_preview = 'gpt-4-turbo-preview'
    gpt_4_1106_preview = 'gpt-4-1106-preview'
    gpt_4_vision_preview = 'gpt-4-vision-preview'
    gpt_4 = 'gpt-4'
    gpt_4_0314 = 'gpt-4-0314'
    gpt_4_0613 = 'gpt-4-0613'
    gpt_4_32k = 'gpt-4-32k'
    gpt_4_32k_0314 = 'gpt-4-32k-0314'
    gpt_4_32k_0613 = 'gpt-4-32k-0613'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_3_5_turbo_16k = 'gpt-3.5-turbo-16k'
    gpt_3_5_turbo_0613 = 'gpt-3.5-turbo-0613'
    gpt_3_5_turbo_1106 = 'gpt-3.5-turbo-1106'
    gpt_3_5_turbo_0125 = 'gpt-3.5-turbo-0125'
    gpt_3_5_turbo_16k_0613 = 'gpt-3.5-turbo-16k-0613'


class Type(Enum):
    code_interpreter = 'code_interpreter'


class AssistantToolsCode(BaseModel):
    type: Type = Field(
        ..., description='The type of tool being defined: `code_interpreter`'
    )


class Type1(Enum):
    file_search = 'file_search'


class AssistantToolsFileSearchTypeOnly(BaseModel):
    type: Type1 = Field(
        ..., description='The type of tool being defined: `file_search`'
    )


class Type3(Enum):
    function = 'function'


class AssistantsApiResponseFormatOption1(Enum):
    auto = 'auto'


class AssistantsApiToolChoiceOption1(Enum):
    none = 'none'
    auto = 'auto'
    required = 'required'


class Type4(Enum):
    function = 'function'
    code_interpreter = 'code_interpreter'
    file_search = 'file_search'


class Function(BaseModel):
    name: str = Field(..., description='The name of the function to call.')


class AssistantsNamedToolChoice(BaseModel):
    type: Type4 = Field(
        ...,
        description='The type of the tool. If type is `function`, the function name must be set',
    )
    function: Optional[Function] = None


class AudioResponseFormat(Enum):
    json = 'json'
    text = 'text'
    srt = 'srt'
    verbose_json = 'verbose_json'
    vtt = 'vtt'


class Project(BaseModel):
    id: Optional[str] = Field(None, description='The project ID.')
    name: Optional[str] = Field(None, description='The project title.')


class Data(BaseModel):
    scopes: Optional[List[str]] = Field(
        None,
        description='A list of scopes allowed for the API key, e.g. `["api.model.request"]`',
    )


class ApiKeyCreated(BaseModel):
    id: Optional[str] = Field(None, description='The tracking ID of the API key.')
    data: Optional[Data] = Field(
        None, description='The payload used to create the API key.'
    )


class ChangesRequested(BaseModel):
    scopes: Optional[List[str]] = Field(
        None,
        description='A list of scopes allowed for the API key, e.g. `["api.model.request"]`',
    )


class ApiKeyUpdated(BaseModel):
    id: Optional[str] = Field(None, description='The tracking ID of the API key.')
    changes_requested: Optional[ChangesRequested] = Field(
        None, description='The payload used to update the API key.'
    )


class ApiKeyDeleted(BaseModel):
    id: Optional[str] = Field(None, description='The tracking ID of the API key.')


class Data1(BaseModel):
    email: Optional[str] = Field(
        None, description='The email invited to the organization.'
    )
    role: Optional[str] = Field(
        None,
        description='The role the email was invited to be. Is either `owner` or `member`.',
    )


class InviteSent(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the invite.')
    data: Optional[Data1] = Field(
        None, description='The payload used to create the invite.'
    )


class InviteAccepted(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the invite.')


class InviteDeleted(BaseModel):
    id: Optional[str] = Field(None, description='The ID of the invite.')


class LoginFailed(BaseModel):
    error_code: Optional[str] = Field(
        None, description='The error code of the failure.'
    )
    error_message: Optional[str] = Field(
        None, description='The error message of the failure.'
    )


class LogoutFailed(BaseModel):
    error_code: Optional[str] = Field(
        None, description='The error code of the failure.'
    )
    error_message: Optional[str] = Field(
        None, description='The error message of the failure.'
    )


class Settings(BaseModel):
    threads_ui_visibility: Optional[str] = Field(
        None,
        description='Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.',
    )
    usage_dashboard_visibility: Optional[str] = Field(
        None,
        description='Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.',
    )


class ChangesRequested1(BaseModel):
    title: Optional[str] = Field(None, description='The organization title.')
    description: Optional[str] = Field(
        None, description='The organization description.'
    )
    name: Optional[str] = Field(None, description='The organization name.')
    settings: Optional[Settings] = None


class OrganizationUpdated(BaseModel):
    id: Optional[str] = Field(None, description='The organization ID.')
    changes_requested: Optional[ChangesRequested1] = Field(
        None, description='The payload used to update the organization settings.'
    )


class Data2(BaseModel):
    name: Optional[str] = Field(None, description='The project name.')
    title: Optional[str] = Field(
        None, description='The title of the project as seen on the dashboard.'
    )


class ProjectCreated(BaseModel):
    id: Optional[str] = Field(None, description='The project ID.')
    data: Optional[Data2] = Field(
        None, description='The payload used to create the project.'
    )


class ChangesRequested2(BaseModel):
    title: Optional[str] = Field(
        None, description='The title of the project as seen on the dashboard.'
    )


class ProjectUpdated(BaseModel):
    id: Optional[str] = Field(None, description='The project ID.')
    changes_requested: Optional[ChangesRequested2] = Field(
        None, description='The payload used to update the project.'
    )


class ProjectArchived(BaseModel):
    id: Optional[str] = Field(None, description='The project ID.')


class ChangesRequested3(BaseModel):
    max_requests_per_1_minute: Optional[int] = Field(
        None, description='The maximum requests per minute.'
    )
    max_tokens_per_1_minute: Optional[int] = Field(
        None, description='The maximum tokens per minute.'
    )
    max_images_per_1_minute: Optional[int] = Field(
        None,
        description='The maximum images per minute. Only relevant for certain models.',
    )
    max_audio_megabytes_per_1_minute: Optional[int] = Field(
        None,
        description='The maximum audio megabytes per minute. Only relevant for certain models.',
    )
    max_requests_per_1_day: Optional[int] = Field(
        None,
        description='The maximum requests per day. Only relevant for certain models.',
    )
    batch_1_day_max_input_tokens: Optional[int] = Field(
        None,
        description='The maximum batch input tokens per day. Only relevant for certain models.',
    )


class RateLimitUpdated(BaseModel):
    id: Optional[str] = Field(None, description='The rate limit ID')
    changes_requested: Optional[ChangesRequested3] = Field(
        None, description='The payload used to update the rate limits.'
    )


class RateLimitDeleted(BaseModel):
    id: Optional[str] = Field(None, description='The rate limit ID')


class Data3(BaseModel):
    role: Optional[str] = Field(
        None,
        description='The role of the service account. Is either `owner` or `member`.',
    )


class ServiceAccountCreated(BaseModel):
    id: Optional[str] = Field(None, description='The service account ID.')
    data: Optional[Data3] = Field(
        None, description='The payload used to create the service account.'
    )


class ChangesRequested4(BaseModel):
    role: Optional[str] = Field(
        None,
        description='The role of the service account. Is either `owner` or `member`.',
    )


class ServiceAccountUpdated(BaseModel):
    id: Optional[str] = Field(None, description='The service account ID.')
    changes_requested: Optional[ChangesRequested4] = Field(
        None, description='The payload used to updated the service account.'
    )


class ServiceAccountDeleted(BaseModel):
    id: Optional[str] = Field(None, description='The service account ID.')


class Data4(BaseModel):
    role: Optional[str] = Field(
        None, description='The role of the user. Is either `owner` or `member`.'
    )


class UserAdded(BaseModel):
    id: Optional[str] = Field(None, description='The user ID.')
    data: Optional[Data4] = Field(
        None, description='The payload used to add the user to the project.'
    )


class ChangesRequested5(BaseModel):
    role: Optional[str] = Field(
        None, description='The role of the user. Is either `owner` or `member`.'
    )


class UserUpdated(BaseModel):
    id: Optional[str] = Field(None, description='The project ID.')
    changes_requested: Optional[ChangesRequested5] = Field(
        None, description='The payload used to update the user.'
    )


class UserDeleted(BaseModel):
    id: Optional[str] = Field(None, description='The user ID.')


class Type5(Enum):
    session = 'session'
    api_key = 'api_key'


class Type6(Enum):
    user = 'user'
    service_account = 'service_account'


class AuditLogActorServiceAccount(BaseModel):
    id: Optional[str] = Field(None, description='The service account id.')


class AuditLogActorUser(BaseModel):
    id: Optional[str] = Field(None, description='The user id.')
    email: Optional[str] = Field(None, description='The user email.')


class AuditLogEventType(Enum):
    api_key_created = 'api_key.created'
    api_key_updated = 'api_key.updated'
    api_key_deleted = 'api_key.deleted'
    invite_sent = 'invite.sent'
    invite_accepted = 'invite.accepted'
    invite_deleted = 'invite.deleted'
    login_succeeded = 'login.succeeded'
    login_failed = 'login.failed'
    logout_succeeded = 'logout.succeeded'
    logout_failed = 'logout.failed'
    organization_updated = 'organization.updated'
    project_created = 'project.created'
    project_updated = 'project.updated'
    project_archived = 'project.archived'
    service_account_created = 'service_account.created'
    service_account_updated = 'service_account.updated'
    service_account_deleted = 'service_account.deleted'
    rate_limit_updated = 'rate_limit.updated'
    rate_limit_deleted = 'rate_limit.deleted'
    user_added = 'user.added'
    user_updated = 'user.updated'
    user_deleted = 'user.deleted'


class Type7(Enum):
    auto = 'auto'


class AutoChunkingStrategyRequestParam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type7 = Field(..., description='Always `auto`.')


class Object1(Enum):
    batch = 'batch'


class Datum(BaseModel):
    code: Optional[str] = Field(
        None, description='An error code identifying the error type.'
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
    )
    param: Optional[str] = Field(
        None,
        description='The name of the parameter that caused the error, if applicable.',
    )
    line: Optional[int] = Field(
        None,
        description='The line number of the input file where the error occurred, if applicable.',
    )


class Errors(BaseModel):
    object: Optional[str] = Field(
        None, description='The object type, which is always `list`.'
    )
    data: Optional[List[Datum]] = None


class Status(Enum):
    validating = 'validating'
    failed = 'failed'
    in_progress = 'in_progress'
    finalizing = 'finalizing'
    completed = 'completed'
    expired = 'expired'
    cancelling = 'cancelling'
    cancelled = 'cancelled'


class RequestCounts(BaseModel):
    total: int = Field(..., description='Total number of requests in the batch.')
    completed: int = Field(
        ..., description='Number of requests that have been completed successfully.'
    )
    failed: int = Field(..., description='Number of requests that have failed.')


class Method(Enum):
    POST = 'POST'


class BatchRequestInput(BaseModel):
    custom_id: Optional[str] = Field(
        None,
        description='A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch.',
    )
    method: Optional[Method] = Field(
        None,
        description='The HTTP method to be used for the request. Currently only `POST` is supported.',
    )
    url: Optional[str] = Field(
        None,
        description='The OpenAI API relative URL to be used for the request. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported.',
    )


class Response(BaseModel):
    status_code: Optional[int] = Field(
        None, description='The HTTP status code of the response'
    )
    request_id: Optional[str] = Field(
        None,
        description='An unique identifier for the OpenAI API request. Please include this request ID when contacting support.',
    )
    body: Optional[Dict[str, Any]] = Field(
        None, description='The JSON body of the response'
    )


class Error(BaseModel):
    code: Optional[str] = Field(None, description='A machine-readable error code.')
    message: Optional[str] = Field(None, description='A human-readable error message.')


class BatchRequestOutput(BaseModel):
    id: Optional[str] = None
    custom_id: Optional[str] = Field(
        None,
        description='A developer-provided per-request id that will be used to match outputs to inputs.',
    )
    response: Optional[Response] = None
    error: Optional[Error] = Field(
        None,
        description='For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.',
    )


class CancelUploadRequest(BaseModel):
    pass
    model_config = ConfigDict(
        extra='forbid',
    )


class ChatCompletionFunctionCallOption(BaseModel):
    name: str = Field(..., description='The name of the function to call.')


class Type8(Enum):
    function = 'function'


class Function1(BaseModel):
    name: str = Field(..., description='The name of the function to call.')
    arguments: str = Field(
        ...,
        description='The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.',
    )


class ChatCompletionMessageToolCall(BaseModel):
    id: str = Field(..., description='The ID of the tool call.')
    type: Type8 = Field(
        ...,
        description='The type of the tool. Currently, only `function` is supported.',
    )
    function: Function1 = Field(..., description='The function that the model called.')


class Function2(BaseModel):
    name: Optional[str] = Field(None, description='The name of the function to call.')
    arguments: Optional[str] = Field(
        None,
        description='The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.',
    )


class ChatCompletionMessageToolCallChunk(BaseModel):
    index: int
    id: Optional[str] = Field(None, description='The ID of the tool call.')
    type: Optional[Type8] = Field(
        None,
        description='The type of the tool. Currently, only `function` is supported.',
    )
    function: Optional[Function2] = None


class ChatCompletionMessageToolCalls(RootModel[List[ChatCompletionMessageToolCall]]):
    root: List[ChatCompletionMessageToolCall] = Field(
        ...,
        description='The tool calls generated by the model, such as function calls.',
    )


class ChatCompletionModality(Enum):
    text = 'text'
    audio = 'audio'


class ChatCompletionModalities(RootModel[Optional[List[ChatCompletionModality]]]):
    root: Optional[List[ChatCompletionModality]] = Field(
        None,
        description='Output types that you would like the model to generate for this request.\nMost models are capable of generating text, which is the default:\n\n`["text"]`\n\nThe `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To\nrequest that this model generate both text and audio responses, you can\nuse:\n\n`["text", "audio"]`\n',
    )


class Function3(BaseModel):
    name: str = Field(..., description='The name of the function to call.')


class ChatCompletionNamedToolChoice(BaseModel):
    type: Type8 = Field(
        ...,
        description='The type of the tool. Currently, only `function` is supported.',
    )
    function: Function3


class Role(Enum):
    assistant = 'assistant'


class Audio(BaseModel):
    id: str = Field(
        ...,
        description='Unique identifier for a previous audio response from the model.\n',
    )


class FunctionCall(BaseModel):
    arguments: str = Field(
        ...,
        description='The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.',
    )
    name: str = Field(..., description='The name of the function to call.')


class Role1(Enum):
    developer = 'developer'


class Role2(Enum):
    function = 'function'


class ChatCompletionRequestFunctionMessage(BaseModel):
    role: Role2 = Field(
        ..., description='The role of the messages author, in this case `function`.'
    )
    content: str = Field(..., description='The contents of the function message.')
    name: str = Field(..., description='The name of the function to call.')


class Type11(Enum):
    input_audio = 'input_audio'


class Format(Enum):
    wav = 'wav'
    mp3 = 'mp3'


class InputAudio(BaseModel):
    data: str = Field(..., description='Base64 encoded audio data.')
    format: Format = Field(
        ...,
        description='The format of the encoded audio data. Currently supports "wav" and "mp3".\n',
    )


class ChatCompletionRequestMessageContentPartAudio(BaseModel):
    type: Type11 = Field(
        ..., description='The type of the content part. Always `input_audio`.'
    )
    input_audio: InputAudio


class Type12(Enum):
    image_url = 'image_url'


class Detail(Enum):
    auto = 'auto'
    low = 'low'
    high = 'high'


class ImageUrl(BaseModel):
    url: AnyUrl = Field(
        ..., description='Either a URL of the image or the base64 encoded image data.'
    )
    detail: Optional[Detail] = Field(
        'auto',
        description='Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).',
    )


class ChatCompletionRequestMessageContentPartImage(BaseModel):
    type: Type12 = Field(..., description='The type of the content part.')
    image_url: ImageUrl


class Type13(Enum):
    refusal = 'refusal'


class ChatCompletionRequestMessageContentPartRefusal(BaseModel):
    type: Type13 = Field(..., description='The type of the content part.')
    refusal: str = Field(..., description='The refusal message generated by the model.')


class Type14(Enum):
    text = 'text'


class ChatCompletionRequestMessageContentPartText(BaseModel):
    type: Type14 = Field(..., description='The type of the content part.')
    text: str = Field(..., description='The text content.')


class Role3(Enum):
    system = 'system'


class ChatCompletionRequestSystemMessageContentPart(
    RootModel[ChatCompletionRequestMessageContentPartText]
):
    root: ChatCompletionRequestMessageContentPartText


class Role4(Enum):
    tool = 'tool'


class ChatCompletionRequestToolMessageContentPart(
    RootModel[ChatCompletionRequestMessageContentPartText]
):
    root: ChatCompletionRequestMessageContentPartText


class Role5(Enum):
    user = 'user'


class ChatCompletionRequestUserMessageContentPart(
    RootModel[
        Union[
            ChatCompletionRequestMessageContentPartText,
            ChatCompletionRequestMessageContentPartImage,
            ChatCompletionRequestMessageContentPartAudio,
        ]
    ]
):
    root: Union[
        ChatCompletionRequestMessageContentPartText,
        ChatCompletionRequestMessageContentPartImage,
        ChatCompletionRequestMessageContentPartAudio,
    ]


class Role6(Enum):
    assistant = 'assistant'


class Audio1(BaseModel):
    id: str = Field(..., description='Unique identifier for this audio response.')
    expires_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when this audio response will\nno longer be accessible on the server for use in multi-turn\nconversations.\n',
    )
    data: str = Field(
        ...,
        description='Base64 encoded audio bytes generated by the model, in the format\nspecified in the request.\n',
    )
    transcript: str = Field(
        ..., description='Transcript of the audio generated by the model.'
    )


class ChatCompletionResponseMessage(BaseModel):
    content: str = Field(..., description='The contents of the message.')
    refusal: str = Field(..., description='The refusal message generated by the model.')
    tool_calls: Optional[ChatCompletionMessageToolCalls] = None
    role: Role6 = Field(..., description='The role of the author of this message.')
    function_call: Optional[FunctionCall] = Field(
        None,
        description='Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.',
    )
    audio: Optional[Audio1] = Field(
        None,
        description='If the audio output modality is requested, this object contains data\nabout the audio response from the model. [Learn more](/docs/guides/audio).\n',
    )


class ChatCompletionRole(Enum):
    developer = 'developer'
    system = 'system'
    user = 'user'
    assistant = 'assistant'
    tool = 'tool'
    function = 'function'


class ChatCompletionStreamOptions(BaseModel):
    include_usage: Optional[bool] = Field(
        None,
        description='If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.\n',
    )


class FunctionCall2(BaseModel):
    arguments: Optional[str] = Field(
        None,
        description='The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.',
    )
    name: Optional[str] = Field(None, description='The name of the function to call.')


class Role7(Enum):
    developer = 'developer'
    system = 'system'
    user = 'user'
    assistant = 'assistant'
    tool = 'tool'


class ChatCompletionStreamResponseDelta(BaseModel):
    content: Optional[str] = Field(
        None, description='The contents of the chunk message.'
    )
    function_call: Optional[FunctionCall2] = Field(
        None,
        description='Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.',
    )
    tool_calls: Optional[List[ChatCompletionMessageToolCallChunk]] = None
    role: Optional[Role7] = Field(
        None, description='The role of the author of this message.'
    )
    refusal: Optional[str] = Field(
        None, description='The refusal message generated by the model.'
    )


class TopLogprob(BaseModel):
    token: str = Field(..., description='The token.')
    logprob: float = Field(
        ...,
        description='The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.',
    )
    bytes: List[int] = Field(
        ...,
        description='A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.',
    )


class ChatCompletionTokenLogprob(BaseModel):
    token: str = Field(..., description='The token.')
    logprob: float = Field(
        ...,
        description='The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.',
    )
    bytes: List[int] = Field(
        ...,
        description='A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.',
    )
    top_logprobs: List[TopLogprob] = Field(
        ...,
        description='List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.',
    )


class Type15(Enum):
    function = 'function'


class ChatCompletionToolChoiceOption1(Enum):
    none = 'none'
    auto = 'auto'
    required = 'required'


class ChatCompletionToolChoiceOption(
    RootModel[Union[ChatCompletionToolChoiceOption1, ChatCompletionNamedToolChoice]]
):
    root: Union[ChatCompletionToolChoiceOption1, ChatCompletionNamedToolChoice] = Field(
        ...,
        description='Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n',
    )


class CompleteUploadRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    part_ids: List[str] = Field(..., description='The ordered list of Part IDs.\n')
    md5: Optional[str] = Field(
        None,
        description='The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.\n',
    )


class CompletionTokensDetails(BaseModel):
    accepted_prediction_tokens: Optional[int] = Field(
        0,
        description='When using Predicted Outputs, the number of tokens in the\nprediction that appeared in the completion.\n',
    )
    audio_tokens: Optional[int] = Field(
        0, description='Audio input tokens generated by the model.'
    )
    reasoning_tokens: Optional[int] = Field(
        0, description='Tokens generated by the model for reasoning.'
    )
    rejected_prediction_tokens: Optional[int] = Field(
        0,
        description='When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context window\nlimits.\n',
    )


class PromptTokensDetails(BaseModel):
    audio_tokens: Optional[int] = Field(
        0, description='Audio input tokens present in the prompt.'
    )
    cached_tokens: Optional[int] = Field(
        0, description='Cached tokens present in the prompt.'
    )


class CompletionUsage(BaseModel):
    completion_tokens: int = Field(
        ..., description='Number of tokens in the generated completion.'
    )
    prompt_tokens: int = Field(..., description='Number of tokens in the prompt.')
    total_tokens: int = Field(
        ...,
        description='Total number of tokens used in the request (prompt + completion).',
    )
    completion_tokens_details: Optional[CompletionTokensDetails] = Field(
        None, description='Breakdown of tokens used in a completion.'
    )
    prompt_tokens_details: Optional[PromptTokensDetails] = Field(
        None, description='Breakdown of tokens used in the prompt.'
    )


class Object2(Enum):
    organization_costs_result = 'organization.costs.result'


class Amount(BaseModel):
    value: Optional[float] = Field(None, description='The numeric value of the cost.')
    currency: Optional[str] = Field(
        None, description='Lowercase ISO-4217 currency e.g. "usd"'
    )


class CostsResult(BaseModel):
    object: Object2
    amount: Optional[Amount] = Field(
        None, description='The monetary value in its associated currency.'
    )
    line_item: Optional[str] = Field(
        None,
        description='When `group_by=line_item`, this field provides the line item of the grouped costs result.',
    )
    project_id: Optional[str] = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped costs result.',
    )


class CodeInterpreter1(BaseModel):
    file_ids: Optional[List[str]] = Field(
        [],
        description='A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n',
        max_length=20,
    )


class Type16(Enum):
    auto = 'auto'


class ChunkingStrategy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type16 = Field(..., description='Always `auto`.')


class Type17(Enum):
    static = 'static'


class Static(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    max_chunk_size_tokens: conint(ge=100, le=4096) = Field(
        ...,
        description='The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.',
    )
    chunk_overlap_tokens: int = Field(
        ...,
        description='The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n',
    )


class ChunkingStrategy1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type17 = Field(..., description='Always `static`.')
    static: Static


class Type18(Enum):
    auto = 'auto'


class ChunkingStrategy2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type18 = Field(..., description='Always `auto`.')


class Type19(Enum):
    static = 'static'


class ChunkingStrategy3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type19 = Field(..., description='Always `static`.')
    static: Static


class FinishReason(Enum):
    stop = 'stop'
    length = 'length'
    function_call = 'function_call'
    content_filter = 'content_filter'


class Choice(BaseModel):
    finish_reason: FinishReason = Field(
        ...,
        description='The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.\n',
    )
    index: int = Field(
        ..., description='The index of the choice in the list of choices.'
    )
    message: ChatCompletionResponseMessage


class Object3(Enum):
    chat_completion = 'chat.completion'


class CreateChatCompletionFunctionResponse(BaseModel):
    id: str = Field(..., description='A unique identifier for the chat completion.')
    choices: List[Choice] = Field(
        ...,
        description='A list of chat completion choices. Can be more than one if `n` is greater than 1.',
    )
    created: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the chat completion was created.',
    )
    model: str = Field(..., description='The model used for the chat completion.')
    system_fingerprint: Optional[str] = Field(
        None,
        description='This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n',
    )
    object: Object3 = Field(
        ..., description='The object type, which is always `chat.completion`.'
    )
    usage: Optional[CompletionUsage] = None


class CreateChatCompletionImageResponse(BaseModel):
    pass


class Model(Enum):
    o3_mini = 'o3-mini'
    o3_mini_2025_01_31 = 'o3-mini-2025-01-31'
    o1 = 'o1'
    o1_2024_12_17 = 'o1-2024-12-17'
    o1_preview = 'o1-preview'
    o1_preview_2024_09_12 = 'o1-preview-2024-09-12'
    o1_mini = 'o1-mini'
    o1_mini_2024_09_12 = 'o1-mini-2024-09-12'
    gpt_4o = 'gpt-4o'
    gpt_4o_2024_11_20 = 'gpt-4o-2024-11-20'
    gpt_4o_2024_08_06 = 'gpt-4o-2024-08-06'
    gpt_4o_2024_05_13 = 'gpt-4o-2024-05-13'
    gpt_4o_audio_preview = 'gpt-4o-audio-preview'
    gpt_4o_audio_preview_2024_10_01 = 'gpt-4o-audio-preview-2024-10-01'
    gpt_4o_audio_preview_2024_12_17 = 'gpt-4o-audio-preview-2024-12-17'
    gpt_4o_mini_audio_preview = 'gpt-4o-mini-audio-preview'
    gpt_4o_mini_audio_preview_2024_12_17 = 'gpt-4o-mini-audio-preview-2024-12-17'
    chatgpt_4o_latest = 'chatgpt-4o-latest'
    gpt_4o_mini = 'gpt-4o-mini'
    gpt_4o_mini_2024_07_18 = 'gpt-4o-mini-2024-07-18'
    gpt_4_turbo = 'gpt-4-turbo'
    gpt_4_turbo_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    gpt_4_0125_preview = 'gpt-4-0125-preview'
    gpt_4_turbo_preview = 'gpt-4-turbo-preview'
    gpt_4_1106_preview = 'gpt-4-1106-preview'
    gpt_4_vision_preview = 'gpt-4-vision-preview'
    gpt_4 = 'gpt-4'
    gpt_4_0314 = 'gpt-4-0314'
    gpt_4_0613 = 'gpt-4-0613'
    gpt_4_32k = 'gpt-4-32k'
    gpt_4_32k_0314 = 'gpt-4-32k-0314'
    gpt_4_32k_0613 = 'gpt-4-32k-0613'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_3_5_turbo_16k = 'gpt-3.5-turbo-16k'
    gpt_3_5_turbo_0301 = 'gpt-3.5-turbo-0301'
    gpt_3_5_turbo_0613 = 'gpt-3.5-turbo-0613'
    gpt_3_5_turbo_1106 = 'gpt-3.5-turbo-1106'
    gpt_3_5_turbo_0125 = 'gpt-3.5-turbo-0125'
    gpt_3_5_turbo_16k_0613 = 'gpt-3.5-turbo-16k-0613'


class Voice(Enum):
    alloy = 'alloy'
    ash = 'ash'
    ballad = 'ballad'
    coral = 'coral'
    echo = 'echo'
    sage = 'sage'
    shimmer = 'shimmer'
    verse = 'verse'


class Format1(Enum):
    wav = 'wav'
    mp3 = 'mp3'
    flac = 'flac'
    opus = 'opus'
    pcm16 = 'pcm16'


class Audio2(BaseModel):
    voice: Voice = Field(
        ...,
        description='The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).\n',
    )
    format: Format1 = Field(
        ...,
        description='Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,\n`opus`, or `pcm16`.\n',
    )


class ServiceTier(Enum):
    auto = 'auto'
    default = 'default'


class FunctionCall3(Enum):
    none = 'none'
    auto = 'auto'


class FinishReason1(Enum):
    stop = 'stop'
    length = 'length'
    tool_calls = 'tool_calls'
    content_filter = 'content_filter'
    function_call = 'function_call'


class Logprobs(BaseModel):
    content: List[ChatCompletionTokenLogprob] = Field(
        ...,
        description='A list of message content tokens with log probability information.',
    )
    refusal: List[ChatCompletionTokenLogprob] = Field(
        ...,
        description='A list of message refusal tokens with log probability information.',
    )


class Choice1(BaseModel):
    finish_reason: FinishReason1 = Field(
        ...,
        description='The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n',
    )
    index: int = Field(
        ..., description='The index of the choice in the list of choices.'
    )
    message: ChatCompletionResponseMessage
    logprobs: Logprobs = Field(
        ..., description='Log probability information for the choice.'
    )


class ServiceTier1(Enum):
    scale = 'scale'
    default = 'default'


class CreateChatCompletionResponse(BaseModel):
    id: str = Field(..., description='A unique identifier for the chat completion.')
    choices: List[Choice1] = Field(
        ...,
        description='A list of chat completion choices. Can be more than one if `n` is greater than 1.',
    )
    created: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the chat completion was created.',
    )
    model: str = Field(..., description='The model used for the chat completion.')
    service_tier: Optional[ServiceTier1] = Field(
        None,
        description='The service tier used for processing the request.',
        examples=['scale'],
    )
    system_fingerprint: Optional[str] = Field(
        None,
        description='This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n',
    )
    object: Object3 = Field(
        ..., description='The object type, which is always `chat.completion`.'
    )
    usage: Optional[CompletionUsage] = None


class Choice2(BaseModel):
    delta: ChatCompletionStreamResponseDelta
    logprobs: Optional[Logprobs] = Field(
        None, description='Log probability information for the choice.'
    )
    finish_reason: FinishReason1 = Field(
        ...,
        description='The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n',
    )
    index: int = Field(
        ..., description='The index of the choice in the list of choices.'
    )


class Object5(Enum):
    chat_completion_chunk = 'chat.completion.chunk'


class Usage(BaseModel):
    completion_tokens: int = Field(
        ..., description='Number of tokens in the generated completion.'
    )
    prompt_tokens: int = Field(..., description='Number of tokens in the prompt.')
    total_tokens: int = Field(
        ...,
        description='Total number of tokens used in the request (prompt + completion).',
    )


class CreateChatCompletionStreamResponse(BaseModel):
    id: str = Field(
        ...,
        description='A unique identifier for the chat completion. Each chunk has the same ID.',
    )
    choices: List[Choice2] = Field(
        ...,
        description='A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the\nlast chunk if you set `stream_options: {"include_usage": true}`.\n',
    )
    created: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.',
    )
    model: str = Field(..., description='The model to generate the completion.')
    service_tier: Optional[ServiceTier1] = Field(
        None,
        description='The service tier used for processing the request.',
        examples=['scale'],
    )
    system_fingerprint: Optional[str] = Field(
        None,
        description='This fingerprint represents the backend configuration that the model runs with.\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n',
    )
    object: Object5 = Field(
        ..., description='The object type, which is always `chat.completion.chunk`.'
    )
    usage: Optional[Usage] = Field(
        None,
        description='An optional field that will only be present when you set `stream_options: {"include_usage": true}` in your request.\nWhen present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request.\n',
    )


class Model1(Enum):
    gpt_3_5_turbo_instruct = 'gpt-3.5-turbo-instruct'
    davinci_002 = 'davinci-002'
    babbage_002 = 'babbage-002'


class PromptItem(RootModel[List[Any]]):
    root: List[Any]


class CreateCompletionRequest(BaseModel):
    model: Union[str, Model1] = Field(
        ...,
        description='ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n',
    )
    prompt: Union[str, List[str], List[int], List[PromptItem]] = Field(
        ...,
        description='The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n',
    )
    best_of: Optional[conint(ge=0, le=20)] = Field(
        1,
        description='Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n',
    )
    echo: Optional[bool] = Field(
        False, description='Echo back the prompt in addition to the completion\n'
    )
    frequency_penalty: Optional[confloat(ge=-2.0, le=2.0)] = Field(
        0,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation)\n",
    )
    logit_bias: Optional[Dict[str, int]] = Field(
        None,
        description='Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.\n',
    )
    logprobs: Optional[conint(ge=0, le=5)] = Field(
        None,
        description='Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n',
    )
    max_tokens: Optional[conint(ge=0)] = Field(
        16,
        description="The maximum number of [tokens](/tokenizer) that can be generated in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n",
        examples=[16],
    )
    n: Optional[conint(ge=1, le=128)] = Field(
        1,
        description='How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n',
        examples=[1],
    )
    presence_penalty: Optional[confloat(ge=-2.0, le=2.0)] = Field(
        0,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation)\n",
    )
    seed: Optional[int] = Field(
        None,
        description='If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\n\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n',
    )
    stop: Optional[Union[str, List[str]]] = Field(
        None,
        description='Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n',
    )
    stream: Optional[bool] = Field(
        False,
        description='Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n',
    )
    stream_options: Optional[ChatCompletionStreamOptions] = None
    suffix: Optional[str] = Field(
        None,
        description='The suffix that comes after a completion of inserted text.\n\nThis parameter is only supported for `gpt-3.5-turbo-instruct`.\n',
        examples=['test.'],
    )
    temperature: Optional[confloat(ge=0.0, le=2.0)] = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n',
        examples=[1],
    )
    top_p: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n',
        examples=[1],
    )
    user: Optional[str] = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class FinishReason3(Enum):
    stop = 'stop'
    length = 'length'
    content_filter = 'content_filter'


class Logprobs2(BaseModel):
    text_offset: Optional[List[int]] = None
    token_logprobs: Optional[List[float]] = None
    tokens: Optional[List[str]] = None
    top_logprobs: Optional[List[Dict[str, float]]] = None


class Choice3(BaseModel):
    finish_reason: FinishReason3 = Field(
        ...,
        description='The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\nor `content_filter` if content was omitted due to a flag from our content filters.\n',
    )
    index: int
    logprobs: Logprobs2
    text: str


class Object6(Enum):
    text_completion = 'text_completion'


class CreateCompletionResponse(BaseModel):
    id: str = Field(..., description='A unique identifier for the completion.')
    choices: List[Choice3] = Field(
        ...,
        description='The list of completion choices the model generated for the input prompt.',
    )
    created: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the completion was created.',
    )
    model: str = Field(..., description='The model used for completion.')
    system_fingerprint: Optional[str] = Field(
        None,
        description='This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n',
    )
    object: Object6 = Field(
        ..., description='The object type, which is always "text_completion"'
    )
    usage: Optional[CompletionUsage] = None


class InputItem(RootModel[List[Any]]):
    root: List[Any]


class Model2(Enum):
    text_embedding_ada_002 = 'text-embedding-ada-002'
    text_embedding_3_small = 'text-embedding-3-small'
    text_embedding_3_large = 'text-embedding-3-large'


class EncodingFormat(Enum):
    float = 'float'
    base64 = 'base64'


class CreateEmbeddingRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    input: Union[str, List[str], List[int], List[InputItem]] = Field(
        ...,
        description='Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.\n',
        examples=['The quick brown fox jumped over the lazy dog'],
    )
    model: Union[str, Model2] = Field(
        ...,
        description='ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n',
        examples=['text-embedding-3-small'],
    )
    encoding_format: Optional[EncodingFormat] = Field(
        'float',
        description='The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).',
        examples=['float'],
    )
    dimensions: Optional[conint(ge=1)] = Field(
        None,
        description='The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.\n',
    )
    user: Optional[str] = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class Object7(Enum):
    list = 'list'


class Usage1(BaseModel):
    prompt_tokens: int = Field(
        ..., description='The number of tokens used by the prompt.'
    )
    total_tokens: int = Field(
        ..., description='The total number of tokens used by the request.'
    )


class Purpose(Enum):
    assistants = 'assistants'
    batch = 'batch'
    fine_tune = 'fine-tune'
    vision = 'vision'


class CreateFileRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: bytes = Field(
        ..., description='The File object (not file name) to be uploaded.\n'
    )
    purpose: Purpose = Field(
        ...,
        description='The intended purpose of the uploaded file.\n\nUse "assistants" for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, "vision" for Assistants image file inputs, "batch" for [Batch API](/docs/guides/batch), and "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning).\n',
    )


class Model3(Enum):
    babbage_002 = 'babbage-002'
    davinci_002 = 'davinci-002'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_4o_mini = 'gpt-4o-mini'


class BatchSize(Enum):
    auto = 'auto'


class LearningRateMultiplier(Enum):
    auto = 'auto'


class NEpochs(Enum):
    auto = 'auto'


class Hyperparameters(BaseModel):
    batch_size: Optional[Union[BatchSize, conint(ge=1, le=256)]] = Field(
        'auto',
        description='Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n',
    )
    learning_rate_multiplier: Optional[Union[LearningRateMultiplier, PositiveFloat]] = (
        Field(
            'auto',
            description='Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n',
        )
    )
    n_epochs: Optional[Union[NEpochs, conint(ge=1, le=50)]] = Field(
        'auto',
        description='The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n',
    )


class Type20(Enum):
    wandb = 'wandb'


class Wandb(BaseModel):
    project: str = Field(
        ...,
        description='The name of the project that the new run will be created under.\n',
        examples=['my-wandb-project'],
    )
    name: Optional[str] = Field(
        None,
        description='A display name to set for the run. If not set, we will use the Job ID as the name.\n',
    )
    entity: Optional[str] = Field(
        None,
        description='The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".\n',
    )


class Integration(BaseModel):
    type: Type20 = Field(
        ...,
        description='The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.\n',
    )
    wandb: Wandb = Field(
        ...,
        description='The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n',
    )


class Model4(Enum):
    dall_e_2 = 'dall-e-2'


class Size(Enum):
    field_256x256 = '256x256'
    field_512x512 = '512x512'
    field_1024x1024 = '1024x1024'


class ResponseFormat(Enum):
    url = 'url'
    b64_json = 'b64_json'


class CreateImageEditRequest(BaseModel):
    image: bytes = Field(
        ...,
        description='The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.',
    )
    prompt: str = Field(
        ...,
        description='A text description of the desired image(s). The maximum length is 1000 characters.',
        examples=['A cute baby sea otter wearing a beret'],
    )
    mask: Optional[bytes] = Field(
        None,
        description='An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.',
    )
    model: Optional[Union[str, Model4]] = Field(
        'dall-e-2',
        description='The model to use for image generation. Only `dall-e-2` is supported at this time.',
        examples=['dall-e-2'],
    )
    n: Optional[conint(ge=1, le=10)] = Field(
        1,
        description='The number of images to generate. Must be between 1 and 10.',
        examples=[1],
    )
    size: Optional[Size] = Field(
        '1024x1024',
        description='The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.',
        examples=['1024x1024'],
    )
    response_format: Optional[ResponseFormat] = Field(
        'url',
        description='The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.',
        examples=['url'],
    )
    user: Optional[str] = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class Model5(Enum):
    dall_e_2 = 'dall-e-2'
    dall_e_3 = 'dall-e-3'


class Quality(Enum):
    standard = 'standard'
    hd = 'hd'


class Size1(Enum):
    field_256x256 = '256x256'
    field_512x512 = '512x512'
    field_1024x1024 = '1024x1024'
    field_1792x1024 = '1792x1024'
    field_1024x1792 = '1024x1792'


class Style(Enum):
    vivid = 'vivid'
    natural = 'natural'


class CreateImageRequest(BaseModel):
    prompt: str = Field(
        ...,
        description='A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.',
        examples=['A cute baby sea otter'],
    )
    model: Optional[Union[str, Model5]] = Field(
        'dall-e-2',
        description='The model to use for image generation.',
        examples=['dall-e-3'],
    )
    n: Optional[conint(ge=1, le=10)] = Field(
        1,
        description='The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.',
        examples=[1],
    )
    quality: Optional[Quality] = Field(
        'standard',
        description='The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.',
        examples=['standard'],
    )
    response_format: Optional[ResponseFormat] = Field(
        'url',
        description='The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.',
        examples=['url'],
    )
    size: Optional[Size1] = Field(
        '1024x1024',
        description='The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.',
        examples=['1024x1024'],
    )
    style: Optional[Style] = Field(
        'vivid',
        description='The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.',
        examples=['vivid'],
    )
    user: Optional[str] = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class Model6(Enum):
    dall_e_2 = 'dall-e-2'


class Size2(Enum):
    field_256x256 = '256x256'
    field_512x512 = '512x512'
    field_1024x1024 = '1024x1024'


class CreateImageVariationRequest(BaseModel):
    image: bytes = Field(
        ...,
        description='The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.',
    )
    model: Optional[Union[str, Model6]] = Field(
        'dall-e-2',
        description='The model to use for image generation. Only `dall-e-2` is supported at this time.',
        examples=['dall-e-2'],
    )
    n: Optional[conint(ge=1, le=10)] = Field(
        1,
        description='The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.',
        examples=[1],
    )
    response_format: Optional[ResponseFormat] = Field(
        'url',
        description='The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.',
        examples=['url'],
    )
    size: Optional[Size2] = Field(
        '1024x1024',
        description='The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.',
        examples=['1024x1024'],
    )
    user: Optional[str] = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )


class Role8(Enum):
    user = 'user'
    assistant = 'assistant'


class Attachment(BaseModel):
    file_id: Optional[str] = Field(
        None, description='The ID of the file to attach to the message.'
    )
    tools: Optional[
        List[Union[AssistantToolsCode, AssistantToolsFileSearchTypeOnly]]
    ] = Field(None, description='The tools to add this file to.')


class Type21(Enum):
    image_url = 'image_url'


class ImageUrl1(BaseModel):
    url: AnyUrl = Field(
        ...,
        description='Either a URL of the image or the base64 encoded image data.',
        examples=['https://example.com/image.jpg'],
    )


class Input(BaseModel):
    type: Type21 = Field(..., description='Always `image_url`.')
    image_url: ImageUrl1 = Field(
        ...,
        description='Contains either an image URL or a data URL for a base64 encoded image.',
    )


class Type22(Enum):
    text = 'text'


class Input1(BaseModel):
    type: Type22 = Field(..., description='Always `text`.')
    text: str = Field(
        ...,
        description='A string of text to classify.',
        examples=['I want to kill them'],
    )


class Model7(Enum):
    omni_moderation_latest = 'omni-moderation-latest'
    omni_moderation_2024_09_26 = 'omni-moderation-2024-09-26'
    text_moderation_latest = 'text-moderation-latest'
    text_moderation_stable = 'text-moderation-stable'


class CreateModerationRequest(BaseModel):
    input: Union[str, List[str], List[Union[Input, Input1]]] = Field(
        ...,
        description='Input (or inputs) to classify. Can be a single string, an array of strings, or\nan array of multi-modal input objects similar to other models.\n',
    )
    model: Optional[Union[str, Model7]] = Field(
        'omni-moderation-latest',
        description='The content moderation model you would like to use. Learn more in\n[the moderation guide](/docs/guides/moderation), and learn about\navailable models [here](/docs/models#moderation).\n',
        examples=['omni-moderation-2024-09-26'],
    )


class Categories(BaseModel):
    hate: bool = Field(
        ...,
        description='Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.',
    )
    hate_threatening: bool = Field(
        ...,
        alias='hate/threatening',
        description='Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.',
    )
    harassment: bool = Field(
        ...,
        description='Content that expresses, incites, or promotes harassing language towards any target.',
    )
    harassment_threatening: bool = Field(
        ...,
        alias='harassment/threatening',
        description='Harassment content that also includes violence or serious harm towards any target.',
    )
    illicit: bool = Field(
        ...,
        description='Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category.',
    )
    illicit_violent: bool = Field(
        ...,
        alias='illicit/violent',
        description='Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.',
    )
    self_harm: bool = Field(
        ...,
        alias='self-harm',
        description='Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.',
    )
    self_harm_intent: bool = Field(
        ...,
        alias='self-harm/intent',
        description='Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.',
    )
    self_harm_instructions: bool = Field(
        ...,
        alias='self-harm/instructions',
        description='Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.',
    )
    sexual: bool = Field(
        ...,
        description='Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).',
    )
    sexual_minors: bool = Field(
        ...,
        alias='sexual/minors',
        description='Sexual content that includes an individual who is under 18 years old.',
    )
    violence: bool = Field(
        ..., description='Content that depicts death, violence, or physical injury.'
    )
    violence_graphic: bool = Field(
        ...,
        alias='violence/graphic',
        description='Content that depicts death, violence, or physical injury in graphic detail.',
    )


class CategoryScores(BaseModel):
    hate: float = Field(..., description="The score for the category 'hate'.")
    hate_threatening: float = Field(
        ...,
        alias='hate/threatening',
        description="The score for the category 'hate/threatening'.",
    )
    harassment: float = Field(
        ..., description="The score for the category 'harassment'."
    )
    harassment_threatening: float = Field(
        ...,
        alias='harassment/threatening',
        description="The score for the category 'harassment/threatening'.",
    )
    illicit: float = Field(..., description="The score for the category 'illicit'.")
    illicit_violent: float = Field(
        ...,
        alias='illicit/violent',
        description="The score for the category 'illicit/violent'.",
    )
    self_harm: float = Field(
        ..., alias='self-harm', description="The score for the category 'self-harm'."
    )
    self_harm_intent: float = Field(
        ...,
        alias='self-harm/intent',
        description="The score for the category 'self-harm/intent'.",
    )
    self_harm_instructions: float = Field(
        ...,
        alias='self-harm/instructions',
        description="The score for the category 'self-harm/instructions'.",
    )
    sexual: float = Field(..., description="The score for the category 'sexual'.")
    sexual_minors: float = Field(
        ...,
        alias='sexual/minors',
        description="The score for the category 'sexual/minors'.",
    )
    violence: float = Field(..., description="The score for the category 'violence'.")
    violence_graphic: float = Field(
        ...,
        alias='violence/graphic',
        description="The score for the category 'violence/graphic'.",
    )


class HateEnum(Enum):
    text = 'text'


class HateThreateningEnum(Enum):
    text = 'text'


class HarassmentEnum(Enum):
    text = 'text'


class HarassmentThreateningEnum(Enum):
    text = 'text'


class IllicitEnum(Enum):
    text = 'text'


class IllicitViolentEnum(Enum):
    text = 'text'


class SelfHarmEnum(Enum):
    text = 'text'
    image = 'image'


class SelfHarmIntentEnum(Enum):
    text = 'text'
    image = 'image'


class SelfHarmInstruction(Enum):
    text = 'text'
    image = 'image'


class SexualEnum(Enum):
    text = 'text'
    image = 'image'


class SexualMinor(Enum):
    text = 'text'


class ViolenceEnum(Enum):
    text = 'text'
    image = 'image'


class ViolenceGraphicEnum(Enum):
    text = 'text'
    image = 'image'


class CategoryAppliedInputTypes(BaseModel):
    hate: List[HateEnum] = Field(
        ..., description="The applied input type(s) for the category 'hate'."
    )
    hate_threatening: List[HateThreateningEnum] = Field(
        ...,
        alias='hate/threatening',
        description="The applied input type(s) for the category 'hate/threatening'.",
    )
    harassment: List[HarassmentEnum] = Field(
        ..., description="The applied input type(s) for the category 'harassment'."
    )
    harassment_threatening: List[HarassmentThreateningEnum] = Field(
        ...,
        alias='harassment/threatening',
        description="The applied input type(s) for the category 'harassment/threatening'.",
    )
    illicit: List[IllicitEnum] = Field(
        ..., description="The applied input type(s) for the category 'illicit'."
    )
    illicit_violent: List[IllicitViolentEnum] = Field(
        ...,
        alias='illicit/violent',
        description="The applied input type(s) for the category 'illicit/violent'.",
    )
    self_harm: List[SelfHarmEnum] = Field(
        ...,
        alias='self-harm',
        description="The applied input type(s) for the category 'self-harm'.",
    )
    self_harm_intent: List[SelfHarmIntentEnum] = Field(
        ...,
        alias='self-harm/intent',
        description="The applied input type(s) for the category 'self-harm/intent'.",
    )
    self_harm_instructions: List[SelfHarmInstruction] = Field(
        ...,
        alias='self-harm/instructions',
        description="The applied input type(s) for the category 'self-harm/instructions'.",
    )
    sexual: List[SexualEnum] = Field(
        ..., description="The applied input type(s) for the category 'sexual'."
    )
    sexual_minors: List[SexualMinor] = Field(
        ...,
        alias='sexual/minors',
        description="The applied input type(s) for the category 'sexual/minors'.",
    )
    violence: List[ViolenceEnum] = Field(
        ..., description="The applied input type(s) for the category 'violence'."
    )
    violence_graphic: List[ViolenceGraphicEnum] = Field(
        ...,
        alias='violence/graphic',
        description="The applied input type(s) for the category 'violence/graphic'.",
    )


class Result(BaseModel):
    flagged: bool = Field(
        ..., description='Whether any of the below categories are flagged.'
    )
    categories: Categories = Field(
        ...,
        description='A list of the categories, and whether they are flagged or not.',
    )
    category_scores: CategoryScores = Field(
        ...,
        description='A list of the categories along with their scores as predicted by model.',
    )
    category_applied_input_types: CategoryAppliedInputTypes = Field(
        ...,
        description='A list of the categories along with the input type(s) that the score applies to.',
    )


class CreateModerationResponse(BaseModel):
    id: str = Field(
        ..., description='The unique identifier for the moderation request.'
    )
    model: str = Field(
        ..., description='The model used to generate the moderation results.'
    )
    results: List[Result] = Field(..., description='A list of moderation objects.')


class Model8(Enum):
    tts_1 = 'tts-1'
    tts_1_hd = 'tts-1-hd'


class Voice1(Enum):
    alloy = 'alloy'
    ash = 'ash'
    coral = 'coral'
    echo = 'echo'
    fable = 'fable'
    onyx = 'onyx'
    nova = 'nova'
    sage = 'sage'
    shimmer = 'shimmer'


class ResponseFormat3(Enum):
    mp3 = 'mp3'
    opus = 'opus'
    aac = 'aac'
    flac = 'flac'
    wav = 'wav'
    pcm = 'pcm'


class CreateSpeechRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    model: Union[str, Model8] = Field(
        ...,
        description='One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`\n',
    )
    input: constr(max_length=4096) = Field(
        ...,
        description='The text to generate audio for. The maximum length is 4096 characters.',
    )
    voice: Voice1 = Field(
        ...,
        description='The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage` and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).',
    )
    response_format: Optional[ResponseFormat3] = Field(
        'mp3',
        description='The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.',
    )
    speed: Optional[confloat(ge=0.25, le=4.0)] = Field(
        1,
        description='The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.',
    )


class Model9(Enum):
    gpt_4o = 'gpt-4o'
    gpt_4o_2024_11_20 = 'gpt-4o-2024-11-20'
    gpt_4o_2024_08_06 = 'gpt-4o-2024-08-06'
    gpt_4o_2024_05_13 = 'gpt-4o-2024-05-13'
    gpt_4o_mini = 'gpt-4o-mini'
    gpt_4o_mini_2024_07_18 = 'gpt-4o-mini-2024-07-18'
    gpt_4_turbo = 'gpt-4-turbo'
    gpt_4_turbo_2024_04_09 = 'gpt-4-turbo-2024-04-09'
    gpt_4_0125_preview = 'gpt-4-0125-preview'
    gpt_4_turbo_preview = 'gpt-4-turbo-preview'
    gpt_4_1106_preview = 'gpt-4-1106-preview'
    gpt_4_vision_preview = 'gpt-4-vision-preview'
    gpt_4 = 'gpt-4'
    gpt_4_0314 = 'gpt-4-0314'
    gpt_4_0613 = 'gpt-4-0613'
    gpt_4_32k = 'gpt-4-32k'
    gpt_4_32k_0314 = 'gpt-4-32k-0314'
    gpt_4_32k_0613 = 'gpt-4-32k-0613'
    gpt_3_5_turbo = 'gpt-3.5-turbo'
    gpt_3_5_turbo_16k = 'gpt-3.5-turbo-16k'
    gpt_3_5_turbo_0613 = 'gpt-3.5-turbo-0613'
    gpt_3_5_turbo_1106 = 'gpt-3.5-turbo-1106'
    gpt_3_5_turbo_0125 = 'gpt-3.5-turbo-0125'
    gpt_3_5_turbo_16k_0613 = 'gpt-3.5-turbo-16k-0613'


class ToolResources2(BaseModel):
    code_interpreter: Optional[CodeInterpreter1] = None
    file_search: Optional[FileSearch] = None


class Type23(Enum):
    auto = 'auto'


class ChunkingStrategy4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type23 = Field(..., description='Always `auto`.')


class Type24(Enum):
    static = 'static'


class ChunkingStrategy5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type24 = Field(..., description='Always `static`.')
    static: Static


class Type25(Enum):
    auto = 'auto'


class ChunkingStrategy6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type25 = Field(..., description='Always `auto`.')


class Type26(Enum):
    static = 'static'


class ChunkingStrategy7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type26 = Field(..., description='Always `static`.')
    static: Static


class Model10(Enum):
    whisper_1 = 'whisper-1'


class TimestampGranularity(Enum):
    word = 'word'
    segment = 'segment'


class CreateTranscriptionRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: bytes = Field(
        ...,
        description='The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n',
    )
    model: Union[str, Model10] = Field(
        ...,
        description='ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.\n',
        examples=['whisper-1'],
    )
    language: Optional[str] = Field(
        None,
        description='The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.\n',
    )
    prompt: Optional[str] = Field(
        None,
        description="An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should match the audio language.\n",
    )
    response_format: Optional[AudioResponseFormat] = 'json'
    temperature: Optional[float] = Field(
        0,
        description='The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n',
    )
    timestamp_granularities__: Optional[List[TimestampGranularity]] = Field(
        ['segment'],
        alias='timestamp_granularities[]',
        description='The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.\n',
    )


class CreateTranscriptionResponseJson(BaseModel):
    text: str = Field(..., description='The transcribed text.')


class CreateTranslationRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file: bytes = Field(
        ...,
        description='The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n',
    )
    model: Union[str, Model10] = Field(
        ...,
        description='ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.\n',
        examples=['whisper-1'],
    )
    prompt: Optional[str] = Field(
        None,
        description="An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should be in English.\n",
    )
    response_format: Optional[AudioResponseFormat] = 'json'
    temperature: Optional[float] = Field(
        0,
        description='The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n',
    )


class CreateTranslationResponseJson(BaseModel):
    text: str


class CreateUploadRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    filename: str = Field(..., description='The name of the file to upload.\n')
    purpose: Purpose = Field(
        ...,
        description='The intended purpose of the uploaded file.\n\nSee the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).\n',
    )
    bytes: int = Field(
        ..., description='The number of bytes in the file you are uploading.\n'
    )
    mime_type: str = Field(
        ...,
        description='The MIME type of the file.\n\nThis must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.\n',
    )


class DefaultProjectErrorResponse(BaseModel):
    code: int
    message: str


class Object8(Enum):
    assistant_deleted = 'assistant.deleted'


class DeleteAssistantResponse(BaseModel):
    id: str
    deleted: bool
    object: Object8


class Object9(Enum):
    file = 'file'


class DeleteFileResponse(BaseModel):
    id: str
    object: Object9
    deleted: bool


class Object10(Enum):
    thread_message_deleted = 'thread.message.deleted'


class DeleteMessageResponse(BaseModel):
    id: str
    deleted: bool
    object: Object10


class DeleteModelResponse(BaseModel):
    id: str
    deleted: bool
    object: str


class Object11(Enum):
    thread_deleted = 'thread.deleted'


class DeleteThreadResponse(BaseModel):
    id: str
    deleted: bool
    object: Object11


class Object12(Enum):
    vector_store_file_deleted = 'vector_store.file.deleted'


class DeleteVectorStoreFileResponse(BaseModel):
    id: str
    deleted: bool
    object: Object12


class Object13(Enum):
    vector_store_deleted = 'vector_store.deleted'


class DeleteVectorStoreResponse(BaseModel):
    id: str
    deleted: bool
    object: Object13


class Event(Enum):
    done = 'done'


class Data5(Enum):
    field_DONE_ = '[DONE]'


class DoneEvent(BaseModel):
    event: Event
    data: Data5


class Object14(Enum):
    embedding = 'embedding'


class Embedding(BaseModel):
    index: int = Field(
        ..., description='The index of the embedding in the list of embeddings.'
    )
    embedding: List[float] = Field(
        ...,
        description='The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).\n',
    )
    object: Object14 = Field(
        ..., description='The object type, which is always "embedding".'
    )


class Error1(BaseModel):
    code: str
    message: str
    param: str
    type: str


class Event1(Enum):
    error = 'error'


class ErrorEvent(BaseModel):
    event: Event1
    data: Error1


class ErrorResponse(BaseModel):
    error: Error1


class Ranker(Enum):
    auto = 'auto'
    default_2024_08_21 = 'default_2024_08_21'


class FileSearchRankingOptions(BaseModel):
    ranker: Optional[Ranker] = Field(
        None,
        description='The ranker to use for the file search. If not specified will use the `auto` ranker.',
    )
    score_threshold: confloat(ge=0.0, le=1.0) = Field(
        ...,
        description='The score threshold for the file search. All values must be a floating point number between 0 and 1.',
    )


class Weight(Enum):
    integer_0 = 0
    integer_1 = 1


class FineTuneCompletionRequestInput(BaseModel):
    prompt: Optional[str] = Field(
        None, description='The input prompt for this training example.'
    )
    completion: Optional[str] = Field(
        None, description='The desired completion for this training example.'
    )


class Beta(Enum):
    auto = 'auto'


class Hyperparameters1(BaseModel):
    beta: Optional[Union[Beta, confloat(le=2.0, gt=0.0)]] = Field(
        'auto',
        description='The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n',
    )
    batch_size: Optional[Union[BatchSize, conint(ge=1, le=256)]] = Field(
        'auto',
        description='Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n',
    )
    learning_rate_multiplier: Optional[Union[LearningRateMultiplier, PositiveFloat]] = (
        Field(
            'auto',
            description='Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n',
        )
    )
    n_epochs: Optional[Union[NEpochs, conint(ge=1, le=50)]] = Field(
        'auto',
        description='The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n',
    )


class FineTuneDPOMethod(BaseModel):
    hyperparameters: Optional[Hyperparameters1] = Field(
        None, description='The hyperparameters used for the fine-tuning job.'
    )


class Type27(Enum):
    supervised = 'supervised'
    dpo = 'dpo'


class Hyperparameters2(BaseModel):
    batch_size: Optional[Union[BatchSize, conint(ge=1, le=256)]] = Field(
        'auto',
        description='Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n',
    )
    learning_rate_multiplier: Optional[Union[LearningRateMultiplier, PositiveFloat]] = (
        Field(
            'auto',
            description='Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n',
        )
    )
    n_epochs: Optional[Union[NEpochs, conint(ge=1, le=50)]] = Field(
        'auto',
        description='The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n',
    )


class FineTuneSupervisedMethod(BaseModel):
    hyperparameters: Optional[Hyperparameters2] = Field(
        None, description='The hyperparameters used for the fine-tuning job.'
    )


class Type28(Enum):
    wandb = 'wandb'


class FineTuningIntegration(BaseModel):
    type: Type28 = Field(
        ...,
        description='The type of the integration being enabled for the fine-tuning job',
    )
    wandb: Wandb = Field(
        ...,
        description='The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n',
    )


class Error2(BaseModel):
    code: str = Field(..., description='A machine-readable error code.')
    message: str = Field(..., description='A human-readable error message.')
    param: str = Field(
        ...,
        description='The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.',
    )


class Hyperparameters3(BaseModel):
    batch_size: Optional[Union[BatchSize, conint(ge=1, le=256)]] = Field(
        'auto',
        description='Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n',
    )
    learning_rate_multiplier: Optional[Union[LearningRateMultiplier, PositiveFloat]] = (
        Field(
            'auto',
            description='Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n',
        )
    )
    n_epochs: Optional[Union[NEpochs, conint(ge=1, le=50)]] = Field(
        'auto',
        description='The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n',
    )


class Object15(Enum):
    fine_tuning_job = 'fine_tuning.job'


class Status1(Enum):
    validating_files = 'validating_files'
    queued = 'queued'
    running = 'running'
    succeeded = 'succeeded'
    failed = 'failed'
    cancelled = 'cancelled'


class Metrics(BaseModel):
    step: Optional[float] = None
    train_loss: Optional[float] = None
    train_mean_token_accuracy: Optional[float] = None
    valid_loss: Optional[float] = None
    valid_mean_token_accuracy: Optional[float] = None
    full_valid_loss: Optional[float] = None
    full_valid_mean_token_accuracy: Optional[float] = None


class Object16(Enum):
    fine_tuning_job_checkpoint = 'fine_tuning.job.checkpoint'


class FineTuningJobCheckpoint(BaseModel):
    id: str = Field(
        ...,
        description='The checkpoint identifier, which can be referenced in the API endpoints.',
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the checkpoint was created.',
    )
    fine_tuned_model_checkpoint: str = Field(
        ..., description='The name of the fine-tuned checkpoint model that is created.'
    )
    step_number: int = Field(
        ..., description='The step number that the checkpoint was created at.'
    )
    metrics: Metrics = Field(
        ..., description='Metrics at the step number during the fine-tuning job.'
    )
    fine_tuning_job_id: str = Field(
        ...,
        description='The name of the fine-tuning job that this checkpoint was created from.',
    )
    object: Object16 = Field(
        ...,
        description='The object type, which is always "fine_tuning.job.checkpoint".',
    )


class Object17(Enum):
    fine_tuning_job_event = 'fine_tuning.job.event'


class Level(Enum):
    info = 'info'
    warn = 'warn'
    error = 'error'


class Type29(Enum):
    message = 'message'
    metrics = 'metrics'


class FineTuningJobEvent(BaseModel):
    object: Object17 = Field(
        ..., description='The object type, which is always "fine_tuning.job.event".'
    )
    id: str = Field(..., description='The object identifier.')
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the fine-tuning job was created.',
    )
    level: Level = Field(..., description='The log level of the event.')
    message: str = Field(..., description='The message of the event.')
    type: Optional[Type29] = Field(None, description='The type of event.')
    data: Optional[Dict[str, Any]] = Field(
        None, description='The data associated with the event.'
    )


class FunctionParameters(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Image(BaseModel):
    b64_json: Optional[str] = Field(
        None,
        description='The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.',
    )
    url: Optional[str] = Field(
        None,
        description='The URL of the generated image, if `response_format` is `url` (default).',
    )
    revised_prompt: Optional[str] = Field(
        None,
        description='The prompt that was used to generate the image, if there was any revision to the prompt.',
    )


class ImagesResponse(BaseModel):
    created: int
    data: List[Image]


class Object18(Enum):
    organization_invite = 'organization.invite'


class Role9(Enum):
    owner = 'owner'
    reader = 'reader'


class Status2(Enum):
    accepted = 'accepted'
    expired = 'expired'
    pending = 'pending'


class Role10(Enum):
    member = 'member'
    owner = 'owner'


class Project1(BaseModel):
    id: Optional[str] = Field(None, description="Project's public ID")
    role: Optional[Role10] = Field(None, description='Project membership role')


class Invite(BaseModel):
    object: Object18 = Field(
        ..., description='The object type, which is always `organization.invite`'
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    email: str = Field(
        ...,
        description='The email address of the individual to whom the invite was sent',
    )
    role: Role9 = Field(..., description='`owner` or `reader`')
    status: Status2 = Field(..., description='`accepted`,`expired`, or `pending`')
    invited_at: int = Field(
        ..., description='The Unix timestamp (in seconds) of when the invite was sent.'
    )
    expires_at: int = Field(
        ..., description='The Unix timestamp (in seconds) of when the invite expires.'
    )
    accepted_at: Optional[int] = Field(
        None,
        description='The Unix timestamp (in seconds) of when the invite was accepted.',
    )
    projects: Optional[List[Project1]] = Field(
        None,
        description='The projects that were granted membership upon acceptance of the invite.',
    )


class Object19(Enum):
    organization_invite_deleted = 'organization.invite.deleted'


class InviteDeleteResponse(BaseModel):
    object: Object19 = Field(
        ...,
        description='The object type, which is always `organization.invite.deleted`',
    )
    id: str
    deleted: bool


class Object20(Enum):
    list = 'list'


class InviteListResponse(BaseModel):
    object: Object20 = Field(..., description='The object type, which is always `list`')
    data: List[Invite]
    first_id: Optional[str] = Field(
        None, description='The first `invite_id` in the retrieved `list`'
    )
    last_id: Optional[str] = Field(
        None, description='The last `invite_id` in the retrieved `list`'
    )
    has_more: Optional[bool] = Field(
        None,
        description='The `has_more` property is used for pagination to indicate there are additional results.',
    )


class Role11(Enum):
    reader = 'reader'
    owner = 'owner'


class Role12(Enum):
    member = 'member'
    owner = 'owner'


class Project2(BaseModel):
    id: str = Field(..., description="Project's public ID")
    role: Role12 = Field(..., description='Project membership role')


class InviteRequest(BaseModel):
    email: str = Field(..., description='Send an email to this address')
    role: Role11 = Field(..., description='`owner` or `reader`')
    projects: Optional[List[Project2]] = Field(
        None,
        description='An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.',
    )


class ListFineTuningJobCheckpointsResponse(BaseModel):
    data: List[FineTuningJobCheckpoint]
    object: Object20
    first_id: Optional[str] = None
    last_id: Optional[str] = None
    has_more: bool


class ListFineTuningJobEventsResponse(BaseModel):
    data: List[FineTuningJobEvent]
    object: Object20
    has_more: bool


class Type30(Enum):
    image_file = 'image_file'


class ImageFile(BaseModel):
    file_id: str = Field(
        ...,
        description='The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.',
    )
    detail: Optional[Detail] = Field(
        'auto',
        description='Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.',
    )


class MessageContentImageFileObject(BaseModel):
    type: Type30 = Field(..., description='Always `image_file`.')
    image_file: ImageFile


class Type31(Enum):
    image_url = 'image_url'


class ImageUrl2(BaseModel):
    url: AnyUrl = Field(
        ...,
        description='The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.',
    )
    detail: Optional[Detail] = Field(
        'auto',
        description='Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`',
    )


class MessageContentImageUrlObject(BaseModel):
    type: Type31 = Field(..., description='The type of the content part.')
    image_url: ImageUrl2


class Type32(Enum):
    refusal = 'refusal'


class MessageContentRefusalObject(BaseModel):
    type: Type32 = Field(..., description='Always `refusal`.')
    refusal: str


class Type33(Enum):
    file_citation = 'file_citation'


class FileCitation(BaseModel):
    file_id: str = Field(
        ..., description='The ID of the specific File the citation is from.'
    )


class MessageContentTextAnnotationsFileCitationObject(BaseModel):
    type: Type33 = Field(..., description='Always `file_citation`.')
    text: str = Field(
        ..., description='The text in the message content that needs to be replaced.'
    )
    file_citation: FileCitation
    start_index: conint(ge=0)
    end_index: conint(ge=0)


class Type34(Enum):
    file_path = 'file_path'


class FilePath(BaseModel):
    file_id: str = Field(..., description='The ID of the file that was generated.')


class MessageContentTextAnnotationsFilePathObject(BaseModel):
    type: Type34 = Field(..., description='Always `file_path`.')
    text: str = Field(
        ..., description='The text in the message content that needs to be replaced.'
    )
    file_path: FilePath
    start_index: conint(ge=0)
    end_index: conint(ge=0)


class Type35(Enum):
    text = 'text'


class Text(BaseModel):
    value: str = Field(..., description='The data that makes up the text.')
    annotations: List[
        Union[
            MessageContentTextAnnotationsFileCitationObject,
            MessageContentTextAnnotationsFilePathObject,
        ]
    ]


class MessageContentTextObject(BaseModel):
    type: Type35 = Field(..., description='Always `text`.')
    text: Text


class Type36(Enum):
    image_file = 'image_file'


class ImageFile1(BaseModel):
    file_id: Optional[str] = Field(
        None,
        description='The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.',
    )
    detail: Optional[Detail] = Field(
        'auto',
        description='Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.',
    )


class MessageDeltaContentImageFileObject(BaseModel):
    index: int = Field(..., description='The index of the content part in the message.')
    type: Type36 = Field(..., description='Always `image_file`.')
    image_file: Optional[ImageFile1] = None


class Type37(Enum):
    image_url = 'image_url'


class ImageUrl3(BaseModel):
    url: Optional[str] = Field(
        None,
        description='The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.',
    )
    detail: Optional[Detail] = Field(
        'auto',
        description='Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.',
    )


class MessageDeltaContentImageUrlObject(BaseModel):
    index: int = Field(..., description='The index of the content part in the message.')
    type: Type37 = Field(..., description='Always `image_url`.')
    image_url: Optional[ImageUrl3] = None


class Type38(Enum):
    refusal = 'refusal'


class MessageDeltaContentRefusalObject(BaseModel):
    index: int = Field(..., description='The index of the refusal part in the message.')
    type: Type38 = Field(..., description='Always `refusal`.')
    refusal: Optional[str] = None


class Type39(Enum):
    file_citation = 'file_citation'


class FileCitation1(BaseModel):
    file_id: Optional[str] = Field(
        None, description='The ID of the specific File the citation is from.'
    )
    quote: Optional[str] = Field(None, description='The specific quote in the file.')


class MessageDeltaContentTextAnnotationsFileCitationObject(BaseModel):
    index: int = Field(
        ..., description='The index of the annotation in the text content part.'
    )
    type: Type39 = Field(..., description='Always `file_citation`.')
    text: Optional[str] = Field(
        None, description='The text in the message content that needs to be replaced.'
    )
    file_citation: Optional[FileCitation1] = None
    start_index: Optional[conint(ge=0)] = None
    end_index: Optional[conint(ge=0)] = None


class Type40(Enum):
    file_path = 'file_path'


class FilePath1(BaseModel):
    file_id: Optional[str] = Field(
        None, description='The ID of the file that was generated.'
    )


class MessageDeltaContentTextAnnotationsFilePathObject(BaseModel):
    index: int = Field(
        ..., description='The index of the annotation in the text content part.'
    )
    type: Type40 = Field(..., description='Always `file_path`.')
    text: Optional[str] = Field(
        None, description='The text in the message content that needs to be replaced.'
    )
    file_path: Optional[FilePath1] = None
    start_index: Optional[conint(ge=0)] = None
    end_index: Optional[conint(ge=0)] = None


class Type41(Enum):
    text = 'text'


class Text1(BaseModel):
    value: Optional[str] = Field(None, description='The data that makes up the text.')
    annotations: Optional[
        List[
            Union[
                MessageDeltaContentTextAnnotationsFileCitationObject,
                MessageDeltaContentTextAnnotationsFilePathObject,
            ]
        ]
    ] = None


class MessageDeltaContentTextObject(BaseModel):
    index: int = Field(..., description='The index of the content part in the message.')
    type: Type41 = Field(..., description='Always `text`.')
    text: Optional[Text1] = None


class Object27(Enum):
    thread_message_delta = 'thread.message.delta'


class Role13(Enum):
    user = 'user'
    assistant = 'assistant'


class Delta(BaseModel):
    role: Optional[Role13] = Field(
        None,
        description='The entity that produced the message. One of `user` or `assistant`.',
    )
    content: Optional[
        List[
            Union[
                MessageDeltaContentImageFileObject,
                MessageDeltaContentTextObject,
                MessageDeltaContentRefusalObject,
                MessageDeltaContentImageUrlObject,
            ]
        ]
    ] = Field(
        None, description='The content of the message in array of text and/or images.'
    )


class MessageDeltaObject(BaseModel):
    id: str = Field(
        ...,
        description='The identifier of the message, which can be referenced in API endpoints.',
    )
    object: Object27 = Field(
        ..., description='The object type, which is always `thread.message.delta`.'
    )
    delta: Delta = Field(
        ...,
        description='The delta containing the fields that have changed on the Message.',
    )


class Object28(Enum):
    thread_message = 'thread.message'


class Status3(Enum):
    in_progress = 'in_progress'
    incomplete = 'incomplete'
    completed = 'completed'


class Reason(Enum):
    content_filter = 'content_filter'
    max_tokens = 'max_tokens'
    run_cancelled = 'run_cancelled'
    run_expired = 'run_expired'
    run_failed = 'run_failed'


class IncompleteDetails(BaseModel):
    reason: Reason = Field(..., description='The reason the message is incomplete.')


class MessageRequestContentTextObject(BaseModel):
    type: Type41 = Field(..., description='Always `text`.')
    text: str = Field(..., description='Text content to be sent to the model')


class Event2(Enum):
    thread_message_created = 'thread.message.created'


class Event3(Enum):
    thread_message_in_progress = 'thread.message.in_progress'


class Event4(Enum):
    thread_message_delta = 'thread.message.delta'


class MessageStreamEvent3(BaseModel):
    event: Event4
    data: MessageDeltaObject


class Event5(Enum):
    thread_message_completed = 'thread.message.completed'


class Event6(Enum):
    thread_message_incomplete = 'thread.message.incomplete'


class Metadata(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class Object29(Enum):
    model = 'model'


class ModelModel(BaseModel):
    id: str = Field(
        ...,
        description='The model identifier, which can be referenced in the API endpoints.',
    )
    created: int = Field(
        ..., description='The Unix timestamp (in seconds) when the model was created.'
    )
    object: Object29 = Field(
        ..., description='The object type, which is always "model".'
    )
    owned_by: str = Field(..., description='The organization that owns the model.')


class CodeInterpreter4(BaseModel):
    file_ids: Optional[List[str]] = Field(
        [],
        description='Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n',
        max_length=20,
    )


class FileSearch7(BaseModel):
    vector_store_ids: Optional[List[str]] = Field(
        None,
        description='Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )


class ToolResources4(BaseModel):
    code_interpreter: Optional[CodeInterpreter4] = None
    file_search: Optional[FileSearch7] = None


class ModifyMessageRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Optional[Metadata] = None


class ModifyRunRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Optional[Metadata] = None


class CodeInterpreter5(BaseModel):
    file_ids: Optional[List[str]] = Field(
        [],
        description='A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n',
        max_length=20,
    )


class FileSearch8(BaseModel):
    vector_store_ids: Optional[List[str]] = Field(
        None,
        description='The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n',
        max_length=1,
    )


class ToolResources5(BaseModel):
    code_interpreter: Optional[CodeInterpreter5] = None
    file_search: Optional[FileSearch8] = None


class ModifyThreadRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    tool_resources: Optional[ToolResources5] = Field(
        None,
        description="A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    metadata: Optional[Metadata] = None


class Object30(Enum):
    file = 'file'


class Purpose2(Enum):
    assistants = 'assistants'
    assistants_output = 'assistants_output'
    batch = 'batch'
    batch_output = 'batch_output'
    fine_tune = 'fine-tune'
    fine_tune_results = 'fine-tune-results'
    vision = 'vision'


class Status4(Enum):
    uploaded = 'uploaded'
    processed = 'processed'
    error = 'error'


class OpenAIFile(BaseModel):
    id: str = Field(
        ...,
        description='The file identifier, which can be referenced in the API endpoints.',
    )
    bytes: int = Field(..., description='The size of the file, in bytes.')
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the file was created.',
    )
    filename: str = Field(..., description='The name of the file.')
    object: Object30 = Field(
        ..., description='The object type, which is always `file`.'
    )
    purpose: Purpose2 = Field(
        ...,
        description='The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.',
    )
    status: Status4 = Field(
        ...,
        description='Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.',
    )
    status_details: Optional[str] = Field(
        None,
        description='Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.',
    )


class Type43(Enum):
    other = 'other'


class OtherChunkingStrategyResponseParam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type43 = Field(..., description='Always `other`.')


class ParallelToolCalls(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.',
    )


class Type44(Enum):
    content = 'content'


class PredictionContent(BaseModel):
    type: Type44 = Field(
        ...,
        description='The type of the predicted content you want to provide. This type is\ncurrently always `content`.\n',
    )
    content: Union[str, List[ChatCompletionRequestMessageContentPartText]] = Field(
        ...,
        description='The content that should be matched when generating a model response.\nIf generated tokens would match this content, the entire model response\ncan be returned much more quickly.\n',
    )


class Object31(Enum):
    organization_project = 'organization.project'


class Status5(Enum):
    active = 'active'
    archived = 'archived'


class Project3(BaseModel):
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    object: Object31 = Field(
        ..., description='The object type, which is always `organization.project`'
    )
    name: str = Field(
        ..., description='The name of the project. This appears in reporting.'
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the project was created.',
    )
    archived_at: Optional[int] = Field(
        None,
        description='The Unix timestamp (in seconds) of when the project was archived or `null`.',
    )
    status: Status5 = Field(..., description='`active` or `archived`')


class Object32(Enum):
    organization_project_api_key = 'organization.project.api_key'


class Type45(Enum):
    user = 'user'
    service_account = 'service_account'


class Object33(Enum):
    organization_project_api_key_deleted = 'organization.project.api_key.deleted'


class ProjectApiKeyDeleteResponse(BaseModel):
    object: Object33
    id: str
    deleted: bool


class Object34(Enum):
    list = 'list'


class ProjectCreateRequest(BaseModel):
    name: str = Field(
        ...,
        description='The friendly name of the project, this name appears in reports.',
    )


class ProjectListResponse(BaseModel):
    object: Object34
    data: List[Project3]
    first_id: str
    last_id: str
    has_more: bool


class Object36(Enum):
    project_rate_limit = 'project.rate_limit'


class ProjectRateLimit(BaseModel):
    object: Object36 = Field(
        ..., description='The object type, which is always `project.rate_limit`'
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    model: str = Field(..., description='The model this rate limit applies to.')
    max_requests_per_1_minute: int = Field(
        ..., description='The maximum requests per minute.'
    )
    max_tokens_per_1_minute: int = Field(
        ..., description='The maximum tokens per minute.'
    )
    max_images_per_1_minute: Optional[int] = Field(
        None,
        description='The maximum images per minute. Only present for relevant models.',
    )
    max_audio_megabytes_per_1_minute: Optional[int] = Field(
        None,
        description='The maximum audio megabytes per minute. Only present for relevant models.',
    )
    max_requests_per_1_day: Optional[int] = Field(
        None,
        description='The maximum requests per day. Only present for relevant models.',
    )
    batch_1_day_max_input_tokens: Optional[int] = Field(
        None,
        description='The maximum batch input tokens per day. Only present for relevant models.',
    )


class Object37(Enum):
    list = 'list'


class ProjectRateLimitListResponse(BaseModel):
    object: Object37
    data: List[ProjectRateLimit]
    first_id: str
    last_id: str
    has_more: bool


class ProjectRateLimitUpdateRequest(BaseModel):
    max_requests_per_1_minute: Optional[int] = Field(
        None, description='The maximum requests per minute.'
    )
    max_tokens_per_1_minute: Optional[int] = Field(
        None, description='The maximum tokens per minute.'
    )
    max_images_per_1_minute: Optional[int] = Field(
        None,
        description='The maximum images per minute. Only relevant for certain models.',
    )
    max_audio_megabytes_per_1_minute: Optional[int] = Field(
        None,
        description='The maximum audio megabytes per minute. Only relevant for certain models.',
    )
    max_requests_per_1_day: Optional[int] = Field(
        None,
        description='The maximum requests per day. Only relevant for certain models.',
    )
    batch_1_day_max_input_tokens: Optional[int] = Field(
        None,
        description='The maximum batch input tokens per day. Only relevant for certain models.',
    )


class Object38(Enum):
    organization_project_service_account = 'organization.project.service_account'


class Role15(Enum):
    owner = 'owner'
    member = 'member'


class ProjectServiceAccount(BaseModel):
    object: Object38 = Field(
        ...,
        description='The object type, which is always `organization.project.service_account`',
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    name: str = Field(..., description='The name of the service account')
    role: Role15 = Field(..., description='`owner` or `member`')
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the service account was created',
    )


class Object39(Enum):
    organization_project_service_account_api_key = (
        'organization.project.service_account.api_key'
    )


class ProjectServiceAccountApiKey(BaseModel):
    object: Object39 = Field(
        ...,
        description='The object type, which is always `organization.project.service_account.api_key`',
    )
    value: str
    name: str
    created_at: int
    id: str


class ProjectServiceAccountCreateRequest(BaseModel):
    name: str = Field(..., description='The name of the service account being created.')


class Object40(Enum):
    organization_project_service_account = 'organization.project.service_account'


class Role16(Enum):
    member = 'member'


class ProjectServiceAccountCreateResponse(BaseModel):
    object: Object40
    id: str
    name: str
    role: Role16 = Field(
        ..., description='Service accounts can only have one role of type `member`'
    )
    created_at: int
    api_key: ProjectServiceAccountApiKey


class Object41(Enum):
    organization_project_service_account_deleted = (
        'organization.project.service_account.deleted'
    )


class ProjectServiceAccountDeleteResponse(BaseModel):
    object: Object41
    id: str
    deleted: bool


class Object42(Enum):
    list = 'list'


class ProjectServiceAccountListResponse(BaseModel):
    object: Object42
    data: List[ProjectServiceAccount]
    first_id: str
    last_id: str
    has_more: bool


class ProjectUpdateRequest(BaseModel):
    name: str = Field(
        ...,
        description='The updated name of the project, this name appears in reports.',
    )


class Object43(Enum):
    organization_project_user = 'organization.project.user'


class Role17(Enum):
    owner = 'owner'
    member = 'member'


class ProjectUser(BaseModel):
    object: Object43 = Field(
        ..., description='The object type, which is always `organization.project.user`'
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    name: str = Field(..., description='The name of the user')
    email: str = Field(..., description='The email address of the user')
    role: Role17 = Field(..., description='`owner` or `member`')
    added_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the project was added.',
    )


class ProjectUserCreateRequest(BaseModel):
    user_id: str = Field(..., description='The ID of the user.')
    role: Role17 = Field(..., description='`owner` or `member`')


class Object44(Enum):
    organization_project_user_deleted = 'organization.project.user.deleted'


class ProjectUserDeleteResponse(BaseModel):
    object: Object44
    id: str
    deleted: bool


class ProjectUserListResponse(BaseModel):
    object: str
    data: List[ProjectUser]
    first_id: str
    last_id: str
    has_more: bool


class ProjectUserUpdateRequest(BaseModel):
    role: Role17 = Field(..., description='`owner` or `member`')


class Type46(Enum):
    conversation_item_create = 'conversation.item.create'


class Type47(Enum):
    conversation_item_delete = 'conversation.item.delete'


class RealtimeClientEventConversationItemDelete(BaseModel):
    event_id: Optional[str] = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type47 = Field(
        ..., description='The event type, must be `conversation.item.delete`.'
    )
    item_id: str = Field(..., description='The ID of the item to delete.')


class Type48(Enum):
    conversation_item_truncate = 'conversation.item.truncate'


class RealtimeClientEventConversationItemTruncate(BaseModel):
    event_id: Optional[str] = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type48 = Field(
        ..., description='The event type, must be `conversation.item.truncate`.'
    )
    item_id: str = Field(
        ...,
        description='The ID of the assistant message item to truncate. Only assistant message \nitems can be truncated.\n',
    )
    content_index: int = Field(
        ..., description='The index of the content part to truncate. Set this to 0.'
    )
    audio_end_ms: int = Field(
        ...,
        description='Inclusive duration up to which audio is truncated, in milliseconds. If \nthe audio_end_ms is greater than the actual audio duration, the server \nwill respond with an error.\n',
    )


class Type49(Enum):
    input_audio_buffer_append = 'input_audio_buffer.append'


class RealtimeClientEventInputAudioBufferAppend(BaseModel):
    event_id: Optional[str] = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type49 = Field(
        ..., description='The event type, must be `input_audio_buffer.append`.'
    )
    audio: str = Field(
        ...,
        description='Base64-encoded audio bytes. This must be in the format specified by the \n`input_audio_format` field in the session configuration.\n',
    )


class Type50(Enum):
    input_audio_buffer_clear = 'input_audio_buffer.clear'


class RealtimeClientEventInputAudioBufferClear(BaseModel):
    event_id: Optional[str] = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type50 = Field(
        ..., description='The event type, must be `input_audio_buffer.clear`.'
    )


class Type51(Enum):
    input_audio_buffer_commit = 'input_audio_buffer.commit'


class RealtimeClientEventInputAudioBufferCommit(BaseModel):
    event_id: Optional[str] = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type51 = Field(
        ..., description='The event type, must be `input_audio_buffer.commit`.'
    )


class Type52(Enum):
    response_cancel = 'response.cancel'


class RealtimeClientEventResponseCancel(BaseModel):
    event_id: Optional[str] = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type52 = Field(..., description='The event type, must be `response.cancel`.')
    response_id: Optional[str] = Field(
        None,
        description='A specific response ID to cancel - if not provided, will cancel an \nin-progress response in the default conversation.\n',
    )


class Type53(Enum):
    response_create = 'response.create'


class Type54(Enum):
    session_update = 'session.update'


class Type55(Enum):
    message = 'message'
    function_call = 'function_call'
    function_call_output = 'function_call_output'


class Object45(Enum):
    realtime_item = 'realtime.item'


class Status6(Enum):
    completed = 'completed'
    incomplete = 'incomplete'


class Role20(Enum):
    user = 'user'
    assistant = 'assistant'
    system = 'system'


class Type56(Enum):
    input_audio = 'input_audio'
    input_text = 'input_text'
    item_reference = 'item_reference'
    text = 'text'


class ContentItem(BaseModel):
    type: Optional[Type56] = Field(
        None,
        description='The content type (`input_text`, `input_audio`, `item_reference`, `text`).\n',
    )
    text: Optional[str] = Field(
        None,
        description='The text content, used for `input_text` and `text` content types.\n',
    )
    id: Optional[str] = Field(
        None,
        description='ID of a previous conversation item to reference (for `item_reference`\ncontent types in `response.create` events). These can reference both\nclient and server created items.\n',
    )
    audio: Optional[str] = Field(
        None,
        description='Base64-encoded audio bytes, used for `input_audio` content type.\n',
    )
    transcript: Optional[str] = Field(
        None,
        description='The transcript of the audio, used for `input_audio` content type.\n',
    )


class RealtimeConversationItem(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The unique ID of the item, this can be generated by the client to help \nmanage server-side context, but is not required because the server will \ngenerate one if not provided.\n',
    )
    type: Optional[Type55] = Field(
        None,
        description='The type of the item (`message`, `function_call`, `function_call_output`).\n',
    )
    object: Optional[Object45] = Field(
        None,
        description='Identifier for the API object being returned - always `realtime.item`.\n',
    )
    status: Optional[Status6] = Field(
        None,
        description='The status of the item (`completed`, `incomplete`). These have no effect \non the conversation, but are accepted for consistency with the \n`conversation.item.created` event.\n',
    )
    role: Optional[Role20] = Field(
        None,
        description='The role of the message sender (`user`, `assistant`, `system`), only \napplicable for `message` items.\n',
    )
    content: Optional[List[ContentItem]] = Field(
        None,
        description='The content of the message, applicable for `message` items. \n- Message items of role `system` support only `input_text` content\n- Message items of role `user` support `input_text` and `input_audio` \n  content\n- Message items of role `assistant` support `text` content.\n',
    )
    call_id: Optional[str] = Field(
        None,
        description='The ID of the function call (for `function_call` and \n`function_call_output` items). If passed on a `function_call_output` \nitem, the server will check that a `function_call` item with the same \nID exists in the conversation history.\n',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the function being called (for `function_call` items).\n',
    )
    arguments: Optional[str] = Field(
        None,
        description='The arguments of the function call (for `function_call` items).\n',
    )
    output: Optional[str] = Field(
        None,
        description='The output of the function call (for `function_call_output` items).\n',
    )


class Type57(Enum):
    message = 'message'
    function_call = 'function_call'
    function_call_output = 'function_call_output'


class Type58(Enum):
    input_audio = 'input_audio'
    input_text = 'input_text'
    item_reference = 'item_reference'
    text = 'text'


class ContentItem1(BaseModel):
    type: Optional[Type58] = Field(
        None,
        description='The content type (`input_text`, `input_audio`, `item_reference`, `text`).\n',
    )
    text: Optional[str] = Field(
        None,
        description='The text content, used for `input_text` and `text` content types.\n',
    )
    id: Optional[str] = Field(
        None,
        description='ID of a previous conversation item to reference (for `item_reference`\ncontent types in `response.create` events). These can reference both\nclient and server created items.\n',
    )
    audio: Optional[str] = Field(
        None,
        description='Base64-encoded audio bytes, used for `input_audio` content type.\n',
    )
    transcript: Optional[str] = Field(
        None,
        description='The transcript of the audio, used for `input_audio` content type.\n',
    )


class RealtimeConversationItemWithReference(BaseModel):
    id: Optional[str] = Field(
        None,
        description='For an item of type (`message` | `function_call` | `function_call_output`)\nthis field allows the client to assign the unique ID of the item. It is\nnot required because the server will generate one if not provided.\n\nFor an item of type `item_reference`, this field is required and is a\nreference to any item that has previously existed in the conversation.\n',
    )
    type: Optional[Type57] = Field(
        None,
        description='The type of the item (`message`, `function_call`, `function_call_output`, `item_reference`).\n',
    )
    object: Optional[Object45] = Field(
        None,
        description='Identifier for the API object being returned - always `realtime.item`.\n',
    )
    status: Optional[Status6] = Field(
        None,
        description='The status of the item (`completed`, `incomplete`). These have no effect \non the conversation, but are accepted for consistency with the \n`conversation.item.created` event.\n',
    )
    role: Optional[Role20] = Field(
        None,
        description='The role of the message sender (`user`, `assistant`, `system`), only \napplicable for `message` items.\n',
    )
    content: Optional[List[ContentItem1]] = Field(
        None,
        description='The content of the message, applicable for `message` items. \n- Message items of role `system` support only `input_text` content\n- Message items of role `user` support `input_text` and `input_audio` \n  content\n- Message items of role `assistant` support `text` content.\n',
    )
    call_id: Optional[str] = Field(
        None,
        description='The ID of the function call (for `function_call` and \n`function_call_output` items). If passed on a `function_call_output` \nitem, the server will check that a `function_call` item with the same \nID exists in the conversation history.\n',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the function being called (for `function_call` items).\n',
    )
    arguments: Optional[str] = Field(
        None,
        description='The arguments of the function call (for `function_call` items).\n',
    )
    output: Optional[str] = Field(
        None,
        description='The output of the function call (for `function_call_output` items).\n',
    )


class Object47(Enum):
    realtime_response = 'realtime.response'


class Status8(Enum):
    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'
    incomplete = 'incomplete'


class Type59(Enum):
    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'
    incomplete = 'incomplete'


class Reason1(Enum):
    turn_detected = 'turn_detected'
    client_cancelled = 'client_cancelled'
    max_output_tokens = 'max_output_tokens'
    content_filter = 'content_filter'


class Error3(BaseModel):
    type: Optional[str] = Field(None, description='The type of error.')
    code: Optional[str] = Field(None, description='Error code, if any.')


class StatusDetails(BaseModel):
    type: Optional[Type59] = Field(
        None,
        description='The type of error that caused the response to fail, corresponding \nwith the `status` field (`completed`, `cancelled`, `incomplete`, \n`failed`).\n',
    )
    reason: Optional[Reason1] = Field(
        None,
        description='The reason the Response did not complete. For a `cancelled` Response, \none of `turn_detected` (the server VAD detected a new start of speech) \nor `client_cancelled` (the client sent a cancel event). For an \n`incomplete` Response, one of `max_output_tokens` or `content_filter` \n(the server-side safety filter activated and cut off the response).\n',
    )
    error: Optional[Error3] = Field(
        None,
        description='A description of the error that caused the response to fail, \npopulated when the `status` is `failed`.\n',
    )


class InputTokenDetails(BaseModel):
    cached_tokens: Optional[int] = Field(
        None, description='The number of cached tokens used in the Response.'
    )
    text_tokens: Optional[int] = Field(
        None, description='The number of text tokens used in the Response.'
    )
    audio_tokens: Optional[int] = Field(
        None, description='The number of audio tokens used in the Response.'
    )


class OutputTokenDetails(BaseModel):
    text_tokens: Optional[int] = Field(
        None, description='The number of text tokens used in the Response.'
    )
    audio_tokens: Optional[int] = Field(
        None, description='The number of audio tokens used in the Response.'
    )


class Usage2(BaseModel):
    total_tokens: Optional[int] = Field(
        None,
        description='The total number of tokens in the Response including input and output \ntext and audio tokens.\n',
    )
    input_tokens: Optional[int] = Field(
        None,
        description='The number of input tokens used in the Response, including text and \naudio tokens.\n',
    )
    output_tokens: Optional[int] = Field(
        None,
        description='The number of output tokens sent in the Response, including text and \naudio tokens.\n',
    )
    input_token_details: Optional[InputTokenDetails] = Field(
        None, description='Details about the input tokens used in the Response.'
    )
    output_token_details: Optional[OutputTokenDetails] = Field(
        None, description='Details about the output tokens used in the Response.'
    )


class Voice2(Enum):
    alloy = 'alloy'
    ash = 'ash'
    ballad = 'ballad'
    coral = 'coral'
    echo = 'echo'
    sage = 'sage'
    shimmer = 'shimmer'
    verse = 'verse'


class Modality(Enum):
    text = 'text'
    audio = 'audio'


class OutputAudioFormat(Enum):
    pcm16 = 'pcm16'
    g711_ulaw = 'g711_ulaw'
    g711_alaw = 'g711_alaw'


class MaxOutputTokens(Enum):
    inf = 'inf'


class RealtimeResponse(BaseModel):
    id: Optional[str] = Field(None, description='The unique ID of the response.')
    object: Optional[Object47] = Field(
        None, description='The object type, must be `realtime.response`.'
    )
    status: Optional[Status8] = Field(
        None,
        description='The final status of the response (`completed`, `cancelled`, `failed`, or \n`incomplete`).\n',
    )
    status_details: Optional[StatusDetails] = Field(
        None, description='Additional details about the status.'
    )
    output: Optional[List[RealtimeConversationItem]] = Field(
        None, description='The list of output items generated by the response.'
    )
    metadata: Optional[Metadata] = None
    usage: Optional[Usage2] = Field(
        None,
        description='Usage statistics for the Response, this will correspond to billing. A \nRealtime API session will maintain a conversation context and append new \nItems to the Conversation, thus output from previous turns (text and \naudio tokens) will become the input for later turns.\n',
    )
    conversation_id: Optional[str] = Field(
        None,
        description='Which conversation the response is added to, determined by the `conversation`\nfield in the `response.create` event. If `auto`, the response will be added to\nthe default conversation and the value of `conversation_id` will be an id like\n`conv_1234`. If `none`, the response will not be added to any conversation and\nthe value of `conversation_id` will be `null`. If responses are being triggered\nby server VAD, the response will be added to the default conversation, thus\nthe `conversation_id` will be an id like `conv_1234`.\n',
    )
    voice: Optional[Voice2] = Field(
        None,
        description='The voice the model used to respond.\nCurrent voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n',
    )
    modalities: Optional[List[Modality]] = Field(
        None,
        description='The set of modalities the model used to respond. If there are multiple modalities,\nthe model will pick one, for example if `modalities` is `["text", "audio"]`, the model\ncould be responding in either text or audio.\n',
    )
    output_audio_format: Optional[OutputAudioFormat] = Field(
        None,
        description='The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n',
    )
    temperature: Optional[float] = Field(
        None,
        description='Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n',
    )
    max_output_tokens: Optional[Union[int, MaxOutputTokens]] = Field(
        None,
        description='Maximum number of output tokens for a single assistant response,\ninclusive of tool calls, that was used in this response.\n',
    )


class Type60(Enum):
    function = 'function'


class Tool(BaseModel):
    type: Optional[Type60] = Field(
        None, description='The type of the tool, i.e. `function`.'
    )
    name: Optional[str] = Field(None, description='The name of the function.')
    description: Optional[str] = Field(
        None,
        description='The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n',
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None, description='Parameters of the function in JSON Schema.'
    )


class MaxResponseOutputTokens(Enum):
    inf = 'inf'


class Conversation(Enum):
    auto = 'auto'
    none = 'none'


class RealtimeResponseCreateParams(BaseModel):
    modalities: Optional[List[Modality]] = Field(
        None,
        description='The set of modalities the model can respond with. To disable audio,\nset this to ["text"].\n',
    )
    instructions: Optional[str] = Field(
        None,
        description='The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. "be extremely succinct", "act friendly", "here are examples of good \nresponses") and on audio behavior (e.g. "talk quickly", "inject emotion \ninto your voice", "laugh frequently"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n',
    )
    voice: Optional[Voice2] = Field(
        None,
        description='The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n',
    )
    output_audio_format: Optional[OutputAudioFormat] = Field(
        None,
        description='The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n',
    )
    tools: Optional[List[Tool]] = Field(
        None, description='Tools (functions) available to the model.'
    )
    tool_choice: Optional[str] = Field(
        None,
        description='How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function, like `{"type": "function", "function": {"name": "my_function"}}`.\n',
    )
    temperature: Optional[float] = Field(
        None,
        description='Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n',
    )
    max_response_output_tokens: Optional[Union[int, MaxResponseOutputTokens]] = Field(
        None,
        description='Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n',
    )
    conversation: Optional[Union[str, Conversation]] = Field(
        None,
        description='Controls which conversation the response is added to. Currently supports\n`auto` and `none`, with `auto` as the default value. The `auto` value\nmeans that the contents of the response will be added to the default\nconversation. Set this to `none` to create an out-of-band response which \nwill not add items to default conversation.\n',
    )
    metadata: Optional[Metadata] = None
    input: Optional[List[RealtimeConversationItemWithReference]] = Field(
        None,
        description='Input items to include in the prompt for the model. Using this field\ncreates a new context for this Response instead of using the default\nconversation. An empty array `[]` will clear the context for this Response.\nNote that this can include references to items from the default conversation.\n',
    )


class Type61(Enum):
    conversation_created = 'conversation.created'


class Conversation1(BaseModel):
    id: Optional[str] = Field(None, description='The unique ID of the conversation.')
    object: Optional[str] = Field(
        None, description='The object type, must be `realtime.conversation`.'
    )


class RealtimeServerEventConversationCreated(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type61 = Field(
        ..., description='The event type, must be `conversation.created`.'
    )
    conversation: Conversation1 = Field(..., description='The conversation resource.')


class Type62(Enum):
    conversation_item_created = 'conversation.item.created'


class RealtimeServerEventConversationItemCreated(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type62 = Field(
        ..., description='The event type, must be `conversation.item.created`.'
    )
    previous_item_id: str = Field(
        ...,
        description='The ID of the preceding item in the Conversation context, allows the \nclient to understand the order of the conversation.\n',
    )
    item: RealtimeConversationItem


class Type63(Enum):
    conversation_item_deleted = 'conversation.item.deleted'


class RealtimeServerEventConversationItemDeleted(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type63 = Field(
        ..., description='The event type, must be `conversation.item.deleted`.'
    )
    item_id: str = Field(..., description='The ID of the item that was deleted.')


class Type64(Enum):
    conversation_item_input_audio_transcription_completed = (
        'conversation.item.input_audio_transcription.completed'
    )


class RealtimeServerEventConversationItemInputAudioTranscriptionCompleted(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type64 = Field(
        ...,
        description='The event type, must be\n`conversation.item.input_audio_transcription.completed`.\n',
    )
    item_id: str = Field(
        ..., description='The ID of the user message item containing the audio.'
    )
    content_index: int = Field(
        ..., description='The index of the content part containing the audio.'
    )
    transcript: str = Field(..., description='The transcribed text.')


class Type65(Enum):
    conversation_item_input_audio_transcription_failed = (
        'conversation.item.input_audio_transcription.failed'
    )


class Error4(BaseModel):
    type: Optional[str] = Field(None, description='The type of error.')
    code: Optional[str] = Field(None, description='Error code, if any.')
    message: Optional[str] = Field(None, description='A human-readable error message.')
    param: Optional[str] = Field(
        None, description='Parameter related to the error, if any.'
    )


class RealtimeServerEventConversationItemInputAudioTranscriptionFailed(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type65 = Field(
        ...,
        description='The event type, must be\n`conversation.item.input_audio_transcription.failed`.\n',
    )
    item_id: str = Field(..., description='The ID of the user message item.')
    content_index: int = Field(
        ..., description='The index of the content part containing the audio.'
    )
    error: Error4 = Field(..., description='Details of the transcription error.')


class Type66(Enum):
    conversation_item_truncated = 'conversation.item.truncated'


class RealtimeServerEventConversationItemTruncated(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type66 = Field(
        ..., description='The event type, must be `conversation.item.truncated`.'
    )
    item_id: str = Field(
        ..., description='The ID of the assistant message item that was truncated.'
    )
    content_index: int = Field(
        ..., description='The index of the content part that was truncated.'
    )
    audio_end_ms: int = Field(
        ...,
        description='The duration up to which the audio was truncated, in milliseconds.\n',
    )


class Type67(Enum):
    error = 'error'


class Error5(BaseModel):
    type: str = Field(
        ...,
        description='The type of error (e.g., "invalid_request_error", "server_error").\n',
    )
    code: Optional[str] = Field(None, description='Error code, if any.')
    message: str = Field(..., description='A human-readable error message.')
    param: Optional[str] = Field(
        None, description='Parameter related to the error, if any.'
    )
    event_id: Optional[str] = Field(
        None,
        description='The event_id of the client event that caused the error, if applicable.\n',
    )


class RealtimeServerEventError(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type67 = Field(..., description='The event type, must be `error`.')
    error: Error5 = Field(..., description='Details of the error.')


class Type68(Enum):
    input_audio_buffer_cleared = 'input_audio_buffer.cleared'


class RealtimeServerEventInputAudioBufferCleared(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type68 = Field(
        ..., description='The event type, must be `input_audio_buffer.cleared`.'
    )


class Type69(Enum):
    input_audio_buffer_committed = 'input_audio_buffer.committed'


class RealtimeServerEventInputAudioBufferCommitted(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type69 = Field(
        ..., description='The event type, must be `input_audio_buffer.committed`.'
    )
    previous_item_id: str = Field(
        ...,
        description='The ID of the preceding item after which the new item will be inserted.\n',
    )
    item_id: str = Field(
        ..., description='The ID of the user message item that will be created.'
    )


class Type70(Enum):
    input_audio_buffer_speech_started = 'input_audio_buffer.speech_started'


class RealtimeServerEventInputAudioBufferSpeechStarted(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type70 = Field(
        ..., description='The event type, must be `input_audio_buffer.speech_started`.'
    )
    audio_start_ms: int = Field(
        ...,
        description='Milliseconds from the start of all audio written to the buffer during the \nsession when speech was first detected. This will correspond to the \nbeginning of audio sent to the model, and thus includes the \n`prefix_padding_ms` configured in the Session.\n',
    )
    item_id: str = Field(
        ...,
        description='The ID of the user message item that will be created when speech stops.\n',
    )


class Type71(Enum):
    input_audio_buffer_speech_stopped = 'input_audio_buffer.speech_stopped'


class RealtimeServerEventInputAudioBufferSpeechStopped(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type71 = Field(
        ..., description='The event type, must be `input_audio_buffer.speech_stopped`.'
    )
    audio_end_ms: int = Field(
        ...,
        description='Milliseconds since the session started when speech stopped. This will \ncorrespond to the end of audio sent to the model, and thus includes the \n`min_silence_duration_ms` configured in the Session.\n',
    )
    item_id: str = Field(
        ..., description='The ID of the user message item that will be created.'
    )


class Type72(Enum):
    rate_limits_updated = 'rate_limits.updated'


class Name(Enum):
    requests = 'requests'
    tokens = 'tokens'


class RateLimit(BaseModel):
    name: Optional[Name] = Field(
        None, description='The name of the rate limit (`requests`, `tokens`).\n'
    )
    limit: Optional[int] = Field(
        None, description='The maximum allowed value for the rate limit.'
    )
    remaining: Optional[int] = Field(
        None, description='The remaining value before the limit is reached.'
    )
    reset_seconds: Optional[float] = Field(
        None, description='Seconds until the rate limit resets.'
    )


class RealtimeServerEventRateLimitsUpdated(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type72 = Field(
        ..., description='The event type, must be `rate_limits.updated`.'
    )
    rate_limits: List[RateLimit] = Field(
        ..., description='List of rate limit information.'
    )


class Type73(Enum):
    response_audio_delta = 'response.audio.delta'


class RealtimeServerEventResponseAudioDelta(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type73 = Field(
        ..., description='The event type, must be `response.audio.delta`.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    delta: str = Field(..., description='Base64-encoded audio data delta.')


class Type74(Enum):
    response_audio_done = 'response.audio.done'


class RealtimeServerEventResponseAudioDone(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type74 = Field(
        ..., description='The event type, must be `response.audio.done`.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )


class Type75(Enum):
    response_audio_transcript_delta = 'response.audio_transcript.delta'


class RealtimeServerEventResponseAudioTranscriptDelta(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type75 = Field(
        ..., description='The event type, must be `response.audio_transcript.delta`.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    delta: str = Field(..., description='The transcript delta.')


class Type76(Enum):
    response_audio_transcript_done = 'response.audio_transcript.done'


class RealtimeServerEventResponseAudioTranscriptDone(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type76 = Field(
        ..., description='The event type, must be `response.audio_transcript.done`.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    transcript: str = Field(..., description='The final transcript of the audio.')


class Type77(Enum):
    response_content_part_added = 'response.content_part.added'


class Type78(Enum):
    audio = 'audio'
    text = 'text'


class Part(BaseModel):
    type: Optional[Type78] = Field(
        None, description='The content type ("text", "audio").'
    )
    text: Optional[str] = Field(
        None, description='The text content (if type is "text").'
    )
    audio: Optional[str] = Field(
        None, description='Base64-encoded audio data (if type is "audio").'
    )
    transcript: Optional[str] = Field(
        None, description='The transcript of the audio (if type is "audio").'
    )


class RealtimeServerEventResponseContentPartAdded(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type77 = Field(
        ..., description='The event type, must be `response.content_part.added`.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    item_id: str = Field(
        ..., description='The ID of the item to which the content part was added.'
    )
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    part: Part = Field(..., description='The content part that was added.')


class Type79(Enum):
    response_content_part_done = 'response.content_part.done'


class Type80(Enum):
    audio = 'audio'
    text = 'text'


class Part1(BaseModel):
    type: Optional[Type80] = Field(
        None, description='The content type ("text", "audio").'
    )
    text: Optional[str] = Field(
        None, description='The text content (if type is "text").'
    )
    audio: Optional[str] = Field(
        None, description='Base64-encoded audio data (if type is "audio").'
    )
    transcript: Optional[str] = Field(
        None, description='The transcript of the audio (if type is "audio").'
    )


class RealtimeServerEventResponseContentPartDone(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type79 = Field(
        ..., description='The event type, must be `response.content_part.done`.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    part: Part1 = Field(..., description='The content part that is done.')


class Type81(Enum):
    response_created = 'response.created'


class RealtimeServerEventResponseCreated(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type81 = Field(..., description='The event type, must be `response.created`.')
    response: RealtimeResponse


class Type82(Enum):
    response_done = 'response.done'


class RealtimeServerEventResponseDone(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type82 = Field(..., description='The event type, must be `response.done`.')
    response: RealtimeResponse


class Type83(Enum):
    response_function_call_arguments_delta = 'response.function_call_arguments.delta'


class RealtimeServerEventResponseFunctionCallArgumentsDelta(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type83 = Field(
        ...,
        description='The event type, must be `response.function_call_arguments.delta`.\n',
    )
    response_id: str = Field(..., description='The ID of the response.')
    item_id: str = Field(..., description='The ID of the function call item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    call_id: str = Field(..., description='The ID of the function call.')
    delta: str = Field(..., description='The arguments delta as a JSON string.')


class Type84(Enum):
    response_function_call_arguments_done = 'response.function_call_arguments.done'


class RealtimeServerEventResponseFunctionCallArgumentsDone(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type84 = Field(
        ...,
        description='The event type, must be `response.function_call_arguments.done`.\n',
    )
    response_id: str = Field(..., description='The ID of the response.')
    item_id: str = Field(..., description='The ID of the function call item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    call_id: str = Field(..., description='The ID of the function call.')
    arguments: str = Field(..., description='The final arguments as a JSON string.')


class Type85(Enum):
    response_output_item_added = 'response.output_item.added'


class RealtimeServerEventResponseOutputItemAdded(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type85 = Field(
        ..., description='The event type, must be `response.output_item.added`.'
    )
    response_id: str = Field(
        ..., description='The ID of the Response to which the item belongs.'
    )
    output_index: int = Field(
        ..., description='The index of the output item in the Response.'
    )
    item: RealtimeConversationItem


class Type86(Enum):
    response_output_item_done = 'response.output_item.done'


class RealtimeServerEventResponseOutputItemDone(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type86 = Field(
        ..., description='The event type, must be `response.output_item.done`.'
    )
    response_id: str = Field(
        ..., description='The ID of the Response to which the item belongs.'
    )
    output_index: int = Field(
        ..., description='The index of the output item in the Response.'
    )
    item: RealtimeConversationItem


class Type87(Enum):
    response_text_delta = 'response.text.delta'


class RealtimeServerEventResponseTextDelta(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type87 = Field(
        ..., description='The event type, must be `response.text.delta`.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    delta: str = Field(..., description='The text delta.')


class Type88(Enum):
    response_text_done = 'response.text.done'


class RealtimeServerEventResponseTextDone(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type88 = Field(
        ..., description='The event type, must be `response.text.done`.'
    )
    response_id: str = Field(..., description='The ID of the response.')
    item_id: str = Field(..., description='The ID of the item.')
    output_index: int = Field(
        ..., description='The index of the output item in the response.'
    )
    content_index: int = Field(
        ..., description="The index of the content part in the item's content array."
    )
    text: str = Field(..., description='The final text content.')


class Type89(Enum):
    session_created = 'session.created'


class Type90(Enum):
    session_updated = 'session.updated'


class Model12(Enum):
    gpt_4o_realtime_preview = 'gpt-4o-realtime-preview'
    gpt_4o_realtime_preview_2024_10_01 = 'gpt-4o-realtime-preview-2024-10-01'
    gpt_4o_realtime_preview_2024_12_17 = 'gpt-4o-realtime-preview-2024-12-17'
    gpt_4o_mini_realtime_preview = 'gpt-4o-mini-realtime-preview'
    gpt_4o_mini_realtime_preview_2024_12_17 = 'gpt-4o-mini-realtime-preview-2024-12-17'


class InputAudioFormat(Enum):
    pcm16 = 'pcm16'
    g711_ulaw = 'g711_ulaw'
    g711_alaw = 'g711_alaw'


class InputAudioTranscription(BaseModel):
    model: Optional[str] = Field(
        None,
        description='The model to use for transcription, `whisper-1` is the only currently \nsupported model.\n',
    )


class Type91(Enum):
    server_vad = 'server_vad'


class TurnDetection(BaseModel):
    type: Optional[Type91] = Field(
        None,
        description='Type of turn detection, only `server_vad` is currently supported.\n',
    )
    threshold: Optional[float] = Field(
        None,
        description='Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n',
    )
    prefix_padding_ms: Optional[int] = Field(
        None,
        description='Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n',
    )
    silence_duration_ms: Optional[int] = Field(
        None,
        description='Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n',
    )


class Type92(Enum):
    function = 'function'


class Tool1(BaseModel):
    type: Optional[Type92] = Field(
        None, description='The type of the tool, i.e. `function`.'
    )
    name: Optional[str] = Field(None, description='The name of the function.')
    description: Optional[str] = Field(
        None,
        description='The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n',
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None, description='Parameters of the function in JSON Schema.'
    )


class RealtimeSession(BaseModel):
    id: Optional[str] = Field(
        None, description='Unique identifier for the session object.\n'
    )
    modalities: Optional[List[Modality]] = Field(
        None,
        description='The set of modalities the model can respond with. To disable audio,\nset this to ["text"].\n',
    )
    model: Optional[Union[str, Model12]] = Field(
        None, description='The Realtime model used for this session.\n'
    )
    instructions: Optional[str] = Field(
        None,
        description='The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. "be extremely succinct", "act friendly", "here are examples of good \nresponses") and on audio behavior (e.g. "talk quickly", "inject emotion \ninto your voice", "laugh frequently"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n',
    )
    voice: Optional[Voice2] = Field(
        None,
        description='The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n',
    )
    input_audio_format: Optional[InputAudioFormat] = Field(
        None,
        description='The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, \nsingle channel (mono), and little-endian byte order.\n',
    )
    output_audio_format: Optional[OutputAudioFormat] = Field(
        None,
        description='The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n',
    )
    input_audio_transcription: Optional[InputAudioTranscription] = Field(
        None,
        description='Configuration for input audio transcription, defaults to off and can be \nset to `null` to turn off once on. Input audio transcription is not native \nto the model, since the model consumes audio directly. Transcription runs \nasynchronously through Whisper and should be treated as rough guidance \nrather than the representation understood by the model.\n',
    )
    turn_detection: Optional[TurnDetection] = Field(
        None,
        description='Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n',
    )
    tools: Optional[List[Tool1]] = Field(
        None, description='Tools (functions) available to the model.'
    )
    tool_choice: Optional[str] = Field(
        None,
        description='How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n',
    )
    temperature: Optional[float] = Field(
        None,
        description='Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n',
    )
    max_response_output_tokens: Optional[Union[int, MaxResponseOutputTokens]] = Field(
        None,
        description='Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n',
    )


class InputAudioTranscription1(BaseModel):
    model: Optional[str] = Field(
        None,
        description='The model to use for transcription, `whisper-1` is the only currently \nsupported model.\n',
    )
    language: Optional[str] = Field(
        None,
        description='The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format\nwill improve accuracy and latency.\n',
    )
    prompt: Optional[str] = Field(
        None,
        description="An optional text to guide the model's style or continue a previous audio\nsegment. The [prompt](/docs/guides/speech-to-text#prompting) should match\nthe audio language.\n",
    )


class TurnDetection1(BaseModel):
    type: Optional[str] = Field(
        None,
        description='Type of turn detection, only `server_vad` is currently supported.\n',
    )
    threshold: Optional[float] = Field(
        None,
        description='Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n',
    )
    prefix_padding_ms: Optional[int] = Field(
        None,
        description='Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n',
    )
    silence_duration_ms: Optional[int] = Field(
        None,
        description='Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n',
    )
    create_response: Optional[bool] = Field(
        True,
        description='Whether or not to automatically generate a response when VAD is\nenabled. `true` by default.\n',
    )


class Tool2(BaseModel):
    type: Optional[Type92] = Field(
        None, description='The type of the tool, i.e. `function`.'
    )
    name: Optional[str] = Field(None, description='The name of the function.')
    description: Optional[str] = Field(
        None,
        description='The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n',
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None, description='Parameters of the function in JSON Schema.'
    )


class RealtimeSessionCreateRequest(BaseModel):
    modalities: Optional[List[Modality]] = Field(
        None,
        description='The set of modalities the model can respond with. To disable audio,\nset this to ["text"].\n',
    )
    model: Optional[Model12] = Field(
        None, description='The Realtime model used for this session.\n'
    )
    instructions: Optional[str] = Field(
        None,
        description='The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. "be extremely succinct", "act friendly", "here are examples of good \nresponses") and on audio behavior (e.g. "talk quickly", "inject emotion \ninto your voice", "laugh frequently"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n',
    )
    voice: Optional[Voice2] = Field(
        None,
        description='The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n',
    )
    input_audio_format: Optional[InputAudioFormat] = Field(
        None,
        description='The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, \nsingle channel (mono), and little-endian byte order.\n',
    )
    output_audio_format: Optional[OutputAudioFormat] = Field(
        None,
        description='The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n',
    )
    input_audio_transcription: Optional[InputAudioTranscription1] = Field(
        None,
        description='Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [OpenAI Whisper transcription](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as rough guidance rather than the representation understood by the model. The client can optionally set the language and prompt for transcription, these fields will be passed to the Whisper API.\n',
    )
    turn_detection: Optional[TurnDetection1] = Field(
        None,
        description='Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n',
    )
    tools: Optional[List[Tool2]] = Field(
        None, description='Tools (functions) available to the model.'
    )
    tool_choice: Optional[str] = Field(
        None,
        description='How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n',
    )
    temperature: Optional[float] = Field(
        None,
        description='Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n',
    )
    max_response_output_tokens: Optional[Union[int, MaxResponseOutputTokens]] = Field(
        None,
        description='Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n',
    )


class ClientSecret(BaseModel):
    value: str = Field(
        ...,
        description='Ephemeral key usable in client environments to authenticate connections\nto the Realtime API. Use this in client-side environments rather than\na standard API token, which should only be used server-side.\n',
    )
    expires_at: int = Field(
        ...,
        description='Timestamp for when the token expires. Currently, all tokens expire\nafter one minute.\n',
    )


class InputAudioTranscription2(BaseModel):
    model: Optional[str] = Field(
        None,
        description='The model to use for transcription, `whisper-1` is the only currently \nsupported model.\n',
    )


class TurnDetection2(BaseModel):
    type: Optional[str] = Field(
        None,
        description='Type of turn detection, only `server_vad` is currently supported.\n',
    )
    threshold: Optional[float] = Field(
        None,
        description='Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n',
    )
    prefix_padding_ms: Optional[int] = Field(
        None,
        description='Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n',
    )
    silence_duration_ms: Optional[int] = Field(
        None,
        description='Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n',
    )


class Tool3(BaseModel):
    type: Optional[Type92] = Field(
        None, description='The type of the tool, i.e. `function`.'
    )
    name: Optional[str] = Field(None, description='The name of the function.')
    description: Optional[str] = Field(
        None,
        description='The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n',
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None, description='Parameters of the function in JSON Schema.'
    )


class RealtimeSessionCreateResponse(BaseModel):
    client_secret: ClientSecret = Field(
        ..., description='Ephemeral key returned by the API.'
    )
    modalities: Optional[List[Modality]] = Field(
        None,
        description='The set of modalities the model can respond with. To disable audio,\nset this to ["text"].\n',
    )
    instructions: Optional[str] = Field(
        None,
        description='The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. "be extremely succinct", "act friendly", "here are examples of good \nresponses") and on audio behavior (e.g. "talk quickly", "inject emotion \ninto your voice", "laugh frequently"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n',
    )
    voice: Optional[Voice2] = Field(
        None,
        description='The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n',
    )
    input_audio_format: Optional[str] = Field(
        None,
        description='The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n',
    )
    output_audio_format: Optional[str] = Field(
        None,
        description='The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n',
    )
    input_audio_transcription: Optional[InputAudioTranscription2] = Field(
        None,
        description='Configuration for input audio transcription, defaults to off and can be \nset to `null` to turn off once on. Input audio transcription is not native \nto the model, since the model consumes audio directly. Transcription runs \nasynchronously through Whisper and should be treated as rough guidance \nrather than the representation understood by the model.\n',
    )
    turn_detection: Optional[TurnDetection2] = Field(
        None,
        description='Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n',
    )
    tools: Optional[List[Tool3]] = Field(
        None, description='Tools (functions) available to the model.'
    )
    tool_choice: Optional[str] = Field(
        None,
        description='How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n',
    )
    temperature: Optional[float] = Field(
        None,
        description='Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n',
    )
    max_response_output_tokens: Optional[Union[int, MaxResponseOutputTokens]] = Field(
        None,
        description='Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n',
    )


class ReasoningEffort(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class Type95(Enum):
    json_object = 'json_object'


class ResponseFormatJsonObject(BaseModel):
    type: Type95 = Field(
        ..., description='The type of response format being defined: `json_object`'
    )


class Type96(Enum):
    json_schema = 'json_schema'


class ResponseFormatJsonSchemaSchema(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class Type97(Enum):
    text = 'text'


class ResponseFormatText(BaseModel):
    type: Type97 = Field(
        ..., description='The type of response format being defined: `text`'
    )


class RunCompletionUsage(BaseModel):
    completion_tokens: int = Field(
        ..., description='Number of completion tokens used over the course of the run.'
    )
    prompt_tokens: int = Field(
        ..., description='Number of prompt tokens used over the course of the run.'
    )
    total_tokens: int = Field(
        ..., description='Total number of tokens used (prompt + completion).'
    )


class Object48(Enum):
    thread_run = 'thread.run'


class Status9(Enum):
    queued = 'queued'
    in_progress = 'in_progress'
    requires_action = 'requires_action'
    cancelling = 'cancelling'
    cancelled = 'cancelled'
    failed = 'failed'
    completed = 'completed'
    incomplete = 'incomplete'
    expired = 'expired'


class Type98(Enum):
    submit_tool_outputs = 'submit_tool_outputs'


class Code(Enum):
    server_error = 'server_error'
    rate_limit_exceeded = 'rate_limit_exceeded'
    invalid_prompt = 'invalid_prompt'


class LastError(BaseModel):
    code: Code = Field(
        ...,
        description='One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.',
    )
    message: str = Field(..., description='A human-readable description of the error.')


class Reason2(Enum):
    max_completion_tokens = 'max_completion_tokens'
    max_prompt_tokens = 'max_prompt_tokens'


class IncompleteDetails1(BaseModel):
    reason: Optional[Reason2] = Field(
        None,
        description='The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.',
    )


class RunStepCompletionUsage(BaseModel):
    completion_tokens: int = Field(
        ...,
        description='Number of completion tokens used over the course of the run step.',
    )
    prompt_tokens: int = Field(
        ..., description='Number of prompt tokens used over the course of the run step.'
    )
    total_tokens: int = Field(
        ..., description='Total number of tokens used (prompt + completion).'
    )


class Object49(Enum):
    thread_run_step_delta = 'thread.run.step.delta'


class Type99(Enum):
    message_creation = 'message_creation'


class MessageCreation(BaseModel):
    message_id: Optional[str] = Field(
        None, description='The ID of the message that was created by this run step.'
    )


class RunStepDeltaStepDetailsMessageCreationObject(BaseModel):
    type: Type99 = Field(..., description='Always `message_creation`.')
    message_creation: Optional[MessageCreation] = None


class Type100(Enum):
    code_interpreter = 'code_interpreter'


class Type101(Enum):
    image = 'image'


class Image1(BaseModel):
    file_id: Optional[str] = Field(
        None, description='The [file](/docs/api-reference/files) ID of the image.'
    )


class RunStepDeltaStepDetailsToolCallsCodeOutputImageObject(BaseModel):
    index: int = Field(..., description='The index of the output in the outputs array.')
    type: Type101 = Field(..., description='Always `image`.')
    image: Optional[Image1] = None


class Type102(Enum):
    logs = 'logs'


class RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject(BaseModel):
    index: int = Field(..., description='The index of the output in the outputs array.')
    type: Type102 = Field(..., description='Always `logs`.')
    logs: Optional[str] = Field(
        None, description='The text output from the Code Interpreter tool call.'
    )


class Type103(Enum):
    file_search = 'file_search'


class RunStepDeltaStepDetailsToolCallsFileSearchObject(BaseModel):
    index: int = Field(
        ..., description='The index of the tool call in the tool calls array.'
    )
    id: Optional[str] = Field(None, description='The ID of the tool call object.')
    type: Type103 = Field(
        ...,
        description='The type of tool call. This is always going to be `file_search` for this type of tool call.',
    )
    file_search: Dict[str, Any] = Field(
        ..., description='For now, this is always going to be an empty object.'
    )


class Type104(Enum):
    function = 'function'


class Function4(BaseModel):
    name: Optional[str] = Field(None, description='The name of the function.')
    arguments: Optional[str] = Field(
        None, description='The arguments passed to the function.'
    )
    output: Optional[str] = Field(
        None,
        description='The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.',
    )


class RunStepDeltaStepDetailsToolCallsFunctionObject(BaseModel):
    index: int = Field(
        ..., description='The index of the tool call in the tool calls array.'
    )
    id: Optional[str] = Field(None, description='The ID of the tool call object.')
    type: Type104 = Field(
        ...,
        description='The type of tool call. This is always going to be `function` for this type of tool call.',
    )
    function: Optional[Function4] = Field(
        None, description='The definition of the function that was called.'
    )


class Type105(Enum):
    tool_calls = 'tool_calls'


class Type106(Enum):
    message_creation = 'message_creation'


class MessageCreation1(BaseModel):
    message_id: str = Field(
        ..., description='The ID of the message that was created by this run step.'
    )


class RunStepDetailsMessageCreationObject(BaseModel):
    type: Type106 = Field(..., description='Always `message_creation`.')
    message_creation: MessageCreation1


class Type107(Enum):
    code_interpreter = 'code_interpreter'


class Type108(Enum):
    image = 'image'


class Image2(BaseModel):
    file_id: str = Field(
        ..., description='The [file](/docs/api-reference/files) ID of the image.'
    )


class RunStepDetailsToolCallsCodeOutputImageObject(BaseModel):
    type: Type108 = Field(..., description='Always `image`.')
    image: Image2


class Type109(Enum):
    logs = 'logs'


class RunStepDetailsToolCallsCodeOutputLogsObject(BaseModel):
    type: Type109 = Field(..., description='Always `logs`.')
    logs: str = Field(
        ..., description='The text output from the Code Interpreter tool call.'
    )


class Type110(Enum):
    file_search = 'file_search'


class Ranker1(Enum):
    default_2024_08_21 = 'default_2024_08_21'


class RunStepDetailsToolCallsFileSearchRankingOptionsObject(BaseModel):
    ranker: Ranker1 = Field(..., description='The ranker used for the file search.')
    score_threshold: confloat(ge=0.0, le=1.0) = Field(
        ...,
        description='The score threshold for the file search. All values must be a floating point number between 0 and 1.',
    )


class Type111(Enum):
    text = 'text'


class ContentItem2(BaseModel):
    type: Optional[Type111] = Field(None, description='The type of the content.')
    text: Optional[str] = Field(None, description='The text content of the file.')


class RunStepDetailsToolCallsFileSearchResultObject(BaseModel):
    file_id: str = Field(
        ..., description='The ID of the file that result was found in.'
    )
    file_name: str = Field(
        ..., description='The name of the file that result was found in.'
    )
    score: confloat(ge=0.0, le=1.0) = Field(
        ...,
        description='The score of the result. All values must be a floating point number between 0 and 1.',
    )
    content: Optional[List[ContentItem2]] = Field(
        None,
        description='The content of the result that was found. The content is only included if requested via the include query parameter.',
    )


class Type112(Enum):
    function = 'function'


class Function5(BaseModel):
    name: str = Field(..., description='The name of the function.')
    arguments: str = Field(..., description='The arguments passed to the function.')
    output: str = Field(
        ...,
        description='The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.',
    )


class RunStepDetailsToolCallsFunctionObject(BaseModel):
    id: str = Field(..., description='The ID of the tool call object.')
    type: Type112 = Field(
        ...,
        description='The type of tool call. This is always going to be `function` for this type of tool call.',
    )
    function: Function5 = Field(
        ..., description='The definition of the function that was called.'
    )


class Type113(Enum):
    tool_calls = 'tool_calls'


class Object50(Enum):
    thread_run_step = 'thread.run.step'


class Type114(Enum):
    message_creation = 'message_creation'
    tool_calls = 'tool_calls'


class Status10(Enum):
    in_progress = 'in_progress'
    cancelled = 'cancelled'
    failed = 'failed'
    completed = 'completed'
    expired = 'expired'


class Code1(Enum):
    server_error = 'server_error'
    rate_limit_exceeded = 'rate_limit_exceeded'


class LastError1(BaseModel):
    code: Code1 = Field(
        ..., description='One of `server_error` or `rate_limit_exceeded`.'
    )
    message: str = Field(..., description='A human-readable description of the error.')


class Event7(Enum):
    thread_run_step_created = 'thread.run.step.created'


class Event8(Enum):
    thread_run_step_in_progress = 'thread.run.step.in_progress'


class Event9(Enum):
    thread_run_step_delta = 'thread.run.step.delta'


class Event10(Enum):
    thread_run_step_completed = 'thread.run.step.completed'


class Event11(Enum):
    thread_run_step_failed = 'thread.run.step.failed'


class Event12(Enum):
    thread_run_step_cancelled = 'thread.run.step.cancelled'


class Event13(Enum):
    thread_run_step_expired = 'thread.run.step.expired'


class Event14(Enum):
    thread_run_created = 'thread.run.created'


class Event15(Enum):
    thread_run_queued = 'thread.run.queued'


class Event16(Enum):
    thread_run_in_progress = 'thread.run.in_progress'


class Event17(Enum):
    thread_run_requires_action = 'thread.run.requires_action'


class Event18(Enum):
    thread_run_completed = 'thread.run.completed'


class Event19(Enum):
    thread_run_incomplete = 'thread.run.incomplete'


class Event20(Enum):
    thread_run_failed = 'thread.run.failed'


class Event21(Enum):
    thread_run_cancelling = 'thread.run.cancelling'


class Event22(Enum):
    thread_run_cancelled = 'thread.run.cancelled'


class Event23(Enum):
    thread_run_expired = 'thread.run.expired'


class Type115(Enum):
    function = 'function'


class Function6(BaseModel):
    name: str = Field(..., description='The name of the function.')
    arguments: str = Field(
        ...,
        description='The arguments that the model expects you to pass to the function.',
    )


class RunToolCallObject(BaseModel):
    id: str = Field(
        ...,
        description='The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.',
    )
    type: Type115 = Field(
        ...,
        description='The type of tool call the output is required for. For now, this is always `function`.',
    )
    function: Function6 = Field(..., description='The function definition.')


class StaticChunkingStrategy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    max_chunk_size_tokens: conint(ge=100, le=4096) = Field(
        ...,
        description='The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.',
    )
    chunk_overlap_tokens: int = Field(
        ...,
        description='The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n',
    )


class Type116(Enum):
    static = 'static'


class StaticChunkingStrategyRequestParam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type116 = Field(..., description='Always `static`.')
    static: StaticChunkingStrategy


class StaticChunkingStrategyResponseParam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type116 = Field(..., description='Always `static`.')
    static: StaticChunkingStrategy


class ToolOutput(BaseModel):
    tool_call_id: Optional[str] = Field(
        None,
        description='The ID of the tool call in the `required_action` object within the run object the output is being submitted for.',
    )
    output: Optional[str] = Field(
        None,
        description='The output of the tool call to be submitted to continue the run.',
    )


class SubmitToolOutputsRunRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    tool_outputs: List[ToolOutput] = Field(
        ..., description='A list of tools for which the outputs are being submitted.'
    )
    stream: Optional[bool] = Field(
        None,
        description='If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n',
    )


class Object51(Enum):
    thread = 'thread'


class ToolResources6(BaseModel):
    code_interpreter: Optional[CodeInterpreter5] = None
    file_search: Optional[FileSearch8] = None


class ThreadObject(BaseModel):
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    object: Object51 = Field(
        ..., description='The object type, which is always `thread`.'
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the thread was created.',
    )
    tool_resources: ToolResources6 = Field(
        ...,
        description="A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    metadata: Metadata


class Event24(Enum):
    thread_created = 'thread.created'


class ThreadStreamEvent1(BaseModel):
    enabled: Optional[bool] = Field(
        None, description='Whether to enable input audio transcription.'
    )
    event: Event24
    data: ThreadObject


class ThreadStreamEvent(RootModel[ThreadStreamEvent1]):
    root: ThreadStreamEvent1


class TranscriptionSegment(BaseModel):
    id: int = Field(..., description='Unique identifier of the segment.')
    seek: int = Field(..., description='Seek offset of the segment.')
    start: float = Field(..., description='Start time of the segment in seconds.')
    end: float = Field(..., description='End time of the segment in seconds.')
    text: str = Field(..., description='Text content of the segment.')
    tokens: List[int] = Field(
        ..., description='Array of token IDs for the text content.'
    )
    temperature: float = Field(
        ..., description='Temperature parameter used for generating the segment.'
    )
    avg_logprob: float = Field(
        ...,
        description='Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.',
    )
    compression_ratio: float = Field(
        ...,
        description='Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.',
    )
    no_speech_prob: float = Field(
        ...,
        description='Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.',
    )


class TranscriptionWord(BaseModel):
    word: str = Field(..., description='The text content of the word.')
    start: float = Field(..., description='Start time of the word in seconds.')
    end: float = Field(..., description='End time of the word in seconds.')


class Type118(Enum):
    auto = 'auto'
    last_messages = 'last_messages'


class TruncationObject(BaseModel):
    type: Type118 = Field(
        ...,
        description='The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.',
    )
    last_messages: Optional[conint(ge=1)] = Field(
        None,
        description='The number of most recent messages from the thread when constructing the context for the run.',
    )


class Status11(Enum):
    pending = 'pending'
    completed = 'completed'
    cancelled = 'cancelled'
    expired = 'expired'


class Object52(Enum):
    upload = 'upload'


class Upload(BaseModel):
    id: str = Field(
        ...,
        description='The Upload unique identifier, which can be referenced in API endpoints.',
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the Upload was created.',
    )
    filename: str = Field(..., description='The name of the file to be uploaded.')
    bytes: int = Field(..., description='The intended number of bytes to be uploaded.')
    purpose: str = Field(
        ...,
        description='The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.',
    )
    status: Status11 = Field(..., description='The status of the Upload.')
    expires_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the Upload was created.',
    )
    object: Optional[Object52] = Field(
        None, description='The object type, which is always "upload".'
    )
    file: Optional[OpenAIFile] = None


class Object53(Enum):
    upload_part = 'upload.part'


class UploadPart(BaseModel):
    id: str = Field(
        ...,
        description='The upload Part unique identifier, which can be referenced in API endpoints.',
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the Part was created.',
    )
    upload_id: str = Field(
        ..., description='The ID of the Upload object that this Part was added to.'
    )
    object: Object53 = Field(
        ..., description='The object type, which is always `upload.part`.'
    )


class Object54(Enum):
    organization_usage_audio_speeches_result = (
        'organization.usage.audio_speeches.result'
    )


class UsageAudioSpeechesResult(BaseModel):
    object: Object54
    characters: int = Field(..., description='The number of characters processed.')
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    project_id: Optional[str] = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    user_id: Optional[str] = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )
    api_key_id: Optional[str] = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    model: Optional[str] = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )


class Object55(Enum):
    organization_usage_audio_transcriptions_result = (
        'organization.usage.audio_transcriptions.result'
    )


class UsageAudioTranscriptionsResult(BaseModel):
    object: Object55
    seconds: int = Field(..., description='The number of seconds processed.')
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    project_id: Optional[str] = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    user_id: Optional[str] = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )
    api_key_id: Optional[str] = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    model: Optional[str] = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )


class Object56(Enum):
    organization_usage_code_interpreter_sessions_result = (
        'organization.usage.code_interpreter_sessions.result'
    )


class UsageCodeInterpreterSessionsResult(BaseModel):
    object: Object56
    num_sessions: Optional[int] = Field(
        None, description='The number of code interpreter sessions.'
    )
    project_id: Optional[str] = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )


class Object57(Enum):
    organization_usage_completions_result = 'organization.usage.completions.result'


class UsageCompletionsResult(BaseModel):
    object: Object57
    input_tokens: int = Field(
        ...,
        description='The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens.',
    )
    input_cached_tokens: Optional[int] = Field(
        None,
        description='The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens.',
    )
    output_tokens: int = Field(
        ...,
        description='The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens.',
    )
    input_audio_tokens: Optional[int] = Field(
        None,
        description='The aggregated number of audio input tokens used, including cached tokens.',
    )
    output_audio_tokens: Optional[int] = Field(
        None, description='The aggregated number of audio output tokens used.'
    )
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    project_id: Optional[str] = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    user_id: Optional[str] = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )
    api_key_id: Optional[str] = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    model: Optional[str] = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )
    batch: Optional[bool] = Field(
        None,
        description='When `group_by=batch`, this field tells whether the grouped usage result is batch or not.',
    )


class Object58(Enum):
    organization_usage_embeddings_result = 'organization.usage.embeddings.result'


class UsageEmbeddingsResult(BaseModel):
    object: Object58
    input_tokens: int = Field(
        ..., description='The aggregated number of input tokens used.'
    )
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    project_id: Optional[str] = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    user_id: Optional[str] = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )
    api_key_id: Optional[str] = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    model: Optional[str] = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )


class Object59(Enum):
    organization_usage_images_result = 'organization.usage.images.result'


class UsageImagesResult(BaseModel):
    object: Object59
    images: int = Field(..., description='The number of images processed.')
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    source: Optional[str] = Field(
        None,
        description='When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`.',
    )
    size: Optional[str] = Field(
        None,
        description='When `group_by=size`, this field provides the image size of the grouped usage result.',
    )
    project_id: Optional[str] = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    user_id: Optional[str] = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )
    api_key_id: Optional[str] = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    model: Optional[str] = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )


class Object60(Enum):
    organization_usage_moderations_result = 'organization.usage.moderations.result'


class UsageModerationsResult(BaseModel):
    object: Object60
    input_tokens: int = Field(
        ..., description='The aggregated number of input tokens used.'
    )
    num_model_requests: int = Field(
        ..., description='The count of requests made to the model.'
    )
    project_id: Optional[str] = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )
    user_id: Optional[str] = Field(
        None,
        description='When `group_by=user_id`, this field provides the user ID of the grouped usage result.',
    )
    api_key_id: Optional[str] = Field(
        None,
        description='When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.',
    )
    model: Optional[str] = Field(
        None,
        description='When `group_by=model`, this field provides the model name of the grouped usage result.',
    )


class Object61(Enum):
    page = 'page'


class Object62(Enum):
    bucket = 'bucket'


class Object63(Enum):
    organization_usage_vector_stores_result = 'organization.usage.vector_stores.result'


class UsageVectorStoresResult(BaseModel):
    object: Object63
    usage_bytes: int = Field(..., description='The vector stores usage in bytes.')
    project_id: Optional[str] = Field(
        None,
        description='When `group_by=project_id`, this field provides the project ID of the grouped usage result.',
    )


class Object64(Enum):
    organization_user = 'organization.user'


class Role22(Enum):
    owner = 'owner'
    reader = 'reader'


class User(BaseModel):
    object: Object64 = Field(
        ..., description='The object type, which is always `organization.user`'
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    name: str = Field(..., description='The name of the user')
    email: str = Field(..., description='The email address of the user')
    role: Role22 = Field(..., description='`owner` or `reader`')
    added_at: int = Field(
        ..., description='The Unix timestamp (in seconds) of when the user was added.'
    )


class Object65(Enum):
    organization_user_deleted = 'organization.user.deleted'


class UserDeleteResponse(BaseModel):
    object: Object65
    id: str
    deleted: bool


class Object66(Enum):
    list = 'list'


class UserListResponse(BaseModel):
    object: Object66
    data: List[User]
    first_id: str
    last_id: str
    has_more: bool


class UserRoleUpdateRequest(BaseModel):
    role: Role22 = Field(..., description='`owner` or `reader`')


class Anchor(Enum):
    last_active_at = 'last_active_at'


class VectorStoreExpirationAfter(BaseModel):
    anchor: Anchor = Field(
        ...,
        description='Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.',
    )
    days: conint(ge=1, le=365) = Field(
        ...,
        description='The number of days after the anchor time that the vector store will expire.',
    )


class Object67(Enum):
    vector_store_files_batch = 'vector_store.files_batch'


class Status12(Enum):
    in_progress = 'in_progress'
    completed = 'completed'
    cancelled = 'cancelled'
    failed = 'failed'


class FileCounts(BaseModel):
    in_progress: int = Field(
        ..., description='The number of files that are currently being processed.'
    )
    completed: int = Field(
        ..., description='The number of files that have been processed.'
    )
    failed: int = Field(
        ..., description='The number of files that have failed to process.'
    )
    cancelled: int = Field(..., description='The number of files that where cancelled.')
    total: int = Field(..., description='The total number of files.')


class VectorStoreFileBatchObject(BaseModel):
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    object: Object67 = Field(
        ..., description='The object type, which is always `vector_store.file_batch`.'
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the vector store files batch was created.',
    )
    vector_store_id: str = Field(
        ...,
        description='The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.',
    )
    status: Status12 = Field(
        ...,
        description='The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.',
    )
    file_counts: FileCounts


class Object68(Enum):
    vector_store_file = 'vector_store.file'


class Code2(Enum):
    server_error = 'server_error'
    unsupported_file = 'unsupported_file'
    invalid_file = 'invalid_file'


class LastError2(BaseModel):
    code: Code2 = Field(
        ..., description='One of `server_error` or `rate_limit_exceeded`.'
    )
    message: str = Field(..., description='A human-readable description of the error.')


class VectorStoreFileObject(BaseModel):
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    object: Object68 = Field(
        ..., description='The object type, which is always `vector_store.file`.'
    )
    usage_bytes: int = Field(
        ...,
        description='The total vector store usage in bytes. Note that this may be different from the original file size.',
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the vector store file was created.',
    )
    vector_store_id: str = Field(
        ...,
        description='The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.',
    )
    status: Status12 = Field(
        ...,
        description='The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.',
    )
    last_error: LastError2 = Field(
        ...,
        description='The last error associated with this vector store file. Will be `null` if there are no errors.',
    )
    chunking_strategy: Optional[
        Union[StaticChunkingStrategyResponseParam, OtherChunkingStrategyResponseParam]
    ] = Field(None, description='The strategy used to chunk the file.')


class Object69(Enum):
    vector_store = 'vector_store'


class FileCounts1(BaseModel):
    in_progress: int = Field(
        ..., description='The number of files that are currently being processed.'
    )
    completed: int = Field(
        ..., description='The number of files that have been successfully processed.'
    )
    failed: int = Field(
        ..., description='The number of files that have failed to process.'
    )
    cancelled: int = Field(..., description='The number of files that were cancelled.')
    total: int = Field(..., description='The total number of files.')


class Status14(Enum):
    expired = 'expired'
    in_progress = 'in_progress'
    completed = 'completed'


class VectorStoreObject(BaseModel):
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    object: Object69 = Field(
        ..., description='The object type, which is always `vector_store`.'
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the vector store was created.',
    )
    name: str = Field(..., description='The name of the vector store.')
    usage_bytes: int = Field(
        ...,
        description='The total number of bytes used by the files in the vector store.',
    )
    file_counts: FileCounts1
    status: Status14 = Field(
        ...,
        description='The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.',
    )
    expires_after: Optional[VectorStoreExpirationAfter] = None
    expires_at: Optional[int] = Field(
        None,
        description='The Unix timestamp (in seconds) for when the vector store will expire.',
    )
    last_active_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the vector store was last active.',
    )
    metadata: Metadata


class Order(Enum):
    asc = 'asc'
    desc = 'desc'


class Endpoint(Enum):
    field_v1_chat_completions = '/v1/chat/completions'
    field_v1_embeddings = '/v1/embeddings'
    field_v1_completions = '/v1/completions'


class CompletionWindow(Enum):
    field_24h = '24h'


class BatchesPostRequest(BaseModel):
    input_file_id: str = Field(
        ...,
        description='The ID of an uploaded file that contains requests for the new batch.\n\nSee [upload file](/docs/api-reference/files/create) for how to upload a file.\n\nYour input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size.\n',
    )
    endpoint: Endpoint = Field(
        ...,
        description='The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.',
    )
    completion_window: CompletionWindow = Field(
        ...,
        description='The time frame within which the batch should be processed. Currently only `24h` is supported.',
    )
    metadata: Optional[Metadata] = None


class OrganizationAdminApiKeysPostRequest(BaseModel):
    name: str = Field(..., examples=['New Admin Key'])


class OrganizationAdminApiKeysKeyIdDeleteResponse(BaseModel):
    id: Optional[str] = Field(None, examples=['key_abc'])
    object: Optional[str] = Field(None, examples=['organization.admin_api_key.deleted'])
    deleted: Optional[bool] = Field(None, examples=[True])


class EffectiveAt(BaseModel):
    gt: Optional[int] = Field(
        None,
        description='Return only events whose `effective_at` (Unix seconds) is greater than this value.',
    )
    gte: Optional[int] = Field(
        None,
        description='Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.',
    )
    lt: Optional[int] = Field(
        None,
        description='Return only events whose `effective_at` (Unix seconds) is less than this value.',
    )
    lte: Optional[int] = Field(
        None,
        description='Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.',
    )


class ProjectIds(RootModel[List[str]]):
    root: List[str]


class EventTypes(RootModel[List[AuditLogEventType]]):
    root: List[AuditLogEventType]


class ActorIds(RootModel[List[str]]):
    root: List[str]


class ActorEmails(RootModel[List[str]]):
    root: List[str]


class ResourceIds(RootModel[List[str]]):
    root: List[str]


class BucketWidth(Enum):
    field_1d = '1d'


class GroupByEnum(Enum):
    project_id = 'project_id'
    line_item = 'line_item'


class GroupBy(RootModel[List[GroupByEnum]]):
    root: List[GroupByEnum]


class BucketWidth2(Enum):
    field_1m = '1m'
    field_1h = '1h'
    field_1d = '1d'


class GroupByEnum2(Enum):
    project_id = 'project_id'
    user_id = 'user_id'
    api_key_id = 'api_key_id'
    model = 'model'


class UserIds(RootModel[List[str]]):
    root: List[str]


class ApiKeyIds(RootModel[List[str]]):
    root: List[str]


class Models(RootModel[List[str]]):
    root: List[str]


class GroupBy1(RootModel[List[GroupByEnum2]]):
    root: List[GroupByEnum2]


class GroupBy2(RootModel[List[GroupByEnum2]]):
    root: List[GroupByEnum2]


class GroupByEnum6(Enum):
    project_id = 'project_id'


class GroupBy3(RootModel[List[GroupByEnum6]]):
    root: List[GroupByEnum6]


class GroupByEnum8(Enum):
    project_id = 'project_id'
    user_id = 'user_id'
    api_key_id = 'api_key_id'
    model = 'model'
    batch = 'batch'


class GroupBy4(RootModel[List[GroupByEnum8]]):
    root: List[GroupByEnum8]


class GroupByEnum10(Enum):
    project_id = 'project_id'
    user_id = 'user_id'
    api_key_id = 'api_key_id'
    model = 'model'


class GroupBy5(RootModel[List[GroupByEnum10]]):
    root: List[GroupByEnum10]


class Source(Enum):
    image_generation = 'image.generation'
    image_edit = 'image.edit'
    image_variation = 'image.variation'


class Size3(Enum):
    field_256x256 = '256x256'
    field_512x512 = '512x512'
    field_1024x1024 = '1024x1024'
    field_1792x1792 = '1792x1792'
    field_1024x1792 = '1024x1792'


class GroupByEnum12(Enum):
    project_id = 'project_id'
    user_id = 'user_id'
    api_key_id = 'api_key_id'
    model = 'model'
    size = 'size'
    source = 'source'


class Sources(RootModel[List[Source]]):
    root: List[Source]


class Sizes(RootModel[List[Size3]]):
    root: List[Size3]


class GroupBy6(RootModel[List[GroupByEnum12]]):
    root: List[GroupByEnum12]


class GroupByEnum14(Enum):
    project_id = 'project_id'
    user_id = 'user_id'
    api_key_id = 'api_key_id'
    model = 'model'


class GroupBy7(RootModel[List[GroupByEnum14]]):
    root: List[GroupByEnum14]


class GroupByEnum16(Enum):
    project_id = 'project_id'


class GroupBy8(RootModel[List[GroupByEnum16]]):
    root: List[GroupByEnum16]


class Emails(RootModel[List[str]]):
    root: List[str]


class IncludeEnum(Enum):
    step_details_tool_calls____file_search_results____content = (
        'step_details.tool_calls[*].file_search.results[*].content'
    )


class Include(RootModel[List[IncludeEnum]]):
    root: List[IncludeEnum]


class Include1(RootModel[List[IncludeEnum]]):
    root: List[IncludeEnum]


class Include2(RootModel[List[IncludeEnum]]):
    root: List[IncludeEnum]


class Filter(Enum):
    in_progress = 'in_progress'
    completed = 'completed'
    failed = 'failed'
    cancelled = 'cancelled'


class FileSearch1(BaseModel):
    max_num_results: Optional[conint(ge=1, le=50)] = Field(
        None,
        description='The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n',
    )
    ranking_options: Optional[FileSearchRankingOptions] = None


class AssistantToolsFileSearch(BaseModel):
    type: Type1 = Field(
        ..., description='The type of tool being defined: `file_search`'
    )
    file_search: Optional[FileSearch1] = Field(
        None, description='Overrides for the file search tool.'
    )


class AssistantsApiToolChoiceOption(
    RootModel[Union[AssistantsApiToolChoiceOption1, AssistantsNamedToolChoice]]
):
    root: Union[AssistantsApiToolChoiceOption1, AssistantsNamedToolChoice] = Field(
        ...,
        description='Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.\n',
    )


class AuditLogActorApiKey(BaseModel):
    id: Optional[str] = Field(None, description='The tracking id of the API key.')
    type: Optional[Type6] = Field(
        None,
        description='The type of API key. Can be either `user` or `service_account`.',
    )
    user: Optional[AuditLogActorUser] = None
    service_account: Optional[AuditLogActorServiceAccount] = None


class AuditLogActorSession(BaseModel):
    user: Optional[AuditLogActorUser] = None
    ip_address: Optional[str] = Field(
        None, description='The IP address from which the action was performed.'
    )


class Batch(BaseModel):
    id: str
    object: Object1 = Field(
        ..., description='The object type, which is always `batch`.'
    )
    endpoint: str = Field(..., description='The OpenAI API endpoint used by the batch.')
    errors: Optional[Errors] = None
    input_file_id: str = Field(
        ..., description='The ID of the input file for the batch.'
    )
    completion_window: str = Field(
        ..., description='The time frame within which the batch should be processed.'
    )
    status: Status = Field(..., description='The current status of the batch.')
    output_file_id: Optional[str] = Field(
        None,
        description='The ID of the file containing the outputs of successfully executed requests.',
    )
    error_file_id: Optional[str] = Field(
        None,
        description='The ID of the file containing the outputs of requests with errors.',
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the batch was created.',
    )
    in_progress_at: Optional[int] = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch started processing.',
    )
    expires_at: Optional[int] = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch will expire.',
    )
    finalizing_at: Optional[int] = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch started finalizing.',
    )
    completed_at: Optional[int] = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch was completed.',
    )
    failed_at: Optional[int] = Field(
        None, description='The Unix timestamp (in seconds) for when the batch failed.'
    )
    expired_at: Optional[int] = Field(
        None, description='The Unix timestamp (in seconds) for when the batch expired.'
    )
    cancelling_at: Optional[int] = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch started cancelling.',
    )
    cancelled_at: Optional[int] = Field(
        None,
        description='The Unix timestamp (in seconds) for when the batch was cancelled.',
    )
    request_counts: Optional[RequestCounts] = Field(
        None, description='The request counts for different statuses within the batch.'
    )
    metadata: Optional[Metadata] = None


class ChatCompletionFunctions(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of what the function does, used by the model to choose when and how to call the function.',
    )
    name: str = Field(
        ...,
        description='The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.',
    )
    parameters: Optional[FunctionParameters] = None


class ChatCompletionRequestAssistantMessageContentPart(
    RootModel[
        Union[
            ChatCompletionRequestMessageContentPartText,
            ChatCompletionRequestMessageContentPartRefusal,
        ]
    ]
):
    root: Union[
        ChatCompletionRequestMessageContentPartText,
        ChatCompletionRequestMessageContentPartRefusal,
    ]


class ChatCompletionRequestDeveloperMessage(BaseModel):
    content: Union[str, List[ChatCompletionRequestMessageContentPartText]] = Field(
        ..., description='The contents of the developer message.'
    )
    role: Role1 = Field(
        ..., description='The role of the messages author, in this case `developer`.'
    )
    name: Optional[str] = Field(
        None,
        description='An optional name for the participant. Provides the model information to differentiate between participants of the same role.',
    )


class ChatCompletionRequestSystemMessage(BaseModel):
    content: Union[str, List[ChatCompletionRequestSystemMessageContentPart]] = Field(
        ..., description='The contents of the system message.'
    )
    role: Role3 = Field(
        ..., description='The role of the messages author, in this case `system`.'
    )
    name: Optional[str] = Field(
        None,
        description='An optional name for the participant. Provides the model information to differentiate between participants of the same role.',
    )


class ChatCompletionRequestToolMessage(BaseModel):
    role: Role4 = Field(
        ..., description='The role of the messages author, in this case `tool`.'
    )
    content: Union[str, List[ChatCompletionRequestToolMessageContentPart]] = Field(
        ..., description='The contents of the tool message.'
    )
    tool_call_id: str = Field(
        ..., description='Tool call that this message is responding to.'
    )


class ChatCompletionRequestUserMessage(BaseModel):
    content: Union[str, List[ChatCompletionRequestUserMessageContentPart]] = Field(
        ..., description='The contents of the user message.\n'
    )
    role: Role5 = Field(
        ..., description='The role of the messages author, in this case `user`.'
    )
    name: Optional[str] = Field(
        None,
        description='An optional name for the participant. Provides the model information to differentiate between participants of the same role.',
    )


class ChunkingStrategyRequestParam(
    RootModel[
        Union[AutoChunkingStrategyRequestParam, StaticChunkingStrategyRequestParam]
    ]
):
    root: Union[
        AutoChunkingStrategyRequestParam, StaticChunkingStrategyRequestParam
    ] = Field(
        ...,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.',
    )


class VectorStore(BaseModel):
    file_ids: Optional[List[str]] = Field(
        None,
        description='A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n',
        max_length=10000,
    )
    chunking_strategy: Optional[Union[ChunkingStrategy, ChunkingStrategy1]] = Field(
        None,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.',
    )
    metadata: Optional[Metadata] = None


class FileSearch2(BaseModel):
    vector_store_ids: List[str] = Field(
        ...,
        description='The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )
    vector_stores: Optional[List[VectorStore]] = Field(
        None,
        description='A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )


class VectorStore1(BaseModel):
    file_ids: Optional[List[str]] = Field(
        None,
        description='A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n',
        max_length=10000,
    )
    chunking_strategy: Optional[Union[ChunkingStrategy2, ChunkingStrategy3]] = Field(
        None,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.',
    )
    metadata: Optional[Metadata] = None


class FileSearch3(BaseModel):
    vector_store_ids: Optional[List[str]] = Field(
        None,
        description='The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )
    vector_stores: List[VectorStore1] = Field(
        ...,
        description='A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n',
        max_length=1,
    )


class ToolResources1(BaseModel):
    code_interpreter: Optional[CodeInterpreter1] = None
    file_search: Optional[Union[FileSearch2, FileSearch3]] = None


class CreateEmbeddingResponse(BaseModel):
    data: List[Embedding] = Field(
        ..., description='The list of embeddings generated by the model.'
    )
    model: str = Field(
        ..., description='The name of the model used to generate the embedding.'
    )
    object: Object7 = Field(..., description='The object type, which is always "list".')
    usage: Usage1 = Field(..., description='The usage information for the request.')


class CreateMessageRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    role: Role8 = Field(
        ...,
        description='The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n',
    )
    content: Union[
        str,
        List[
            Union[
                MessageContentImageFileObject,
                MessageContentImageUrlObject,
                MessageRequestContentTextObject,
            ]
        ],
    ]
    attachments: Optional[List[Attachment]] = Field(
        None,
        description='A list of files attached to the message, and the tools they should be added to.',
    )
    metadata: Optional[Metadata] = None


class VectorStore2(BaseModel):
    file_ids: Optional[List[str]] = Field(
        None,
        description='A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n',
        max_length=10000,
    )
    chunking_strategy: Optional[Union[ChunkingStrategy4, ChunkingStrategy5]] = Field(
        None,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.',
    )
    metadata: Optional[Metadata] = None


class FileSearch5(BaseModel):
    vector_store_ids: List[str] = Field(
        ...,
        description='The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n',
        max_length=1,
    )
    vector_stores: Optional[List[VectorStore2]] = Field(
        None,
        description='A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n',
        max_length=1,
    )


class VectorStore3(BaseModel):
    file_ids: Optional[List[str]] = Field(
        None,
        description='A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n',
        max_length=10000,
    )
    chunking_strategy: Optional[Union[ChunkingStrategy6, ChunkingStrategy7]] = Field(
        None,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.',
    )
    metadata: Optional[Metadata] = None


class FileSearch6(BaseModel):
    vector_store_ids: Optional[List[str]] = Field(
        None,
        description='The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n',
        max_length=1,
    )
    vector_stores: List[VectorStore3] = Field(
        ...,
        description='A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n',
        max_length=1,
    )


class ToolResources3(BaseModel):
    code_interpreter: Optional[CodeInterpreter1] = None
    file_search: Optional[Union[FileSearch5, FileSearch6]] = None


class CreateThreadRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    messages: Optional[List[CreateMessageRequest]] = Field(
        None,
        description='A list of [messages](/docs/api-reference/messages) to start the thread with.',
    )
    tool_resources: Optional[ToolResources3] = Field(
        None,
        description="A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    metadata: Optional[Metadata] = None


class CreateTranscriptionResponseVerboseJson(BaseModel):
    language: str = Field(..., description='The language of the input audio.')
    duration: float = Field(..., description='The duration of the input audio.')
    text: str = Field(..., description='The transcribed text.')
    words: Optional[List[TranscriptionWord]] = Field(
        None, description='Extracted words and their corresponding timestamps.'
    )
    segments: Optional[List[TranscriptionSegment]] = Field(
        None,
        description='Segments of the transcribed text and their corresponding details.',
    )


class CreateTranslationResponseVerboseJson(BaseModel):
    language: str = Field(
        ..., description='The language of the output translation (always `english`).'
    )
    duration: float = Field(..., description='The duration of the input audio.')
    text: str = Field(..., description='The translated text.')
    segments: Optional[List[TranscriptionSegment]] = Field(
        None,
        description='Segments of the translated text and their corresponding details.',
    )


class CreateVectorStoreFileBatchRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file_ids: List[str] = Field(
        ...,
        description='A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.',
        max_length=500,
        min_length=1,
    )
    chunking_strategy: Optional[ChunkingStrategyRequestParam] = None


class CreateVectorStoreFileRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file_id: str = Field(
        ...,
        description='A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.',
    )
    chunking_strategy: Optional[ChunkingStrategyRequestParam] = None


class CreateVectorStoreRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    file_ids: Optional[List[str]] = Field(
        None,
        description='A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.',
        max_length=500,
    )
    name: Optional[str] = Field(None, description='The name of the vector store.')
    expires_after: Optional[VectorStoreExpirationAfter] = None
    chunking_strategy: Optional[
        Union[AutoChunkingStrategyRequestParam, StaticChunkingStrategyRequestParam]
    ] = Field(
        None,
        description='The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.',
    )
    metadata: Optional[Metadata] = None


class FineTuneMethod(BaseModel):
    type: Optional[Type27] = Field(
        None, description='The type of method. Is either `supervised` or `dpo`.'
    )
    supervised: Optional[FineTuneSupervisedMethod] = None
    dpo: Optional[FineTuneDPOMethod] = None


class FineTuningJob(BaseModel):
    id: str = Field(
        ...,
        description='The object identifier, which can be referenced in the API endpoints.',
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the fine-tuning job was created.',
    )
    error: Error2 = Field(
        ...,
        description='For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.',
    )
    fine_tuned_model: str = Field(
        ...,
        description='The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.',
    )
    finished_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.',
    )
    hyperparameters: Hyperparameters3 = Field(
        ...,
        description='The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.',
    )
    model: str = Field(..., description='The base model that is being fine-tuned.')
    object: Object15 = Field(
        ..., description='The object type, which is always "fine_tuning.job".'
    )
    organization_id: str = Field(
        ..., description='The organization that owns the fine-tuning job.'
    )
    result_files: List[str] = Field(
        ...,
        description='The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).',
    )
    status: Status1 = Field(
        ...,
        description='The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.',
    )
    trained_tokens: int = Field(
        ...,
        description='The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.',
    )
    training_file: str = Field(
        ...,
        description='The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).',
    )
    validation_file: str = Field(
        ...,
        description='The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).',
    )
    integrations: Optional[List[FineTuningIntegration]] = Field(
        None,
        description='A list of integrations to enable for this fine-tuning job.',
        max_length=5,
    )
    seed: int = Field(..., description='The seed used for the fine-tuning job.')
    estimated_finish: Optional[int] = Field(
        None,
        description='The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.',
    )
    method: Optional[FineTuneMethod] = None


class FunctionObject(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of what the function does, used by the model to choose when and how to call the function.',
    )
    name: str = Field(
        ...,
        description='The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.',
    )
    parameters: Optional[FunctionParameters] = None
    strict: Optional[bool] = Field(
        False,
        description='Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).',
    )


class ListBatchesResponse(BaseModel):
    data: List[Batch]
    first_id: Optional[str] = Field(None, examples=['batch_abc123'])
    last_id: Optional[str] = Field(None, examples=['batch_abc456'])
    has_more: bool
    object: Object20


class ListFilesResponse(BaseModel):
    object: str = Field(..., examples=['list'])
    data: List[OpenAIFile]
    first_id: str = Field(..., examples=['file-abc123'])
    last_id: str = Field(..., examples=['file-abc456'])
    has_more: bool = Field(..., examples=[False])


class ListModelsResponse(BaseModel):
    object: Object20
    data: List[ModelModel]


class ListPaginatedFineTuningJobsResponse(BaseModel):
    data: List[FineTuningJob]
    has_more: bool
    object: Object20


class ListThreadsResponse(BaseModel):
    object: str = Field(..., examples=['list'])
    data: List[ThreadObject]
    first_id: str = Field(..., examples=['asst_abc123'])
    last_id: str = Field(..., examples=['asst_abc456'])
    has_more: bool = Field(..., examples=[False])


class ListVectorStoreFilesResponse(BaseModel):
    object: str = Field(..., examples=['list'])
    data: List[VectorStoreFileObject]
    first_id: str = Field(..., examples=['file-abc123'])
    last_id: str = Field(..., examples=['file-abc456'])
    has_more: bool = Field(..., examples=[False])


class ListVectorStoresResponse(BaseModel):
    object: str = Field(..., examples=['list'])
    data: List[VectorStoreObject]
    first_id: str = Field(..., examples=['vs_abc123'])
    last_id: str = Field(..., examples=['vs_abc456'])
    has_more: bool = Field(..., examples=[False])


class MessageObject(BaseModel):
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    object: Object28 = Field(
        ..., description='The object type, which is always `thread.message`.'
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the message was created.',
    )
    thread_id: str = Field(
        ...,
        description='The [thread](/docs/api-reference/threads) ID that this message belongs to.',
    )
    status: Status3 = Field(
        ...,
        description='The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.',
    )
    incomplete_details: IncompleteDetails = Field(
        ...,
        description='On an incomplete message, details about why the message is incomplete.',
    )
    completed_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the message was completed.',
    )
    incomplete_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the message was marked as incomplete.',
    )
    role: Role13 = Field(
        ...,
        description='The entity that produced the message. One of `user` or `assistant`.',
    )
    content: List[
        Union[
            MessageContentImageFileObject,
            MessageContentImageUrlObject,
            MessageContentTextObject,
            MessageContentRefusalObject,
        ]
    ] = Field(
        ..., description='The content of the message in array of text and/or images.'
    )
    assistant_id: str = Field(
        ...,
        description='If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.',
    )
    run_id: str = Field(
        ...,
        description='The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.',
    )
    attachments: List[Attachment] = Field(
        ...,
        description='A list of files attached to the message, and the tools they were added to.',
    )
    metadata: Metadata


class MessageStreamEvent1(BaseModel):
    event: Event2
    data: MessageObject


class MessageStreamEvent2(BaseModel):
    event: Event3
    data: MessageObject


class MessageStreamEvent4(BaseModel):
    event: Event5
    data: MessageObject


class MessageStreamEvent5(BaseModel):
    event: Event6
    data: MessageObject


class MessageStreamEvent(
    RootModel[
        Union[
            MessageStreamEvent1,
            MessageStreamEvent2,
            MessageStreamEvent3,
            MessageStreamEvent4,
            MessageStreamEvent5,
        ]
    ]
):
    root: Union[
        MessageStreamEvent1,
        MessageStreamEvent2,
        MessageStreamEvent3,
        MessageStreamEvent4,
        MessageStreamEvent5,
    ]


class Owner1(BaseModel):
    type: Optional[Type45] = Field(None, description='`user` or `service_account`')
    user: Optional[ProjectUser] = None
    service_account: Optional[ProjectServiceAccount] = None


class ProjectApiKey(BaseModel):
    object: Object32 = Field(
        ...,
        description='The object type, which is always `organization.project.api_key`',
    )
    redacted_value: str = Field(..., description='The redacted value of the API key')
    name: str = Field(..., description='The name of the API key')
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) of when the API key was created',
    )
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints'
    )
    owner: Owner1


class ProjectApiKeyListResponse(BaseModel):
    object: Object34
    data: List[ProjectApiKey]
    first_id: str
    last_id: str
    has_more: bool


class RealtimeClientEventConversationItemCreate(BaseModel):
    event_id: Optional[str] = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type46 = Field(
        ..., description='The event type, must be `conversation.item.create`.'
    )
    previous_item_id: Optional[str] = Field(
        None,
        description='The ID of the preceding item after which the new item will be inserted. \nIf not set, the new item will be appended to the end of the conversation.\nIf set to `root`, the new item will be added to the beginning of the conversation.\nIf set to an existing ID, it allows an item to be inserted mid-conversation. If the\nID cannot be found, an error will be returned and the item will not be added.\n',
    )
    item: RealtimeConversationItem


class RealtimeClientEventResponseCreate(BaseModel):
    event_id: Optional[str] = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type53 = Field(..., description='The event type, must be `response.create`.')
    response: Optional[RealtimeResponseCreateParams] = None


class RealtimeClientEventSessionUpdate(BaseModel):
    event_id: Optional[str] = Field(
        None, description='Optional client-generated ID used to identify this event.'
    )
    type: Type54 = Field(..., description='The event type, must be `session.update`.')
    session: RealtimeSessionCreateRequest


class RealtimeServerEventSessionCreated(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type89 = Field(..., description='The event type, must be `session.created`.')
    session: RealtimeSession


class RealtimeServerEventSessionUpdated(BaseModel):
    event_id: str = Field(..., description='The unique ID of the server event.')
    type: Type90 = Field(..., description='The event type, must be `session.updated`.')
    session: RealtimeSession


class JsonSchema(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of what the response format is for, used by the model to determine how to respond in the format.',
    )
    name: str = Field(
        ...,
        description='The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.',
    )
    schema_: Optional[ResponseFormatJsonSchemaSchema] = Field(None, alias='schema')
    strict: Optional[bool] = Field(
        False,
        description='Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).',
    )


class ResponseFormatJsonSchema(BaseModel):
    type: Type96 = Field(
        ..., description='The type of response format being defined: `json_schema`'
    )
    json_schema: JsonSchema


class SubmitToolOutputs(BaseModel):
    tool_calls: List[RunToolCallObject] = Field(
        ..., description='A list of the relevant tool calls.'
    )


class RequiredAction(BaseModel):
    type: Type98 = Field(
        ..., description='For now, this is always `submit_tool_outputs`.'
    )
    submit_tool_outputs: SubmitToolOutputs = Field(
        ..., description='Details on the tool outputs needed for this run to continue.'
    )


class CodeInterpreter6(BaseModel):
    input: Optional[str] = Field(
        None, description='The input to the Code Interpreter tool call.'
    )
    outputs: Optional[
        List[
            Union[
                RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject,
                RunStepDeltaStepDetailsToolCallsCodeOutputImageObject,
            ]
        ]
    ] = Field(
        None,
        description='The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.',
    )


class RunStepDeltaStepDetailsToolCallsCodeObject(BaseModel):
    index: int = Field(
        ..., description='The index of the tool call in the tool calls array.'
    )
    id: Optional[str] = Field(None, description='The ID of the tool call.')
    type: Type100 = Field(
        ...,
        description='The type of tool call. This is always going to be `code_interpreter` for this type of tool call.',
    )
    code_interpreter: Optional[CodeInterpreter6] = Field(
        None, description='The Code Interpreter tool call definition.'
    )


class RunStepDeltaStepDetailsToolCallsObject(BaseModel):
    type: Type105 = Field(..., description='Always `tool_calls`.')
    tool_calls: Optional[
        List[
            Union[
                RunStepDeltaStepDetailsToolCallsCodeObject,
                RunStepDeltaStepDetailsToolCallsFileSearchObject,
                RunStepDeltaStepDetailsToolCallsFunctionObject,
            ]
        ]
    ] = Field(
        None,
        description='An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.\n',
    )


class CodeInterpreter7(BaseModel):
    input: str = Field(..., description='The input to the Code Interpreter tool call.')
    outputs: List[
        Union[
            RunStepDetailsToolCallsCodeOutputLogsObject,
            RunStepDetailsToolCallsCodeOutputImageObject,
        ]
    ] = Field(
        ...,
        description='The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.',
    )


class RunStepDetailsToolCallsCodeObject(BaseModel):
    id: str = Field(..., description='The ID of the tool call.')
    type: Type107 = Field(
        ...,
        description='The type of tool call. This is always going to be `code_interpreter` for this type of tool call.',
    )
    code_interpreter: CodeInterpreter7 = Field(
        ..., description='The Code Interpreter tool call definition.'
    )


class FileSearch9(BaseModel):
    ranking_options: Optional[RunStepDetailsToolCallsFileSearchRankingOptionsObject] = (
        None
    )
    results: Optional[List[RunStepDetailsToolCallsFileSearchResultObject]] = Field(
        None, description='The results of the file search.'
    )


class RunStepDetailsToolCallsFileSearchObject(BaseModel):
    id: str = Field(..., description='The ID of the tool call object.')
    type: Type110 = Field(
        ...,
        description='The type of tool call. This is always going to be `file_search` for this type of tool call.',
    )
    file_search: FileSearch9 = Field(
        ..., description='For now, this is always going to be an empty object.'
    )


class RunStepDetailsToolCallsObject(BaseModel):
    type: Type113 = Field(..., description='Always `tool_calls`.')
    tool_calls: List[
        Union[
            RunStepDetailsToolCallsCodeObject,
            RunStepDetailsToolCallsFileSearchObject,
            RunStepDetailsToolCallsFunctionObject,
        ]
    ] = Field(
        ...,
        description='An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.\n',
    )


class RunStepObject(BaseModel):
    id: str = Field(
        ...,
        description='The identifier of the run step, which can be referenced in API endpoints.',
    )
    object: Object50 = Field(
        ..., description='The object type, which is always `thread.run.step`.'
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run step was created.',
    )
    assistant_id: str = Field(
        ...,
        description='The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.',
    )
    thread_id: str = Field(
        ...,
        description='The ID of the [thread](/docs/api-reference/threads) that was run.',
    )
    run_id: str = Field(
        ...,
        description='The ID of the [run](/docs/api-reference/runs) that this run step is a part of.',
    )
    type: Type114 = Field(
        ...,
        description='The type of run step, which can be either `message_creation` or `tool_calls`.',
    )
    status: Status10 = Field(
        ...,
        description='The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.',
    )
    step_details: Union[
        RunStepDetailsMessageCreationObject, RunStepDetailsToolCallsObject
    ] = Field(..., description='The details of the run step.')
    last_error: LastError1 = Field(
        ...,
        description='The last error associated with this run step. Will be `null` if there are no errors.',
    )
    expired_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.',
    )
    cancelled_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run step was cancelled.',
    )
    failed_at: int = Field(
        ..., description='The Unix timestamp (in seconds) for when the run step failed.'
    )
    completed_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run step completed.',
    )
    metadata: Metadata
    usage: RunStepCompletionUsage


class RunStepStreamEvent1(BaseModel):
    event: Event7
    data: RunStepObject


class RunStepStreamEvent2(BaseModel):
    event: Event8
    data: RunStepObject


class RunStepStreamEvent4(BaseModel):
    event: Event10
    data: RunStepObject


class RunStepStreamEvent5(BaseModel):
    event: Event11
    data: RunStepObject


class RunStepStreamEvent6(BaseModel):
    event: Event12
    data: RunStepObject


class RunStepStreamEvent7(BaseModel):
    event: Event13
    data: RunStepObject


class UpdateVectorStoreRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = Field(None, description='The name of the vector store.')
    expires_after: Optional[VectorStoreExpirationAfter] = None
    metadata: Optional[Metadata] = None


class UsageTimeBucket(BaseModel):
    object: Object62
    start_time: int
    end_time: int
    result: List[
        Union[
            UsageCompletionsResult,
            UsageEmbeddingsResult,
            UsageModerationsResult,
            UsageImagesResult,
            UsageAudioSpeechesResult,
            UsageAudioTranscriptionsResult,
            UsageVectorStoresResult,
            UsageCodeInterpreterSessionsResult,
            CostsResult,
        ]
    ]


class AudioTranscriptionsPostResponse(
    RootModel[
        Union[CreateTranscriptionResponseJson, CreateTranscriptionResponseVerboseJson]
    ]
):
    root: Union[CreateTranscriptionResponseJson, CreateTranscriptionResponseVerboseJson]


class AudioTranslationsPostResponse(
    RootModel[
        Union[CreateTranslationResponseJson, CreateTranslationResponseVerboseJson]
    ]
):
    root: Union[CreateTranslationResponseJson, CreateTranslationResponseVerboseJson]


class AssistantToolsFunction(BaseModel):
    type: Type3 = Field(..., description='The type of tool being defined: `function`')
    function: FunctionObject


class AssistantsApiResponseFormatOption(
    RootModel[
        Union[
            AssistantsApiResponseFormatOption1,
            ResponseFormatText,
            ResponseFormatJsonObject,
            ResponseFormatJsonSchema,
        ]
    ]
):
    root: Union[
        AssistantsApiResponseFormatOption1,
        ResponseFormatText,
        ResponseFormatJsonObject,
        ResponseFormatJsonSchema,
    ] = Field(
        ...,
        description='Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n',
    )


class AuditLogActor(BaseModel):
    type: Optional[Type5] = Field(
        None, description='The type of actor. Is either `session` or `api_key`.'
    )
    session: Optional[AuditLogActorSession] = None
    api_key: Optional[AuditLogActorApiKey] = None


class ChatCompletionRequestAssistantMessage(BaseModel):
    content: Optional[
        Union[str, List[ChatCompletionRequestAssistantMessageContentPart]]
    ] = Field(
        None,
        description='The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.\n',
    )
    refusal: Optional[str] = Field(
        None, description='The refusal message by the assistant.'
    )
    role: Role = Field(
        ..., description='The role of the messages author, in this case `assistant`.'
    )
    name: Optional[str] = Field(
        None,
        description='An optional name for the participant. Provides the model information to differentiate between participants of the same role.',
    )
    audio: Optional[Audio] = Field(
        None,
        description='Data about a previous audio response from the model. \n[Learn more](/docs/guides/audio).\n',
    )
    tool_calls: Optional[ChatCompletionMessageToolCalls] = None
    function_call: Optional[FunctionCall] = Field(
        None,
        description='Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.',
    )


class ChatCompletionRequestMessage(
    RootModel[
        Union[
            ChatCompletionRequestDeveloperMessage,
            ChatCompletionRequestSystemMessage,
            ChatCompletionRequestUserMessage,
            ChatCompletionRequestAssistantMessage,
            ChatCompletionRequestToolMessage,
            ChatCompletionRequestFunctionMessage,
        ]
    ]
):
    root: Union[
        ChatCompletionRequestDeveloperMessage,
        ChatCompletionRequestSystemMessage,
        ChatCompletionRequestUserMessage,
        ChatCompletionRequestAssistantMessage,
        ChatCompletionRequestToolMessage,
        ChatCompletionRequestFunctionMessage,
    ]


class ChatCompletionTool(BaseModel):
    type: Type15 = Field(
        ...,
        description='The type of the tool. Currently, only `function` is supported.',
    )
    function: FunctionObject


class CreateAssistantRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    model: Union[str, AssistantSupportedModels] = Field(
        ...,
        description='ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n',
        examples=['gpt-4o'],
    )
    name: Optional[constr(max_length=256)] = Field(
        None,
        description='The name of the assistant. The maximum length is 256 characters.\n',
    )
    description: Optional[constr(max_length=512)] = Field(
        None,
        description='The description of the assistant. The maximum length is 512 characters.\n',
    )
    instructions: Optional[constr(max_length=256000)] = Field(
        None,
        description='The system instructions that the assistant uses. The maximum length is 256,000 characters.\n',
    )
    reasoning_effort: Optional[ReasoningEffort] = 'medium'
    tools: Optional[
        List[
            Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
        ]
    ] = Field(
        [],
        description='A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n',
        max_length=128,
    )
    tool_resources: Optional[ToolResources1] = Field(
        None,
        description="A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    metadata: Optional[Metadata] = None
    temperature: Optional[confloat(ge=0.0, le=2.0)] = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n',
        examples=[1],
    )
    top_p: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n',
        examples=[1],
    )
    response_format: Optional[AssistantsApiResponseFormatOption] = None


class CreateChatCompletionRequest(BaseModel):
    messages: List[ChatCompletionRequestMessage] = Field(
        ...,
        description='A list of messages comprising the conversation so far. Depending on the\n[model](/docs/models) you use, different message types (modalities) are\nsupported, like [text](/docs/guides/text-generation),\n[images](/docs/guides/vision), and [audio](/docs/guides/audio).\n',
        min_length=1,
    )
    model: Union[str, Model] = Field(
        ...,
        description='ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.',
        examples=['gpt-4o'],
    )
    store: Optional[bool] = Field(
        False,
        description='Whether or not to store the output of this chat completion request for \nuse in our [model distillation](/docs/guides/distillation) or\n[evals](/docs/guides/evals) products.\n',
    )
    reasoning_effort: Optional[ReasoningEffort] = 'medium'
    metadata: Optional[Metadata] = None
    frequency_penalty: Optional[confloat(ge=-2.0, le=2.0)] = Field(
        0,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on\ntheir existing frequency in the text so far, decreasing the model's\nlikelihood to repeat the same line verbatim.\n",
    )
    logit_bias: Optional[Dict[str, int]] = Field(
        None,
        description='Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the\ntokenizer) to an associated bias value from -100 to 100. Mathematically,\nthe bias is added to the logits generated by the model prior to sampling.\nThe exact effect will vary per model, but values between -1 and 1 should\ndecrease or increase likelihood of selection; values like -100 or 100\nshould result in a ban or exclusive selection of the relevant token.\n',
    )
    logprobs: Optional[bool] = Field(
        False,
        description='Whether to return log probabilities of the output tokens or not. If true,\nreturns the log probabilities of each output token returned in the\n`content` of `message`.\n',
    )
    top_logprobs: Optional[conint(ge=0, le=20)] = Field(
        None,
        description='An integer between 0 and 20 specifying the number of most likely tokens to\nreturn at each token position, each with an associated log probability.\n`logprobs` must be set to `true` if this parameter is used.\n',
    )
    max_tokens: Optional[int] = Field(
        None,
        description='The maximum number of [tokens](/tokenizer) that can be generated in the\nchat completion. This value can be used to control\n[costs](https://openai.com/api/pricing/) for text generated via API.\n\nThis value is now deprecated in favor of `max_completion_tokens`, and is\nnot compatible with [o1 series models](/docs/guides/reasoning).\n',
    )
    max_completion_tokens: Optional[int] = Field(
        None,
        description='An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).\n',
    )
    n: Optional[conint(ge=1, le=128)] = Field(
        1,
        description='How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.',
        examples=[1],
    )
    modalities: Optional[ChatCompletionModalities] = None
    prediction: Optional[PredictionContent] = Field(
        None,
        description='Configuration for a [Predicted Output](/docs/guides/predicted-outputs),\nwhich can greatly improve response times when large parts of the model\nresponse are known ahead of time. This is most common when you are\nregenerating a file with only minor changes to most of the content.\n',
    )
    audio: Optional[Audio2] = Field(
        None,
        description='Parameters for audio output. Required when audio output is requested with\n`modalities: ["audio"]`. [Learn more](/docs/guides/audio).\n',
    )
    presence_penalty: Optional[confloat(ge=-2.0, le=2.0)] = Field(
        0,
        description="Number between -2.0 and 2.0. Positive values penalize new tokens based on\nwhether they appear in the text so far, increasing the model's likelihood\nto talk about new topics.\n",
    )
    response_format: Optional[
        Union[ResponseFormatText, ResponseFormatJsonObject, ResponseFormatJsonSchema]
    ] = Field(
        None,
        description='An object specifying the format that the model must output.\n\nSetting to `{ "type": "json_schema", "json_schema": {...} }` enables\nStructured Outputs which ensures the model will match your supplied JSON\nschema. Learn more in the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n\nSetting to `{ "type": "json_object" }` enables JSON mode, which ensures\nthe message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model\nto produce JSON yourself via a system or user message. Without this, the\nmodel may generate an unending stream of whitespace until the generation\nreaches the token limit, resulting in a long-running and seemingly "stuck"\nrequest. Also note that the message content may be partially cut off if\n`finish_reason="length"`, which indicates the generation exceeded\n`max_tokens` or the conversation exceeded the max context length.\n',
    )
    seed: Optional[int] = Field(
        None,
        description='This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n',
    )
    service_tier: Optional[ServiceTier] = Field(
        'auto',
        description="Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:\n  - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.\n  - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.\n  - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarantee.\n  - When not set, the default behavior is 'auto'.\n",
    )
    stop: Optional[Union[str, List[str]]] = Field(
        None,
        description='Up to 4 sequences where the API will stop generating further tokens.\n',
    )
    stream: Optional[bool] = Field(
        False,
        description='If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n',
    )
    stream_options: Optional[ChatCompletionStreamOptions] = None
    temperature: Optional[confloat(ge=0.0, le=2.0)] = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.\n',
        examples=[1],
    )
    top_p: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.\n',
        examples=[1],
    )
    tools: Optional[List[ChatCompletionTool]] = Field(
        None,
        description='A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n',
    )
    tool_choice: Optional[ChatCompletionToolChoiceOption] = None
    parallel_tool_calls: Optional[ParallelToolCalls] = None
    user: Optional[str] = Field(
        None,
        description='A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n',
        examples=['user-1234'],
    )
    function_call: Optional[Union[FunctionCall3, ChatCompletionFunctionCallOption]] = (
        Field(
            None,
            description='Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n\n`none` means the model will not call a function and instead generates a\nmessage.\n\n`auto` means the model can pick between generating a message or calling a\nfunction.\n\nSpecifying a particular function via `{"name": "my_function"}` forces the\nmodel to call that function.\n\n`none` is the default when no functions are present. `auto` is the default\nif functions are present.\n',
        )
    )
    functions: Optional[List[ChatCompletionFunctions]] = Field(
        None,
        description='Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n',
        max_length=128,
        min_length=1,
    )


class CreateFineTuningJobRequest(BaseModel):
    model: Union[str, Model3] = Field(
        ...,
        description='The name of the model to fine-tune. You can select one of the\n[supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).\n',
        examples=['gpt-4o-mini'],
    )
    training_file: str = Field(
        ...,
        description='The ID of an uploaded file that contains training data.\n\nSee [upload file](/docs/api-reference/files/create) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.\n\nThe contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n',
        examples=['file-abc123'],
    )
    hyperparameters: Optional[Hyperparameters] = Field(
        None,
        description='The hyperparameters used for the fine-tuning job.\nThis value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.\n',
    )
    suffix: Optional[constr(min_length=1, max_length=64)] = Field(
        None,
        description='A string of up to 64 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.\n',
    )
    validation_file: Optional[str] = Field(
        None,
        description='The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe fine-tuning results file.\nThe same data should not be present in both train and validation files.\n\nYour dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n',
        examples=['file-abc123'],
    )
    integrations: Optional[List[Integration]] = Field(
        None, description='A list of integrations to enable for your fine-tuning job.'
    )
    seed: Optional[conint(ge=0, le=2147483647)] = Field(
        None,
        description='The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.\nIf a seed is not specified, one will be generated for you.\n',
        examples=[42],
    )
    method: Optional[FineTuneMethod] = None


class CreateRunRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assistant_id: str = Field(
        ...,
        description='The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.',
    )
    model: Optional[Union[str, AssistantSupportedModels]] = Field(
        None,
        description='The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.',
        examples=['gpt-4o'],
    )
    reasoning_effort: Optional[ReasoningEffort] = 'medium'
    instructions: Optional[str] = Field(
        None,
        description='Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.',
    )
    additional_instructions: Optional[str] = Field(
        None,
        description='Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.',
    )
    additional_messages: Optional[List[CreateMessageRequest]] = Field(
        None,
        description='Adds additional messages to the thread before creating the run.',
    )
    tools: Optional[
        List[
            Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
        ]
    ] = Field(
        None,
        description='Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.',
        max_length=20,
    )
    metadata: Optional[Metadata] = None
    temperature: Optional[confloat(ge=0.0, le=2.0)] = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n',
        examples=[1],
    )
    top_p: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n',
        examples=[1],
    )
    stream: Optional[bool] = Field(
        None,
        description='If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n',
    )
    max_prompt_tokens: Optional[conint(ge=256)] = Field(
        None,
        description='The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n',
    )
    max_completion_tokens: Optional[conint(ge=256)] = Field(
        None,
        description='The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n',
    )
    truncation_strategy: Optional[TruncationObject] = None
    tool_choice: Optional[AssistantsApiToolChoiceOption] = None
    parallel_tool_calls: Optional[ParallelToolCalls] = None
    response_format: Optional[AssistantsApiResponseFormatOption] = None


class CreateThreadAndRunRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assistant_id: str = Field(
        ...,
        description='The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.',
    )
    thread: Optional[CreateThreadRequest] = None
    model: Optional[Union[str, Model9]] = Field(
        None,
        description='The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.',
        examples=['gpt-4o'],
    )
    instructions: Optional[str] = Field(
        None,
        description='Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.',
    )
    tools: Optional[
        List[
            Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
        ]
    ] = Field(
        None,
        description='Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.',
        max_length=20,
    )
    tool_resources: Optional[ToolResources2] = Field(
        None,
        description="A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    metadata: Optional[Metadata] = None
    temperature: Optional[confloat(ge=0.0, le=2.0)] = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n',
        examples=[1],
    )
    top_p: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n',
        examples=[1],
    )
    stream: Optional[bool] = Field(
        None,
        description='If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n',
    )
    max_prompt_tokens: Optional[conint(ge=256)] = Field(
        None,
        description='The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n',
    )
    max_completion_tokens: Optional[conint(ge=256)] = Field(
        None,
        description='The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n',
    )
    truncation_strategy: Optional[TruncationObject] = None
    tool_choice: Optional[AssistantsApiToolChoiceOption] = None
    parallel_tool_calls: Optional[ParallelToolCalls] = None
    response_format: Optional[AssistantsApiResponseFormatOption] = None


class FineTuneChatCompletionRequestAssistantMessage(
    ChatCompletionRequestAssistantMessage
):
    weight: Optional[Weight] = Field(
        None,
        description='Controls whether the assistant message is trained against (0 or 1)',
    )
    role: Role = Field(
        ..., description='The role of the messages author, in this case `assistant`.'
    )


class FineTuneChatRequestInput(BaseModel):
    messages: Optional[
        List[
            Union[
                ChatCompletionRequestSystemMessage,
                ChatCompletionRequestUserMessage,
                FineTuneChatCompletionRequestAssistantMessage,
                ChatCompletionRequestToolMessage,
                ChatCompletionRequestFunctionMessage,
            ]
        ]
    ] = Field(None, min_length=1)
    tools: Optional[List[ChatCompletionTool]] = Field(
        None, description='A list of tools the model may generate JSON inputs for.'
    )
    parallel_tool_calls: Optional[ParallelToolCalls] = None
    functions: Optional[List[ChatCompletionFunctions]] = Field(
        None,
        description='A list of functions the model may generate JSON inputs for.',
        max_length=128,
        min_length=1,
    )


class Input2(BaseModel):
    messages: Optional[
        List[
            Union[
                ChatCompletionRequestSystemMessage,
                ChatCompletionRequestUserMessage,
                FineTuneChatCompletionRequestAssistantMessage,
                ChatCompletionRequestToolMessage,
                ChatCompletionRequestFunctionMessage,
            ]
        ]
    ] = Field(None, min_length=1)
    tools: Optional[List[ChatCompletionTool]] = Field(
        None, description='A list of tools the model may generate JSON inputs for.'
    )
    parallel_tool_calls: Optional[ParallelToolCalls] = None


class FineTunePreferenceRequestInput(BaseModel):
    input: Optional[Input2] = None
    preferred_completion: Optional[List[ChatCompletionRequestAssistantMessage]] = Field(
        None,
        description='The preferred completion message for the output.',
        max_length=1,
    )
    non_preferred_completion: Optional[List[ChatCompletionRequestAssistantMessage]] = (
        Field(
            None,
            description='The non-preferred completion message for the output.',
            max_length=1,
        )
    )


class ListMessagesResponse(BaseModel):
    object: str = Field(..., examples=['list'])
    data: List[MessageObject]
    first_id: str = Field(..., examples=['msg_abc123'])
    last_id: str = Field(..., examples=['msg_abc123'])
    has_more: bool = Field(..., examples=[False])


class ListRunStepsResponse(BaseModel):
    object: str = Field(..., examples=['list'])
    data: List[RunStepObject]
    first_id: str = Field(..., examples=['step_abc123'])
    last_id: str = Field(..., examples=['step_abc456'])
    has_more: bool = Field(..., examples=[False])


class ModifyAssistantRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    model: Optional[Union[str, AssistantSupportedModels]] = Field(
        None,
        description='ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n',
    )
    reasoning_effort: Optional[ReasoningEffort] = 'medium'
    name: Optional[constr(max_length=256)] = Field(
        None,
        description='The name of the assistant. The maximum length is 256 characters.\n',
    )
    description: Optional[constr(max_length=512)] = Field(
        None,
        description='The description of the assistant. The maximum length is 512 characters.\n',
    )
    instructions: Optional[constr(max_length=256000)] = Field(
        None,
        description='The system instructions that the assistant uses. The maximum length is 256,000 characters.\n',
    )
    tools: Optional[
        List[
            Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
        ]
    ] = Field(
        [],
        description='A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n',
        max_length=128,
    )
    tool_resources: Optional[ToolResources4] = Field(
        None,
        description="A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    metadata: Optional[Metadata] = None
    temperature: Optional[confloat(ge=0.0, le=2.0)] = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n',
        examples=[1],
    )
    top_p: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n',
        examples=[1],
    )
    response_format: Optional[AssistantsApiResponseFormatOption] = None


class RunObject(BaseModel):
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    object: Object48 = Field(
        ..., description='The object type, which is always `thread.run`.'
    )
    created_at: int = Field(
        ..., description='The Unix timestamp (in seconds) for when the run was created.'
    )
    thread_id: str = Field(
        ...,
        description='The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.',
    )
    assistant_id: str = Field(
        ...,
        description='The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.',
    )
    status: Status9 = Field(
        ...,
        description='The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.',
    )
    required_action: RequiredAction = Field(
        ...,
        description='Details on the action required to continue the run. Will be `null` if no action is required.',
    )
    last_error: LastError = Field(
        ...,
        description='The last error associated with this run. Will be `null` if there are no errors.',
    )
    expires_at: int = Field(
        ..., description='The Unix timestamp (in seconds) for when the run will expire.'
    )
    started_at: int = Field(
        ..., description='The Unix timestamp (in seconds) for when the run was started.'
    )
    cancelled_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run was cancelled.',
    )
    failed_at: int = Field(
        ..., description='The Unix timestamp (in seconds) for when the run failed.'
    )
    completed_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the run was completed.',
    )
    incomplete_details: IncompleteDetails1 = Field(
        ...,
        description='Details on why the run is incomplete. Will be `null` if the run is not incomplete.',
    )
    model: str = Field(
        ...,
        description='The model that the [assistant](/docs/api-reference/assistants) used for this run.',
    )
    instructions: str = Field(
        ...,
        description='The instructions that the [assistant](/docs/api-reference/assistants) used for this run.',
    )
    tools: List[
        Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
    ] = Field(
        ...,
        description='The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.',
        max_length=20,
    )
    metadata: Metadata
    usage: RunCompletionUsage
    temperature: Optional[float] = Field(
        None,
        description='The sampling temperature used for this run. If not set, defaults to 1.',
    )
    top_p: Optional[float] = Field(
        None,
        description='The nucleus sampling value used for this run. If not set, defaults to 1.',
    )
    max_prompt_tokens: conint(ge=256) = Field(
        ...,
        description='The maximum number of prompt tokens specified to have been used over the course of the run.\n',
    )
    max_completion_tokens: conint(ge=256) = Field(
        ...,
        description='The maximum number of completion tokens specified to have been used over the course of the run.\n',
    )
    truncation_strategy: TruncationObject
    tool_choice: AssistantsApiToolChoiceOption
    parallel_tool_calls: ParallelToolCalls
    response_format: AssistantsApiResponseFormatOption


class Delta1(BaseModel):
    step_details: Optional[
        Union[
            RunStepDeltaStepDetailsMessageCreationObject,
            RunStepDeltaStepDetailsToolCallsObject,
        ]
    ] = Field(None, description='The details of the run step.')


class RunStepDeltaObject(BaseModel):
    id: str = Field(
        ...,
        description='The identifier of the run step, which can be referenced in API endpoints.',
    )
    object: Object49 = Field(
        ..., description='The object type, which is always `thread.run.step.delta`.'
    )
    delta: Delta1 = Field(
        ...,
        description='The delta containing the fields that have changed on the run step.',
    )


class RunStepStreamEvent3(BaseModel):
    event: Event9
    data: RunStepDeltaObject


class RunStepStreamEvent(
    RootModel[
        Union[
            RunStepStreamEvent1,
            RunStepStreamEvent2,
            RunStepStreamEvent3,
            RunStepStreamEvent4,
            RunStepStreamEvent5,
            RunStepStreamEvent6,
            RunStepStreamEvent7,
        ]
    ]
):
    root: Union[
        RunStepStreamEvent1,
        RunStepStreamEvent2,
        RunStepStreamEvent3,
        RunStepStreamEvent4,
        RunStepStreamEvent5,
        RunStepStreamEvent6,
        RunStepStreamEvent7,
    ]


class RunStreamEvent1(BaseModel):
    event: Event14
    data: RunObject


class RunStreamEvent2(BaseModel):
    event: Event15
    data: RunObject


class RunStreamEvent3(BaseModel):
    event: Event16
    data: RunObject


class RunStreamEvent4(BaseModel):
    event: Event17
    data: RunObject


class RunStreamEvent5(BaseModel):
    event: Event18
    data: RunObject


class RunStreamEvent6(BaseModel):
    event: Event19
    data: RunObject


class RunStreamEvent7(BaseModel):
    event: Event20
    data: RunObject


class RunStreamEvent8(BaseModel):
    event: Event21
    data: RunObject


class RunStreamEvent9(BaseModel):
    event: Event22
    data: RunObject


class RunStreamEvent10(BaseModel):
    event: Event23
    data: RunObject


class RunStreamEvent(
    RootModel[
        Union[
            RunStreamEvent1,
            RunStreamEvent2,
            RunStreamEvent3,
            RunStreamEvent4,
            RunStreamEvent5,
            RunStreamEvent6,
            RunStreamEvent7,
            RunStreamEvent8,
            RunStreamEvent9,
            RunStreamEvent10,
        ]
    ]
):
    root: Union[
        RunStreamEvent1,
        RunStreamEvent2,
        RunStreamEvent3,
        RunStreamEvent4,
        RunStreamEvent5,
        RunStreamEvent6,
        RunStreamEvent7,
        RunStreamEvent8,
        RunStreamEvent9,
        RunStreamEvent10,
    ]


class UsageResponse(BaseModel):
    object: Object61
    data: List[UsageTimeBucket]
    has_more: bool
    next_page: str


class AssistantObject(BaseModel):
    id: str = Field(
        ..., description='The identifier, which can be referenced in API endpoints.'
    )
    object: Object = Field(
        ..., description='The object type, which is always `assistant`.'
    )
    created_at: int = Field(
        ...,
        description='The Unix timestamp (in seconds) for when the assistant was created.',
    )
    name: constr(max_length=256) = Field(
        ...,
        description='The name of the assistant. The maximum length is 256 characters.\n',
    )
    description: constr(max_length=512) = Field(
        ...,
        description='The description of the assistant. The maximum length is 512 characters.\n',
    )
    model: str = Field(
        ...,
        description='ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n',
    )
    instructions: constr(max_length=256000) = Field(
        ...,
        description='The system instructions that the assistant uses. The maximum length is 256,000 characters.\n',
    )
    tools: List[
        Union[AssistantToolsCode, AssistantToolsFileSearch, AssistantToolsFunction]
    ] = Field(
        ...,
        description='A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n',
        max_length=128,
    )
    tool_resources: Optional[ToolResources] = Field(
        None,
        description="A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
    )
    metadata: Metadata
    temperature: Optional[confloat(ge=0.0, le=2.0)] = Field(
        1,
        description='What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n',
        examples=[1],
    )
    top_p: Optional[confloat(ge=0.0, le=1.0)] = Field(
        1,
        description='An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n',
        examples=[1],
    )
    response_format: Optional[AssistantsApiResponseFormatOption] = None


class AssistantStreamEvent(
    RootModel[
        Union[
            ThreadStreamEvent,
            RunStreamEvent,
            RunStepStreamEvent,
            MessageStreamEvent,
            ErrorEvent,
            DoneEvent,
        ]
    ]
):
    root: Union[
        ThreadStreamEvent,
        RunStreamEvent,
        RunStepStreamEvent,
        MessageStreamEvent,
        ErrorEvent,
        DoneEvent,
    ] = Field(
        ...,
        description='Represents an event emitted when streaming a Run.\n\nEach event in a server-sent events stream has an `event` and `data` property:\n\n```\nevent: thread.created\ndata: {"id": "thread_123", "object": "thread", ...}\n```\n\nWe emit events whenever a new object is created, transitions to a new state, or is being\nstreamed in parts (deltas). For example, we emit `thread.run.created` when a new run\nis created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses\nto create a message during a run, we emit a `thread.message.created event`, a\n`thread.message.in_progress` event, many `thread.message.delta` events, and finally a\n`thread.message.completed` event.\n\nWe may add additional events over time, so we recommend handling unknown events gracefully\nin your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to\nintegrate the Assistants API with streaming.\n',
    )


class AuditLog(BaseModel):
    id: str = Field(..., description='The ID of this log.')
    type: AuditLogEventType
    effective_at: int = Field(
        ..., description='The Unix timestamp (in seconds) of the event.'
    )
    project: Optional[Project] = Field(
        None,
        description='The project that the action was scoped to. Absent for actions not scoped to projects.',
    )
    actor: AuditLogActor
    api_key_created: Optional[ApiKeyCreated] = Field(
        None,
        alias='api_key.created',
        description='The details for events with this `type`.',
    )
    api_key_updated: Optional[ApiKeyUpdated] = Field(
        None,
        alias='api_key.updated',
        description='The details for events with this `type`.',
    )
    api_key_deleted: Optional[ApiKeyDeleted] = Field(
        None,
        alias='api_key.deleted',
        description='The details for events with this `type`.',
    )
    invite_sent: Optional[InviteSent] = Field(
        None,
        alias='invite.sent',
        description='The details for events with this `type`.',
    )
    invite_accepted: Optional[InviteAccepted] = Field(
        None,
        alias='invite.accepted',
        description='The details for events with this `type`.',
    )
    invite_deleted: Optional[InviteDeleted] = Field(
        None,
        alias='invite.deleted',
        description='The details for events with this `type`.',
    )
    login_failed: Optional[LoginFailed] = Field(
        None,
        alias='login.failed',
        description='The details for events with this `type`.',
    )
    logout_failed: Optional[LogoutFailed] = Field(
        None,
        alias='logout.failed',
        description='The details for events with this `type`.',
    )
    organization_updated: Optional[OrganizationUpdated] = Field(
        None,
        alias='organization.updated',
        description='The details for events with this `type`.',
    )
    project_created: Optional[ProjectCreated] = Field(
        None,
        alias='project.created',
        description='The details for events with this `type`.',
    )
    project_updated: Optional[ProjectUpdated] = Field(
        None,
        alias='project.updated',
        description='The details for events with this `type`.',
    )
    project_archived: Optional[ProjectArchived] = Field(
        None,
        alias='project.archived',
        description='The details for events with this `type`.',
    )
    rate_limit_updated: Optional[RateLimitUpdated] = Field(
        None,
        alias='rate_limit.updated',
        description='The details for events with this `type`.',
    )
    rate_limit_deleted: Optional[RateLimitDeleted] = Field(
        None,
        alias='rate_limit.deleted',
        description='The details for events with this `type`.',
    )
    service_account_created: Optional[ServiceAccountCreated] = Field(
        None,
        alias='service_account.created',
        description='The details for events with this `type`.',
    )
    service_account_updated: Optional[ServiceAccountUpdated] = Field(
        None,
        alias='service_account.updated',
        description='The details for events with this `type`.',
    )
    service_account_deleted: Optional[ServiceAccountDeleted] = Field(
        None,
        alias='service_account.deleted',
        description='The details for events with this `type`.',
    )
    user_added: Optional[UserAdded] = Field(
        None, alias='user.added', description='The details for events with this `type`.'
    )
    user_updated: Optional[UserUpdated] = Field(
        None,
        alias='user.updated',
        description='The details for events with this `type`.',
    )
    user_deleted: Optional[UserDeleted] = Field(
        None,
        alias='user.deleted',
        description='The details for events with this `type`.',
    )


class ListAssistantsResponse(BaseModel):
    object: str = Field(..., examples=['list'])
    data: List[AssistantObject]
    first_id: str = Field(..., examples=['asst_abc123'])
    last_id: str = Field(..., examples=['asst_abc456'])
    has_more: bool = Field(..., examples=[False])


class ListAuditLogsResponse(BaseModel):
    object: Object20
    data: List[AuditLog]
    first_id: str = Field(..., examples=['audit_log-defb456h8dks'])
    last_id: str = Field(..., examples=['audit_log-hnbkd8s93s'])
    has_more: bool


class ListRunsResponse(BaseModel):
    object: str = Field(..., examples=['list'])
    data: List[RunObject]
    first_id: str = Field(..., examples=['run_abc123'])
    last_id: str = Field(..., examples=['run_abc456'])
    has_more: bool = Field(..., examples=[False])
